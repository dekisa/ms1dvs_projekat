
histeq_accel.elf:     file format elf32-littlenios2
histeq_accel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00011958 memsz 0x00011958 flags r-x
    LOAD off    0x00012978 vaddr 0x02011978 paddr 0x020134d4 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00015030 vaddr 0x02015030 paddr 0x02015030 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001120c  02000230  02000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000053c  0201143c  0201143c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  02011978  020134d4  00012978  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  02015030  02015030  00015030  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  02015190  02015190  000144d4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000144d4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001090  00000000  00000000  000144f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002a756  00000000  00000000  00015588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a83f  00000000  00000000  0003fcde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ced2  00000000  00000000  0004a51d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002530  00000000  00000000  000573f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ea4  00000000  00000000  00059920  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018824  00000000  00000000  0005d7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00075fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001a28  00000000  00000000  00075ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007afae  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007afb1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007afbd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007afbe  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007afbf  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007afca  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007afd5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000010  00000000  00000000  0007afe0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000024  00000000  00000000  0007aff0  2**0
                  CONTENTS, READONLY
 26 .jdi          000057b9  00000000  00000000  0007b014  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003eb22  00000000  00000000  000807cd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000230 l    d  .text	00000000 .text
0201143c l    d  .rodata	00000000 .rodata
02011978 l    d  .rwdata	00000000 .rwdata
02015030 l    d  .bss	00000000 .bss
02015190 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../histeq_accel_bsp//obj/HAL/src/crt0.o
02000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 spec.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 specs.cpp
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02000e20 l     F .text	00000008 __fp_unlock
02000e34 l     F .text	0000019c __sinit.part.1
02000fd0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
02011978 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
02002ef4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
020115b6 l     O .rodata	00000010 zeroes.4404
02005604 l     F .text	000000bc __sbprintf
020115c6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
020058c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
020121c4 l     O .rwdata	00000020 lc_ctype_charset
020121a4 l     O .rwdata	00000020 lc_message_charset
020121e4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
020115f4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
02009288 l     F .text	000000fc __sprint_r.part.0
02011718 l     O .rodata	00000010 zeroes.4349
0200a8c4 l     F .text	000000bc __sbprintf
02011728 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0200e408 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200e51c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0200e548 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0200e63c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200e724 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200e810 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0200e9ec l     F .text	0000003c alt_get_errno
0200ea28 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0200ec70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201347c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0200eee4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0200f020 l     F .text	00000034 alt_dev_reg
020123c4 l     O .rwdata	00001060 jtag_uart_0
02013424 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200f314 l     F .text	0000020c altera_avalon_jtag_uart_irq
0200f520 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
02013480 l     O .rwdata	00000009 hcinfo.2538
0201348c l     O .rwdata	0000000a hcinfo.2551
02013498 l     O .rwdata	00000009 hcinfo.2560
020134a4 l     O .rwdata	0000000a hcinfo.2573
020134b0 l     O .rwdata	0000000a hcinfo.2586
020134bc l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02010538 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02010c74 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
02015064 g     O .bss	00000004 alt_instruction_exception_handler
020089fc g     F .text	00000074 _mprec_log10
02008ae8 g     F .text	0000008c __any_on
020076ec g     F .text	00000054 _isatty_r
02011600 g     O .rodata	00000028 __mprec_tinytens
0200e928 g     F .text	0000007c alt_main
02002e20 g     F .text	000000c0 _puts_r
02015090 g     O .bss	00000100 alt_irq
0200781c g     F .text	00000060 _lseek_r
020134d4 g       *ABS*	00000000 __flash_rwdata_start
02007178 g     F .text	000000ac __sflags
0200cde0 g     F .text	00000088 .hidden __eqdf2
02015190 g       *ABS*	00000000 __alt_heap_start
02002de4 g     F .text	0000003c printf
0200adbc g     F .text	0000009c _wcrtomb_r
02003210 g     F .text	0000005c __sseek
02001180 g     F .text	00000010 __sinit
0200fcc4 g     F .text	00000024 alt_get_cpu_freq
0200ac64 g     F .text	00000140 __swbuf_r
02007740 g     F .text	0000007c _setlocale_r
02000fd8 g     F .text	00000078 __sfmoreglue
0200e9c8 g     F .text	00000024 __malloc_unlock
0200fce8 g     F .text	0000011c alt_hostfs_open
02007960 g     F .text	0000015c memmove
0201016c g     F .text	00000280 perf_print_formatted_report
02001168 g     F .text	00000018 _cleanup
02007abc g     F .text	000000a8 _Balloc
0200ce68 g     F .text	000000dc .hidden __gtdf2
02010f78 g     F .text	00000024 altera_nios2_gen2_irq_init
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02001e00 g     F .text	0000005c _fstat_r
02015030 g     O .bss	00000004 errno
0200318c g     F .text	00000008 __seofread
02015050 g     O .bss	00000004 alt_argv
0201b44c g       *ABS*	00000000 _gp
02012244 g     O .rwdata	00000180 alt_fd_list
0200ff20 g     F .text	00000068 alt_hostfs_seek
020106d8 g     F .text	00000090 alt_find_dev
02002ae4 g     F .text	00000148 memcpy
02000e28 g     F .text	0000000c _cleanup_r
0200e220 g     F .text	000000dc .hidden __floatsidf
02010870 g     F .text	00000080 alt_fs_reg
02010d58 g     F .text	0000007c alt_io_redirect
0200cf44 g     F .text	000000f4 .hidden __ltdf2
0201143c g       *ABS*	00000000 __DTOR_END__
02002ee0 g     F .text	00000014 puts
02010f9c g     F .text	0000009c alt_exception_cause_generated_bad_addr
02009138 g     F .text	00000074 __fpclassifyd
02008958 g     F .text	000000a4 __ratio
0200a8a8 g     F .text	0000001c __vfiprintf_internal
0200f718 g     F .text	0000021c altera_avalon_jtag_uart_read
020022b0 g     F .text	00000014 malloc
02002db4 g     F .text	00000030 _printf_r
02000990 g     F .text	00000064 .hidden __udivsi3
0200e678 g     F .text	000000ac isatty
02011650 g     O .rodata	000000c8 __mprec_tens
020077bc g     F .text	0000000c __locale_charset
0201503c g     O .bss	00000004 __malloc_top_pad
0200fc60 g     F .text	00000040 perf_get_num_starts
0201345c g     O .rwdata	00000004 __mb_cur_max
020077ec g     F .text	0000000c _localeconv_r
02007ef0 g     F .text	0000003c __i2b
02007224 g     F .text	000004c8 __sfvwrite_r
020030e4 g     F .text	00000054 _sbrk_r
0200fe48 g     F .text	0000006c alt_hostfs_read
02008b74 g     F .text	00000060 _read_r
02013474 g     O .rwdata	00000004 alt_max_fd
02000a74 g     F .text	000000f0 _fclose_r
02000df0 g     F .text	00000030 fflush
02015038 g     O .bss	00000004 __malloc_max_sbrked_mem
0200bb64 g     F .text	000008ac .hidden __adddf3
02008700 g     F .text	0000010c __b2d
0200b5a0 g     F .text	000005c4 .hidden __umoddi3
0200e84c g     F .text	000000dc lseek
0201344c g     O .rwdata	00000004 _global_impure_ptr
02008bd4 g     F .text	00000564 _realloc_r
02015190 g       *ABS*	00000000 __bss_end
02010b84 g     F .text	000000f0 alt_iic_isr_register
02010e70 g     F .text	00000108 alt_tick
0200afa4 g     F .text	000005fc .hidden __udivdi3
0200abc0 g     F .text	00000024 _fputwc_r
02011628 g     O .rodata	00000028 __mprec_bigtens
02007cd4 g     F .text	00000104 __s2b
0200e2fc g     F .text	000000a8 .hidden __floatunsidf
02008440 g     F .text	00000060 __mcmp
020011a0 g     F .text	00000018 __fp_lock_all
02010b38 g     F .text	0000004c alt_ic_irq_enabled
02010dd4 g     F .text	0000009c alt_alarm_stop
02015058 g     O .bss	00000004 alt_irq_active
020019a0 g     F .text	00000444 _fseeko_r
0200fe04 g     F .text	00000044 alt_hostfs_close
020000fc g     F .exceptions	000000d4 alt_irq_handler
0201221c g     O .rwdata	00000028 alt_dev_null
02010518 g     F .text	00000020 alt_dcache_flush_all
02007dd8 g     F .text	00000068 __hi0bits
0200e1a0 g     F .text	00000080 .hidden __fixdfsi
020134d4 g       *ABS*	00000000 __ram_rwdata_end
0201346c g     O .rwdata	00000008 alt_dev_list
0200ef20 g     F .text	00000100 write
02011978 g       *ABS*	00000000 __ram_rodata_end
0200e584 g     F .text	000000b8 fstat
0200cf44 g     F .text	000000f4 .hidden __ledf2
020081b8 g     F .text	00000140 __pow5mult
0200939c g     F .text	0000150c ___vfiprintf_internal_r
02015048 g     O .bss	00000004 __nlocale_changed
020009f4 g     F .text	00000058 .hidden __umodsi3
02015190 g       *ABS*	00000000 end
02001de4 g     F .text	0000001c fseeko
02001984 g     F .text	0000001c fseek
0200f254 g     F .text	000000c0 altera_avalon_jtag_uart_init
020001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0201143c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0200e3a4 g     F .text	00000064 .hidden __clzsi2
0200f934 g     F .text	00000224 altera_avalon_jtag_uart_write
02001190 g     F .text	00000004 __sfp_lock_acquire
0200787c g     F .text	000000e4 memchr
0200330c g     F .text	000022dc ___vfprintf_internal_r
02001670 g     F .text	00000310 _free_r
020077c8 g     F .text	00000010 __locale_mb_cur_max
02011218 g     F .text	00000180 __call_exitprocs
02015044 g     O .bss	00000004 __mlocale_changed
02013454 g     O .rwdata	00000004 __malloc_sbrk_base
02000230 g     F .text	0000003c _start
0201505c g     O .bss	00000004 _alt_tick_rate
02011398 g     F .text	00000070 .hidden __floatundidf
020082f8 g     F .text	00000148 __lshift
02015060 g     O .bss	00000004 _alt_nticks
0200ecac g     F .text	00000104 read
0200f08c g     F .text	00000064 alt_sys_init
02002d54 g     F .text	00000060 _open_r
02011100 g     F .text	00000118 __register_exitproc
02007f2c g     F .text	0000028c __multiply
0200f5c0 g     F .text	00000068 altera_avalon_jtag_uart_close
02000a4c g     F .text	00000028 .hidden __mulsi3
02011978 g       *ABS*	00000000 __ram_rwdata_start
0201143c g       *ABS*	00000000 __ram_rodata_start
02015068 g     O .bss	00000028 __malloc_current_mallinfo
0200880c g     F .text	0000014c __d2b
0200f0f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
020108f0 g     F .text	000000c4 alt_get_fd
02005874 g     F .text	00000054 _close_r
0200fb58 g     F .text	000000bc perf_get_section_time
02011084 g     F .text	0000007c memcmp
0200f1b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
02015190 g       *ABS*	00000000 __alt_stack_base
0200f200 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
02001fe4 g     F .text	000000dc _fwrite_r
02005720 g     F .text	00000154 __swsetup_r
0200c410 g     F .text	000009d0 .hidden __divdf3
02001050 g     F .text	00000118 __sfp
02008a70 g     F .text	00000078 __copybits
0200fc14 g     F .text	0000004c perf_get_total_time
02011d9c g     O .rwdata	00000408 __malloc_av_
0200119c g     F .text	00000004 __sinit_lock_release
0200d038 g     F .text	0000086c .hidden __muldf3
02003138 g     F .text	00000054 __sread
02001518 g     F .text	00000034 fread
02010768 g     F .text	00000108 alt_find_file
02010574 g     F .text	000000a4 alt_dev_llist_insert
0200e9a4 g     F .text	00000024 __malloc_lock
0200ee34 g     F .text	000000b0 sbrk
02000d94 g     F .text	0000005c _fflush_r
0200a980 g     F .text	000000dc _calloc_r
020012c4 g     F .text	00000018 fopen
02015030 g       *ABS*	00000000 __bss_start
02002c2c g     F .text	00000128 memset
0200026c g     F .text	0000062c main
02015054 g     O .bss	00000004 alt_envp
02015034 g     O .bss	00000004 __malloc_max_total_mem
0200f150 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200ada4 g     F .text	00000018 __swbuf
020012dc g     F .text	0000023c _fread_r
0200326c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02000b64 g     F .text	00000014 fclose
02005af0 g     F .text	00001688 _dtoa_r
020022d8 g     F .text	0000080c _malloc_r
0200af18 g     F .text	00000030 __ascii_wctomb
02013478 g     O .rwdata	00000004 alt_errno
02001e5c g     F .text	000000c4 _fwalk
02000898 g     F .text	00000084 .hidden __divsi3
0200154c g     F .text	00000124 _malloc_trim_r
0201143c g       *ABS*	00000000 __CTOR_END__
020091ac g     F .text	000000dc strcmp
0201143c g       *ABS*	00000000 __flash_rodata_start
0201143c g       *ABS*	00000000 __DTOR_LIST__
0200cde0 g     F .text	00000088 .hidden __nedf2
0200f054 g     F .text	00000038 alt_irq_init
0200edb0 g     F .text	00000084 alt_release_fd
02011738 g     O .rodata	00000100 .hidden __clz_tab
02015040 g     O .bss	00000004 _PathLocale
02011038 g     F .text	00000014 atexit
020056c0 g     F .text	00000060 _write_r
020077f8 g     F .text	00000018 setlocale
02013450 g     O .rwdata	00000004 _impure_ptr
0201504c g     O .bss	00000004 alt_argc
02000b78 g     F .text	0000021c __sflush_r
02010678 g     F .text	00000060 _do_dtors
020077e4 g     F .text	00000008 __locale_cjk_lang
02001980 g     F .text	00000004 _fseek_r
02002f10 g     F .text	000001d4 __srefill_r
02000020 g       .exceptions	00000000 alt_irq_entry
0200869c g     F .text	00000064 __ulp
020011b8 g     F .text	00000018 __fp_unlock_all
02013464 g     O .rwdata	00000008 alt_fs_list
0200feb4 g     F .text	0000006c alt_hostfs_write
02000020 g       *ABS*	00000000 __ram_exceptions_start
02007810 g     F .text	0000000c localeconv
020109d4 g     F .text	00000050 alt_ic_isr_register
020020c0 g     F .text	00000034 fwrite
020134d4 g       *ABS*	00000000 _edata
02015190 g       *ABS*	00000000 _end
0200aa5c g     F .text	00000164 __fputwc
02000230 g       *ABS*	00000000 __ram_exceptions_end
0200f628 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
02010aac g     F .text	0000008c alt_ic_irq_disable
02003194 g     F .text	0000007c __swrite
02013458 g     O .rwdata	00000004 __malloc_trim_threshold
0200fca0 g     F .text	00000024 alt_get_performance_counter_base
020077d8 g     F .text	0000000c __locale_msgcharset
0201104c g     F .text	00000038 exit
02001f20 g     F .text	000000c4 _fwalk_reent
020084a0 g     F .text	000001fc __mdiff
0200091c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02001194 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
020011d0 g     F .text	000000f4 _fopen_r
02011408 g     F .text	00000034 _exit
020103ec g     F .text	0000012c alt_alarm_start
020020f4 g     F .text	000001bc __smakebuf_r
02003274 g     F .text	00000098 strlen
0200eb14 g     F .text	0000015c open
0200ce68 g     F .text	000000dc .hidden __gedf2
02013460 g     O .rwdata	00000004 __wctomb
02009384 g     F .text	00000018 __sprint_r
020109b4 g     F .text	00000020 alt_icache_flush_all
020134c8 g     O .rwdata	00000004 alt_priority_mask
02010a24 g     F .text	00000088 alt_ic_irq_enable
020055e8 g     F .text	0000001c __vfprintf_internal
0200af48 g     F .text	0000005c _wctomb_r
0200d8a4 g     F .text	000008fc .hidden __subdf3
02007e40 g     F .text	000000b0 __lo0bits
020134cc g     O .rwdata	00000008 alt_alarm_list
02010618 g     F .text	00000060 _do_ctors
0200ae58 g     F .text	000000c0 wcrtomb
0200e444 g     F .text	000000d8 close
0200e78c g     F .text	00000084 alt_load
0200abe4 g     F .text	00000080 fputwc
020022c4 g     F .text	00000014 free
02001198 g     F .text	00000004 __sinit_lock_acquire
02007b8c g     F .text	00000148 __multadd
02007b64 g     F .text	00000028 _Bfree
0200ff88 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000fc0 	call	20000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000706 	br	20000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 200008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 2000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 2000098:	20001d00 	call	20001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 200009c:	1000021e 	bne	r2,zero,20000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 20000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 20000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 20000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 20000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000f8:	ef80083a 	eret

020000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000fc:	defff904 	addi	sp,sp,-28
 2000100:	dfc00615 	stw	ra,24(sp)
 2000104:	df000515 	stw	fp,20(sp)
 2000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 200010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000110:	0005313a 	rdctl	r2,ipending
 2000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000124:	00800044 	movi	r2,1
 2000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200012c:	e0fffb17 	ldw	r3,-20(fp)
 2000130:	e0bffc17 	ldw	r2,-16(fp)
 2000134:	1884703a 	and	r2,r3,r2
 2000138:	10001426 	beq	r2,zero,200018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200013c:	00808074 	movhi	r2,513
 2000140:	10942404 	addi	r2,r2,20624
 2000144:	e0fffd17 	ldw	r3,-12(fp)
 2000148:	180690fa 	slli	r3,r3,3
 200014c:	10c5883a 	add	r2,r2,r3
 2000150:	10c00017 	ldw	r3,0(r2)
 2000154:	00808074 	movhi	r2,513
 2000158:	10942404 	addi	r2,r2,20624
 200015c:	e13ffd17 	ldw	r4,-12(fp)
 2000160:	200890fa 	slli	r4,r4,3
 2000164:	1105883a 	add	r2,r2,r4
 2000168:	10800104 	addi	r2,r2,4
 200016c:	10800017 	ldw	r2,0(r2)
 2000170:	1009883a 	mov	r4,r2
 2000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200017c:	0005313a 	rdctl	r2,ipending
 2000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000184:	e0bfff17 	ldw	r2,-4(fp)
 2000188:	00000706 	br	20001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 200018c:	e0bffc17 	ldw	r2,-16(fp)
 2000190:	1085883a 	add	r2,r2,r2
 2000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000198:	e0bffd17 	ldw	r2,-12(fp)
 200019c:	10800044 	addi	r2,r2,1
 20001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a4:	003fe106 	br	200012c <__alt_data_end+0xfe00012c>

    active = alt_irq_pending ();
 20001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 20001ac:	e0bffb17 	ldw	r2,-20(fp)
 20001b0:	103fdb1e 	bne	r2,zero,2000120 <__alt_data_end+0xfe000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 20001b4:	0001883a 	nop
}
 20001b8:	0001883a 	nop
 20001bc:	e037883a 	mov	sp,fp
 20001c0:	dfc00117 	ldw	ra,4(sp)
 20001c4:	df000017 	ldw	fp,0(sp)
 20001c8:	dec00204 	addi	sp,sp,8
 20001cc:	f800283a 	ret

020001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 20001d0:	defffb04 	addi	sp,sp,-20
 20001d4:	dfc00415 	stw	ra,16(sp)
 20001d8:	df000315 	stw	fp,12(sp)
 20001dc:	df000304 	addi	fp,sp,12
 20001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 20001e4:	00bfffc4 	movi	r2,-1
 20001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 20001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 20001f0:	d0a70617 	ldw	r2,-25576(gp)
 20001f4:	10000726 	beq	r2,zero,2000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20001f8:	d0a70617 	ldw	r2,-25576(gp)
 20001fc:	e0fffd17 	ldw	r3,-12(fp)
 2000200:	e1bffe17 	ldw	r6,-8(fp)
 2000204:	e17fff17 	ldw	r5,-4(fp)
 2000208:	1809883a 	mov	r4,r3
 200020c:	103ee83a 	callr	r2
 2000210:	00000206 	br	200021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 2000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 2000218:	0005883a 	mov	r2,zero
}
 200021c:	e037883a 	mov	sp,fp
 2000220:	dfc00117 	ldw	ra,4(sp)
 2000224:	df000017 	ldw	fp,0(sp)
 2000228:	dec00204 	addi	sp,sp,8
 200022c:	f800283a 	ret

Disassembly of section .text:

02000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000230:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 2000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000238:	06808074 	movhi	gp,513
    ori gp, gp, %lo(_gp)
 200023c:	d6ad1314 	ori	gp,gp,46156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000240:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 2000244:	10940c14 	ori	r2,r2,20528

    movhi r3, %hi(__bss_end)
 2000248:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 200024c:	18d46414 	ori	r3,r3,20880

    beq r2, r3, 1f
 2000250:	10c00326 	beq	r2,r3,2000260 <_start+0x30>

0:
    stw zero, (r2)
 2000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200025c:	10fffd36 	bltu	r2,r3,2000254 <__alt_data_end+0xfe000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000260:	200e78c0 	call	200e78c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000264:	200e9280 	call	200e928 <alt_main>

02000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000268:	003fff06 	br	2000268 <__alt_data_end+0xfe000268>

0200026c <main>:
#include <stdlib.h>
#include <altera_avalon_performance_counter.h>
#include <system.h>

int main()
{
 200026c:	defded04 	addi	sp,sp,-2124
 2000270:	dfc21215 	stw	ra,2120(sp)
 2000274:	df021115 	stw	fp,2116(sp)
 2000278:	dc021015 	stw	r16,2112(sp)
 200027c:	df021104 	addi	fp,sp,2116
	unsigned int width;
	unsigned int height;

	unsigned int tl_x, tl_y, br_x, br_y, roi_width, roi_height, roi_area;

	unsigned int hist[256] = {0};
 2000280:	e0bdff04 	addi	r2,fp,-2052
 2000284:	00c10004 	movi	r3,1024
 2000288:	180d883a 	mov	r6,r3
 200028c:	000b883a 	mov	r5,zero
 2000290:	1009883a 	mov	r4,r2
 2000294:	2002c2c0 	call	2002c2c <memset>
	unsigned int cummhist[256] = {0};
 2000298:	e0beff04 	addi	r2,fp,-1028
 200029c:	00c10004 	movi	r3,1024
 20002a0:	180d883a 	mov	r6,r3
 20002a4:	000b883a 	mov	r5,zero
 20002a8:	1009883a 	mov	r4,r2
 20002ac:	2002c2c0 	call	2002c2c <memset>

	/*Coordinates of top-left and bottom-right corner of the target block*/
	tl_x = 0; br_x = 63;
 20002b0:	e03df315 	stw	zero,-2100(fp)
 20002b4:	00800fc4 	movi	r2,63
 20002b8:	e0bdf415 	stw	r2,-2096(fp)
	tl_y = 0; br_y = 63;
 20002bc:	e03df515 	stw	zero,-2092(fp)
 20002c0:	00800fc4 	movi	r2,63
 20002c4:	e0bdf615 	stw	r2,-2088(fp)

	/*Width and height of the target block*/
	roi_height = br_x - tl_x + 1;
 20002c8:	e0fdf417 	ldw	r3,-2096(fp)
 20002cc:	e0bdf317 	ldw	r2,-2100(fp)
 20002d0:	1885c83a 	sub	r2,r3,r2
 20002d4:	10800044 	addi	r2,r2,1
 20002d8:	e0bdf715 	stw	r2,-2084(fp)
	roi_width = br_y - tl_y + 1;
 20002dc:	e0fdf617 	ldw	r3,-2088(fp)
 20002e0:	e0bdf517 	ldw	r2,-2092(fp)
 20002e4:	1885c83a 	sub	r2,r3,r2
 20002e8:	10800044 	addi	r2,r2,1
 20002ec:	e0bdf815 	stw	r2,-2080(fp)
	roi_area = roi_height * roi_width;
 20002f0:	e17df817 	ldw	r5,-2080(fp)
 20002f4:	e13df717 	ldw	r4,-2084(fp)
 20002f8:	2000a4c0 	call	2000a4c <__mulsi3>
 20002fc:	e0bdf915 	stw	r2,-2076(fp)

	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 2000300:	00c00044 	movi	r3,1
 2000304:	00810034 	movhi	r2,1024
 2000308:	10840004 	addi	r2,r2,4096
 200030c:	10c00035 	stwio	r3,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 2000310:	0007883a 	mov	r3,zero
 2000314:	00810034 	movhi	r2,1024
 2000318:	10840104 	addi	r2,r2,4100
 200031c:	10c00035 	stwio	r3,0(r2)

	printf("Hello from Nios II!\n");
 2000320:	01008074 	movhi	r4,513
 2000324:	21050f04 	addi	r4,r4,5180
 2000328:	2002ee00 	call	2002ee0 <puts>

	printf ("Region of interest width: %d roi_height: %d, area: %d\n", roi_width, roi_height, roi_area);
 200032c:	e1fdf917 	ldw	r7,-2076(fp)
 2000330:	e1bdf717 	ldw	r6,-2084(fp)
 2000334:	e17df817 	ldw	r5,-2080(fp)
 2000338:	01008074 	movhi	r4,513
 200033c:	21051404 	addi	r4,r4,5200
 2000340:	2002de40 	call	2002de4 <printf>

	fp = fopen("/mnt/host/low_contrast64.bin", "rb");
 2000344:	01408074 	movhi	r5,513
 2000348:	29452204 	addi	r5,r5,5256
 200034c:	01008074 	movhi	r4,513
 2000350:	21052304 	addi	r4,r4,5260
 2000354:	20012c40 	call	20012c4 <fopen>
 2000358:	e0bdfa15 	stw	r2,-2072(fp)

	fread(&width, sizeof(width), 1, fp);
 200035c:	e0bdfd04 	addi	r2,fp,-2060
 2000360:	e1fdfa17 	ldw	r7,-2072(fp)
 2000364:	01800044 	movi	r6,1
 2000368:	01400104 	movi	r5,4
 200036c:	1009883a 	mov	r4,r2
 2000370:	20015180 	call	2001518 <fread>
	fread(&height, sizeof(height), 1, fp);
 2000374:	e0bdfe04 	addi	r2,fp,-2056
 2000378:	e1fdfa17 	ldw	r7,-2072(fp)
 200037c:	01800044 	movi	r6,1
 2000380:	01400104 	movi	r5,4
 2000384:	1009883a 	mov	r4,r2
 2000388:	20015180 	call	2001518 <fread>
	printf("Image width: %d heigth: %d\n", width, height);
 200038c:	e0bdfd17 	ldw	r2,-2060(fp)
 2000390:	e0fdfe17 	ldw	r3,-2056(fp)
 2000394:	180d883a 	mov	r6,r3
 2000398:	100b883a 	mov	r5,r2
 200039c:	01008074 	movhi	r4,513
 20003a0:	21052b04 	addi	r4,r4,5292
 20003a4:	2002de40 	call	2002de4 <printf>
//	if(tl_x < 0 || tl_y < 0)
//		printf("Invalid top left coordinate for region of interest\n")
//	if(br_x < 0 || br_y < 0)
//			printf("Invalid top left coordinate for region of interest\n")

	input_image = (unsigned char*) malloc(width*height);
 20003a8:	e0bdfd17 	ldw	r2,-2060(fp)
 20003ac:	e0fdfe17 	ldw	r3,-2056(fp)
 20003b0:	180b883a 	mov	r5,r3
 20003b4:	1009883a 	mov	r4,r2
 20003b8:	2000a4c0 	call	2000a4c <__mulsi3>
 20003bc:	1009883a 	mov	r4,r2
 20003c0:	20022b00 	call	20022b0 <malloc>
 20003c4:	e0bdfb15 	stw	r2,-2068(fp)
	output_image = (unsigned char*) malloc(width*height);
 20003c8:	e0bdfd17 	ldw	r2,-2060(fp)
 20003cc:	e0fdfe17 	ldw	r3,-2056(fp)
 20003d0:	180b883a 	mov	r5,r3
 20003d4:	1009883a 	mov	r4,r2
 20003d8:	2000a4c0 	call	2000a4c <__mulsi3>
 20003dc:	1009883a 	mov	r4,r2
 20003e0:	20022b00 	call	20022b0 <malloc>
 20003e4:	e0bdfc15 	stw	r2,-2064(fp)

	fread(input_image, 1, width*height, fp);
 20003e8:	e0bdfd17 	ldw	r2,-2060(fp)
 20003ec:	e0fdfe17 	ldw	r3,-2056(fp)
 20003f0:	180b883a 	mov	r5,r3
 20003f4:	1009883a 	mov	r4,r2
 20003f8:	2000a4c0 	call	2000a4c <__mulsi3>
 20003fc:	e1fdfa17 	ldw	r7,-2072(fp)
 2000400:	100d883a 	mov	r6,r2
 2000404:	01400044 	movi	r5,1
 2000408:	e13dfb17 	ldw	r4,-2068(fp)
 200040c:	20015180 	call	2001518 <fread>
	fclose(fp);
 2000410:	e13dfa17 	ldw	r4,-2072(fp)
 2000414:	2000b640 	call	2000b64 <fclose>

    printf("\nReading input done\n");
 2000418:	01008074 	movhi	r4,513
 200041c:	21053204 	addi	r4,r4,5320
 2000420:	2002ee00 	call	2002ee0 <puts>

	/* Histogram */

	//Measure time it takes for histogram to be calculated
    PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,1);
 2000424:	0007883a 	mov	r3,zero
 2000428:	00810034 	movhi	r2,1024
 200042c:	10840504 	addi	r2,r2,4116
 2000430:	10c00035 	stwio	r3,0(r2)

	/*Histogram calculation loop*/
	for (i = 0; i< height; i++)
 2000434:	e03df115 	stw	zero,-2108(fp)
 2000438:	00003006 	br	20004fc <main+0x290>
	{
		for (j = 0; j< width; j++)
 200043c:	e03df215 	stw	zero,-2104(fp)
 2000440:	00002806 	br	20004e4 <main+0x278>
		{
			/*Calculate histogram if it is in the target block*/
			if (i>= tl_x && i < br_x && j >= tl_y && j < br_y )
 2000444:	e0fdf117 	ldw	r3,-2108(fp)
 2000448:	e0bdf317 	ldw	r2,-2100(fp)
 200044c:	18802236 	bltu	r3,r2,20004d8 <main+0x26c>
 2000450:	e0fdf117 	ldw	r3,-2108(fp)
 2000454:	e0bdf417 	ldw	r2,-2096(fp)
 2000458:	18801f2e 	bgeu	r3,r2,20004d8 <main+0x26c>
 200045c:	e0fdf217 	ldw	r3,-2104(fp)
 2000460:	e0bdf517 	ldw	r2,-2092(fp)
 2000464:	18801c36 	bltu	r3,r2,20004d8 <main+0x26c>
 2000468:	e0fdf217 	ldw	r3,-2104(fp)
 200046c:	e0bdf617 	ldw	r2,-2088(fp)
 2000470:	1880192e 	bgeu	r3,r2,20004d8 <main+0x26c>
				hist[(int)input_image[i*width + j]]++;
 2000474:	e0bdf117 	ldw	r2,-2108(fp)
 2000478:	e0fdfd17 	ldw	r3,-2060(fp)
 200047c:	180b883a 	mov	r5,r3
 2000480:	1009883a 	mov	r4,r2
 2000484:	2000a4c0 	call	2000a4c <__mulsi3>
 2000488:	1007883a 	mov	r3,r2
 200048c:	e0bdf217 	ldw	r2,-2104(fp)
 2000490:	1885883a 	add	r2,r3,r2
 2000494:	e0fdfb17 	ldw	r3,-2068(fp)
 2000498:	1885883a 	add	r2,r3,r2
 200049c:	10800003 	ldbu	r2,0(r2)
 20004a0:	10803fcc 	andi	r2,r2,255
 20004a4:	1087883a 	add	r3,r2,r2
 20004a8:	18c7883a 	add	r3,r3,r3
 20004ac:	e13df104 	addi	r4,fp,-2108
 20004b0:	20c7883a 	add	r3,r4,r3
 20004b4:	18c00e04 	addi	r3,r3,56
 20004b8:	18c00017 	ldw	r3,0(r3)
 20004bc:	18c00044 	addi	r3,r3,1
 20004c0:	1085883a 	add	r2,r2,r2
 20004c4:	1085883a 	add	r2,r2,r2
 20004c8:	e13df104 	addi	r4,fp,-2108
 20004cc:	2085883a 	add	r2,r4,r2
 20004d0:	10800e04 	addi	r2,r2,56
 20004d4:	10c00015 	stw	r3,0(r2)
    PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,1);

	/*Histogram calculation loop*/
	for (i = 0; i< height; i++)
	{
		for (j = 0; j< width; j++)
 20004d8:	e0bdf217 	ldw	r2,-2104(fp)
 20004dc:	10800044 	addi	r2,r2,1
 20004e0:	e0bdf215 	stw	r2,-2104(fp)
 20004e4:	e0fdf217 	ldw	r3,-2104(fp)
 20004e8:	e0bdfd17 	ldw	r2,-2060(fp)
 20004ec:	18bfd536 	bltu	r3,r2,2000444 <__alt_data_end+0xfe000444>

	//Measure time it takes for histogram to be calculated
    PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,1);

	/*Histogram calculation loop*/
	for (i = 0; i< height; i++)
 20004f0:	e0bdf117 	ldw	r2,-2108(fp)
 20004f4:	10800044 	addi	r2,r2,1
 20004f8:	e0bdf115 	stw	r2,-2108(fp)
 20004fc:	e0fdf117 	ldw	r3,-2108(fp)
 2000500:	e0bdfe17 	ldw	r2,-2056(fp)
 2000504:	18bfcd36 	bltu	r3,r2,200043c <__alt_data_end+0xfe00043c>
			if (i>= tl_x && i < br_x && j >= tl_y && j < br_y )
				hist[(int)input_image[i*width + j]]++;
		}
	}
	//Stop timer for calculation of histogram
	PERF_END(PERFORMANCE_COUNTER_0_BASE,1);
 2000508:	0007883a 	mov	r3,zero
 200050c:	00810034 	movhi	r2,1024
 2000510:	10840404 	addi	r2,r2,4112
 2000514:	10c00035 	stwio	r3,0(r2)

	/* Cumulative histogram */

	//Measure time it takes for cumulative histogram to be calculated
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,2);
 2000518:	0007883a 	mov	r3,zero
 200051c:	00810034 	movhi	r2,1024
 2000520:	10840904 	addi	r2,r2,4132
 2000524:	10c00035 	stwio	r3,0(r2)

	/*Cumulative histogram calculation loop*/
	cummhist[0] = hist[0];
 2000528:	e0bdff17 	ldw	r2,-2052(fp)
 200052c:	e0beff15 	stw	r2,-1028(fp)
	for (i = 1; i< 256; i++)
 2000530:	00800044 	movi	r2,1
 2000534:	e0bdf115 	stw	r2,-2108(fp)
 2000538:	00001a06 	br	20005a4 <main+0x338>
	{
		cummhist[i] = hist[i] + cummhist[i-1];
 200053c:	e0bdf117 	ldw	r2,-2108(fp)
 2000540:	1085883a 	add	r2,r2,r2
 2000544:	1085883a 	add	r2,r2,r2
 2000548:	e0fdf104 	addi	r3,fp,-2108
 200054c:	1885883a 	add	r2,r3,r2
 2000550:	10800e04 	addi	r2,r2,56
 2000554:	10c00017 	ldw	r3,0(r2)
 2000558:	e0bdf117 	ldw	r2,-2108(fp)
 200055c:	10bfffc4 	addi	r2,r2,-1
 2000560:	1085883a 	add	r2,r2,r2
 2000564:	1085883a 	add	r2,r2,r2
 2000568:	e13df104 	addi	r4,fp,-2108
 200056c:	2085883a 	add	r2,r4,r2
 2000570:	10810e04 	addi	r2,r2,1080
 2000574:	10800017 	ldw	r2,0(r2)
 2000578:	1887883a 	add	r3,r3,r2
 200057c:	e0bdf117 	ldw	r2,-2108(fp)
 2000580:	1085883a 	add	r2,r2,r2
 2000584:	1085883a 	add	r2,r2,r2
 2000588:	e13df104 	addi	r4,fp,-2108
 200058c:	2085883a 	add	r2,r4,r2
 2000590:	10810e04 	addi	r2,r2,1080
 2000594:	10c00015 	stw	r3,0(r2)
	//Measure time it takes for cumulative histogram to be calculated
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,2);

	/*Cumulative histogram calculation loop*/
	cummhist[0] = hist[0];
	for (i = 1; i< 256; i++)
 2000598:	e0bdf117 	ldw	r2,-2108(fp)
 200059c:	10800044 	addi	r2,r2,1
 20005a0:	e0bdf115 	stw	r2,-2108(fp)
 20005a4:	e0bdf117 	ldw	r2,-2108(fp)
 20005a8:	10804010 	cmplti	r2,r2,256
 20005ac:	103fe31e 	bne	r2,zero,200053c <__alt_data_end+0xfe00053c>
	{
		cummhist[i] = hist[i] + cummhist[i-1];
	}
	for (i = 0; i< 256; i++)
 20005b0:	e03df115 	stw	zero,-2108(fp)
 20005b4:	00001806 	br	2000618 <main+0x3ac>
	{
		cummhist[i] = (255 * cummhist[i]) / roi_area;
 20005b8:	e0bdf117 	ldw	r2,-2108(fp)
 20005bc:	1085883a 	add	r2,r2,r2
 20005c0:	1085883a 	add	r2,r2,r2
 20005c4:	e0fdf104 	addi	r3,fp,-2108
 20005c8:	1885883a 	add	r2,r3,r2
 20005cc:	10810e04 	addi	r2,r2,1080
 20005d0:	10800017 	ldw	r2,0(r2)
 20005d4:	01403fc4 	movi	r5,255
 20005d8:	1009883a 	mov	r4,r2
 20005dc:	2000a4c0 	call	2000a4c <__mulsi3>
 20005e0:	e17df917 	ldw	r5,-2076(fp)
 20005e4:	1009883a 	mov	r4,r2
 20005e8:	20009900 	call	2000990 <__udivsi3>
 20005ec:	1007883a 	mov	r3,r2
 20005f0:	e0bdf117 	ldw	r2,-2108(fp)
 20005f4:	1085883a 	add	r2,r2,r2
 20005f8:	1085883a 	add	r2,r2,r2
 20005fc:	e13df104 	addi	r4,fp,-2108
 2000600:	2085883a 	add	r2,r4,r2
 2000604:	10810e04 	addi	r2,r2,1080
 2000608:	10c00015 	stw	r3,0(r2)
	cummhist[0] = hist[0];
	for (i = 1; i< 256; i++)
	{
		cummhist[i] = hist[i] + cummhist[i-1];
	}
	for (i = 0; i< 256; i++)
 200060c:	e0bdf117 	ldw	r2,-2108(fp)
 2000610:	10800044 	addi	r2,r2,1
 2000614:	e0bdf115 	stw	r2,-2108(fp)
 2000618:	e0bdf117 	ldw	r2,-2108(fp)
 200061c:	10804010 	cmplti	r2,r2,256
 2000620:	103fe51e 	bne	r2,zero,20005b8 <__alt_data_end+0xfe0005b8>
	{
		cummhist[i] = (255 * cummhist[i]) / roi_area;
	}
	//Stop timer for calculation of cumulative histogram
	PERF_END(PERFORMANCE_COUNTER_0_BASE,2);
 2000624:	0007883a 	mov	r3,zero
 2000628:	00810034 	movhi	r2,1024
 200062c:	10840804 	addi	r2,r2,4128
 2000630:	10c00035 	stwio	r3,0(r2)

	/* Image processing */

	//Measure time it takes for image processing to be done
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,3);
 2000634:	0007883a 	mov	r3,zero
 2000638:	00810034 	movhi	r2,1024
 200063c:	10840d04 	addi	r2,r2,4148
 2000640:	10c00035 	stwio	r3,0(r2)

	/*Image processing loop*/
	for (i = 0; i< height; i++)
 2000644:	e03df115 	stw	zero,-2108(fp)
 2000648:	00004b06 	br	2000778 <main+0x50c>
	{
		for (j = 0; j< width; j++)
 200064c:	e03df215 	stw	zero,-2104(fp)
 2000650:	00004306 	br	2000760 <main+0x4f4>
		{
			if (i>= tl_x && i < br_x && j >= tl_y && j < br_y )
 2000654:	e0fdf117 	ldw	r3,-2108(fp)
 2000658:	e0bdf317 	ldw	r2,-2100(fp)
 200065c:	18802736 	bltu	r3,r2,20006fc <main+0x490>
 2000660:	e0fdf117 	ldw	r3,-2108(fp)
 2000664:	e0bdf417 	ldw	r2,-2096(fp)
 2000668:	1880242e 	bgeu	r3,r2,20006fc <main+0x490>
 200066c:	e0fdf217 	ldw	r3,-2104(fp)
 2000670:	e0bdf517 	ldw	r2,-2092(fp)
 2000674:	18802136 	bltu	r3,r2,20006fc <main+0x490>
 2000678:	e0fdf217 	ldw	r3,-2104(fp)
 200067c:	e0bdf617 	ldw	r2,-2088(fp)
 2000680:	18801e2e 	bgeu	r3,r2,20006fc <main+0x490>
				output_image[i*width + j] = (unsigned char)cummhist[input_image[i*width + j]];
 2000684:	e0bdf117 	ldw	r2,-2108(fp)
 2000688:	e0fdfd17 	ldw	r3,-2060(fp)
 200068c:	180b883a 	mov	r5,r3
 2000690:	1009883a 	mov	r4,r2
 2000694:	2000a4c0 	call	2000a4c <__mulsi3>
 2000698:	1007883a 	mov	r3,r2
 200069c:	e0bdf217 	ldw	r2,-2104(fp)
 20006a0:	1885883a 	add	r2,r3,r2
 20006a4:	e0fdfc17 	ldw	r3,-2064(fp)
 20006a8:	18a1883a 	add	r16,r3,r2
 20006ac:	e0bdf117 	ldw	r2,-2108(fp)
 20006b0:	e0fdfd17 	ldw	r3,-2060(fp)
 20006b4:	180b883a 	mov	r5,r3
 20006b8:	1009883a 	mov	r4,r2
 20006bc:	2000a4c0 	call	2000a4c <__mulsi3>
 20006c0:	1007883a 	mov	r3,r2
 20006c4:	e0bdf217 	ldw	r2,-2104(fp)
 20006c8:	1885883a 	add	r2,r3,r2
 20006cc:	e0fdfb17 	ldw	r3,-2068(fp)
 20006d0:	1885883a 	add	r2,r3,r2
 20006d4:	10800003 	ldbu	r2,0(r2)
 20006d8:	10803fcc 	andi	r2,r2,255
 20006dc:	1085883a 	add	r2,r2,r2
 20006e0:	1085883a 	add	r2,r2,r2
 20006e4:	e0fdf104 	addi	r3,fp,-2108
 20006e8:	1885883a 	add	r2,r3,r2
 20006ec:	10810e04 	addi	r2,r2,1080
 20006f0:	10800017 	ldw	r2,0(r2)
 20006f4:	80800005 	stb	r2,0(r16)
 20006f8:	00001606 	br	2000754 <main+0x4e8>
			else
				output_image[i*width + j] = input_image[i*width + j];
 20006fc:	e0bdf117 	ldw	r2,-2108(fp)
 2000700:	e0fdfd17 	ldw	r3,-2060(fp)
 2000704:	180b883a 	mov	r5,r3
 2000708:	1009883a 	mov	r4,r2
 200070c:	2000a4c0 	call	2000a4c <__mulsi3>
 2000710:	1007883a 	mov	r3,r2
 2000714:	e0bdf217 	ldw	r2,-2104(fp)
 2000718:	1885883a 	add	r2,r3,r2
 200071c:	e0fdfc17 	ldw	r3,-2064(fp)
 2000720:	18a1883a 	add	r16,r3,r2
 2000724:	e0bdf117 	ldw	r2,-2108(fp)
 2000728:	e0fdfd17 	ldw	r3,-2060(fp)
 200072c:	180b883a 	mov	r5,r3
 2000730:	1009883a 	mov	r4,r2
 2000734:	2000a4c0 	call	2000a4c <__mulsi3>
 2000738:	1007883a 	mov	r3,r2
 200073c:	e0bdf217 	ldw	r2,-2104(fp)
 2000740:	1885883a 	add	r2,r3,r2
 2000744:	e0fdfb17 	ldw	r3,-2068(fp)
 2000748:	1885883a 	add	r2,r3,r2
 200074c:	10800003 	ldbu	r2,0(r2)
 2000750:	80800005 	stb	r2,0(r16)
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,3);

	/*Image processing loop*/
	for (i = 0; i< height; i++)
	{
		for (j = 0; j< width; j++)
 2000754:	e0bdf217 	ldw	r2,-2104(fp)
 2000758:	10800044 	addi	r2,r2,1
 200075c:	e0bdf215 	stw	r2,-2104(fp)
 2000760:	e0fdf217 	ldw	r3,-2104(fp)
 2000764:	e0bdfd17 	ldw	r2,-2060(fp)
 2000768:	18bfba36 	bltu	r3,r2,2000654 <__alt_data_end+0xfe000654>

	//Measure time it takes for image processing to be done
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE,3);

	/*Image processing loop*/
	for (i = 0; i< height; i++)
 200076c:	e0bdf117 	ldw	r2,-2108(fp)
 2000770:	10800044 	addi	r2,r2,1
 2000774:	e0bdf115 	stw	r2,-2108(fp)
 2000778:	e0fdf117 	ldw	r3,-2108(fp)
 200077c:	e0bdfe17 	ldw	r2,-2056(fp)
 2000780:	18bfb236 	bltu	r3,r2,200064c <__alt_data_end+0xfe00064c>
			else
				output_image[i*width + j] = input_image[i*width + j];
		}
	}
	//Stop timer for image processing
	PERF_END(PERFORMANCE_COUNTER_0_BASE,3);
 2000784:	0007883a 	mov	r3,zero
 2000788:	00810034 	movhi	r2,1024
 200078c:	10840c04 	addi	r2,r2,4144
 2000790:	10c00035 	stwio	r3,0(r2)

	//Print measured times
	perf_print_formatted_report(PERFORMANCE_COUNTER_0_BASE,alt_get_cpu_freq(),3, "histogram", "cumulative_hist", "image_processing");
 2000794:	200fcc40 	call	200fcc4 <alt_get_cpu_freq>
 2000798:	1007883a 	mov	r3,r2
 200079c:	00808074 	movhi	r2,513
 20007a0:	10853a04 	addi	r2,r2,5352
 20007a4:	d8800115 	stw	r2,4(sp)
 20007a8:	00808074 	movhi	r2,513
 20007ac:	10853f04 	addi	r2,r2,5372
 20007b0:	d8800015 	stw	r2,0(sp)
 20007b4:	01c08074 	movhi	r7,513
 20007b8:	39c53704 	addi	r7,r7,5340
 20007bc:	018000c4 	movi	r6,3
 20007c0:	180b883a 	mov	r5,r3
 20007c4:	01010034 	movhi	r4,1024
 20007c8:	21040004 	addi	r4,r4,4096
 20007cc:	201016c0 	call	201016c <perf_print_formatted_report>
	printf("\nProcessing done\n");
 20007d0:	01008074 	movhi	r4,513
 20007d4:	21054304 	addi	r4,r4,5388
 20007d8:	2002ee00 	call	2002ee0 <puts>

	/*Open output file and write result from output buffer to the output file*/
	fp = fopen("/mnt/host/low_contrast64_hist.bin", "wb");
 20007dc:	01408074 	movhi	r5,513
 20007e0:	29454804 	addi	r5,r5,5408
 20007e4:	01008074 	movhi	r4,513
 20007e8:	21054904 	addi	r4,r4,5412
 20007ec:	20012c40 	call	20012c4 <fopen>
 20007f0:	e0bdfa15 	stw	r2,-2072(fp)
	fwrite(&width, sizeof(width), 1, fp);
 20007f4:	e0bdfd04 	addi	r2,fp,-2060
 20007f8:	e1fdfa17 	ldw	r7,-2072(fp)
 20007fc:	01800044 	movi	r6,1
 2000800:	01400104 	movi	r5,4
 2000804:	1009883a 	mov	r4,r2
 2000808:	20020c00 	call	20020c0 <fwrite>
	fwrite(&height, sizeof(height), 1, fp);
 200080c:	e0bdfe04 	addi	r2,fp,-2056
 2000810:	e1fdfa17 	ldw	r7,-2072(fp)
 2000814:	01800044 	movi	r6,1
 2000818:	01400104 	movi	r5,4
 200081c:	1009883a 	mov	r4,r2
 2000820:	20020c00 	call	20020c0 <fwrite>
	fwrite(output_image, 1, width*height, fp);
 2000824:	e0bdfd17 	ldw	r2,-2060(fp)
 2000828:	e0fdfe17 	ldw	r3,-2056(fp)
 200082c:	180b883a 	mov	r5,r3
 2000830:	1009883a 	mov	r4,r2
 2000834:	2000a4c0 	call	2000a4c <__mulsi3>
 2000838:	e1fdfa17 	ldw	r7,-2072(fp)
 200083c:	100d883a 	mov	r6,r2
 2000840:	01400044 	movi	r5,1
 2000844:	e13dfc17 	ldw	r4,-2064(fp)
 2000848:	20020c00 	call	20020c0 <fwrite>
	fclose(fp);
 200084c:	e13dfa17 	ldw	r4,-2072(fp)
 2000850:	2000b640 	call	2000b64 <fclose>

	printf("\nWriting output done\n");
 2000854:	01008074 	movhi	r4,513
 2000858:	21055204 	addi	r4,r4,5448
 200085c:	2002ee00 	call	2002ee0 <puts>

	/*Clean memory*/
	free(input_image);
 2000860:	e13dfb17 	ldw	r4,-2068(fp)
 2000864:	20022c40 	call	20022c4 <free>
	free(output_image);
 2000868:	e13dfc17 	ldw	r4,-2064(fp)
 200086c:	20022c40 	call	20022c4 <free>

	printf("\nFinished\n");
 2000870:	01008074 	movhi	r4,513
 2000874:	21055804 	addi	r4,r4,5472
 2000878:	2002ee00 	call	2002ee0 <puts>

	return 0;
 200087c:	0005883a 	mov	r2,zero
}
 2000880:	e6ffff04 	addi	sp,fp,-4
 2000884:	dfc00217 	ldw	ra,8(sp)
 2000888:	df000117 	ldw	fp,4(sp)
 200088c:	dc000017 	ldw	r16,0(sp)
 2000890:	dec00304 	addi	sp,sp,12
 2000894:	f800283a 	ret

02000898 <__divsi3>:
 2000898:	20001b16 	blt	r4,zero,2000908 <__divsi3+0x70>
 200089c:	000f883a 	mov	r7,zero
 20008a0:	28001616 	blt	r5,zero,20008fc <__divsi3+0x64>
 20008a4:	200d883a 	mov	r6,r4
 20008a8:	29001a2e 	bgeu	r5,r4,2000914 <__divsi3+0x7c>
 20008ac:	00800804 	movi	r2,32
 20008b0:	00c00044 	movi	r3,1
 20008b4:	00000106 	br	20008bc <__divsi3+0x24>
 20008b8:	10000d26 	beq	r2,zero,20008f0 <__divsi3+0x58>
 20008bc:	294b883a 	add	r5,r5,r5
 20008c0:	10bfffc4 	addi	r2,r2,-1
 20008c4:	18c7883a 	add	r3,r3,r3
 20008c8:	293ffb36 	bltu	r5,r4,20008b8 <__alt_data_end+0xfe0008b8>
 20008cc:	0005883a 	mov	r2,zero
 20008d0:	18000726 	beq	r3,zero,20008f0 <__divsi3+0x58>
 20008d4:	0005883a 	mov	r2,zero
 20008d8:	31400236 	bltu	r6,r5,20008e4 <__divsi3+0x4c>
 20008dc:	314dc83a 	sub	r6,r6,r5
 20008e0:	10c4b03a 	or	r2,r2,r3
 20008e4:	1806d07a 	srli	r3,r3,1
 20008e8:	280ad07a 	srli	r5,r5,1
 20008ec:	183ffa1e 	bne	r3,zero,20008d8 <__alt_data_end+0xfe0008d8>
 20008f0:	38000126 	beq	r7,zero,20008f8 <__divsi3+0x60>
 20008f4:	0085c83a 	sub	r2,zero,r2
 20008f8:	f800283a 	ret
 20008fc:	014bc83a 	sub	r5,zero,r5
 2000900:	39c0005c 	xori	r7,r7,1
 2000904:	003fe706 	br	20008a4 <__alt_data_end+0xfe0008a4>
 2000908:	0109c83a 	sub	r4,zero,r4
 200090c:	01c00044 	movi	r7,1
 2000910:	003fe306 	br	20008a0 <__alt_data_end+0xfe0008a0>
 2000914:	00c00044 	movi	r3,1
 2000918:	003fee06 	br	20008d4 <__alt_data_end+0xfe0008d4>

0200091c <__modsi3>:
 200091c:	20001716 	blt	r4,zero,200097c <__modsi3+0x60>
 2000920:	000f883a 	mov	r7,zero
 2000924:	2005883a 	mov	r2,r4
 2000928:	28001216 	blt	r5,zero,2000974 <__modsi3+0x58>
 200092c:	2900162e 	bgeu	r5,r4,2000988 <__modsi3+0x6c>
 2000930:	01800804 	movi	r6,32
 2000934:	00c00044 	movi	r3,1
 2000938:	00000106 	br	2000940 <__modsi3+0x24>
 200093c:	30000a26 	beq	r6,zero,2000968 <__modsi3+0x4c>
 2000940:	294b883a 	add	r5,r5,r5
 2000944:	31bfffc4 	addi	r6,r6,-1
 2000948:	18c7883a 	add	r3,r3,r3
 200094c:	293ffb36 	bltu	r5,r4,200093c <__alt_data_end+0xfe00093c>
 2000950:	18000526 	beq	r3,zero,2000968 <__modsi3+0x4c>
 2000954:	1806d07a 	srli	r3,r3,1
 2000958:	11400136 	bltu	r2,r5,2000960 <__modsi3+0x44>
 200095c:	1145c83a 	sub	r2,r2,r5
 2000960:	280ad07a 	srli	r5,r5,1
 2000964:	183ffb1e 	bne	r3,zero,2000954 <__alt_data_end+0xfe000954>
 2000968:	38000126 	beq	r7,zero,2000970 <__modsi3+0x54>
 200096c:	0085c83a 	sub	r2,zero,r2
 2000970:	f800283a 	ret
 2000974:	014bc83a 	sub	r5,zero,r5
 2000978:	003fec06 	br	200092c <__alt_data_end+0xfe00092c>
 200097c:	0109c83a 	sub	r4,zero,r4
 2000980:	01c00044 	movi	r7,1
 2000984:	003fe706 	br	2000924 <__alt_data_end+0xfe000924>
 2000988:	00c00044 	movi	r3,1
 200098c:	003ff106 	br	2000954 <__alt_data_end+0xfe000954>

02000990 <__udivsi3>:
 2000990:	200d883a 	mov	r6,r4
 2000994:	2900152e 	bgeu	r5,r4,20009ec <__udivsi3+0x5c>
 2000998:	28001416 	blt	r5,zero,20009ec <__udivsi3+0x5c>
 200099c:	00800804 	movi	r2,32
 20009a0:	00c00044 	movi	r3,1
 20009a4:	00000206 	br	20009b0 <__udivsi3+0x20>
 20009a8:	10000e26 	beq	r2,zero,20009e4 <__udivsi3+0x54>
 20009ac:	28000516 	blt	r5,zero,20009c4 <__udivsi3+0x34>
 20009b0:	294b883a 	add	r5,r5,r5
 20009b4:	10bfffc4 	addi	r2,r2,-1
 20009b8:	18c7883a 	add	r3,r3,r3
 20009bc:	293ffa36 	bltu	r5,r4,20009a8 <__alt_data_end+0xfe0009a8>
 20009c0:	18000826 	beq	r3,zero,20009e4 <__udivsi3+0x54>
 20009c4:	0005883a 	mov	r2,zero
 20009c8:	31400236 	bltu	r6,r5,20009d4 <__udivsi3+0x44>
 20009cc:	314dc83a 	sub	r6,r6,r5
 20009d0:	10c4b03a 	or	r2,r2,r3
 20009d4:	1806d07a 	srli	r3,r3,1
 20009d8:	280ad07a 	srli	r5,r5,1
 20009dc:	183ffa1e 	bne	r3,zero,20009c8 <__alt_data_end+0xfe0009c8>
 20009e0:	f800283a 	ret
 20009e4:	0005883a 	mov	r2,zero
 20009e8:	f800283a 	ret
 20009ec:	00c00044 	movi	r3,1
 20009f0:	003ff406 	br	20009c4 <__alt_data_end+0xfe0009c4>

020009f4 <__umodsi3>:
 20009f4:	2005883a 	mov	r2,r4
 20009f8:	2900122e 	bgeu	r5,r4,2000a44 <__umodsi3+0x50>
 20009fc:	28001116 	blt	r5,zero,2000a44 <__umodsi3+0x50>
 2000a00:	01800804 	movi	r6,32
 2000a04:	00c00044 	movi	r3,1
 2000a08:	00000206 	br	2000a14 <__umodsi3+0x20>
 2000a0c:	30000c26 	beq	r6,zero,2000a40 <__umodsi3+0x4c>
 2000a10:	28000516 	blt	r5,zero,2000a28 <__umodsi3+0x34>
 2000a14:	294b883a 	add	r5,r5,r5
 2000a18:	31bfffc4 	addi	r6,r6,-1
 2000a1c:	18c7883a 	add	r3,r3,r3
 2000a20:	293ffa36 	bltu	r5,r4,2000a0c <__alt_data_end+0xfe000a0c>
 2000a24:	18000626 	beq	r3,zero,2000a40 <__umodsi3+0x4c>
 2000a28:	1806d07a 	srli	r3,r3,1
 2000a2c:	11400136 	bltu	r2,r5,2000a34 <__umodsi3+0x40>
 2000a30:	1145c83a 	sub	r2,r2,r5
 2000a34:	280ad07a 	srli	r5,r5,1
 2000a38:	183ffb1e 	bne	r3,zero,2000a28 <__alt_data_end+0xfe000a28>
 2000a3c:	f800283a 	ret
 2000a40:	f800283a 	ret
 2000a44:	00c00044 	movi	r3,1
 2000a48:	003ff706 	br	2000a28 <__alt_data_end+0xfe000a28>

02000a4c <__mulsi3>:
 2000a4c:	0005883a 	mov	r2,zero
 2000a50:	20000726 	beq	r4,zero,2000a70 <__mulsi3+0x24>
 2000a54:	20c0004c 	andi	r3,r4,1
 2000a58:	2008d07a 	srli	r4,r4,1
 2000a5c:	18000126 	beq	r3,zero,2000a64 <__mulsi3+0x18>
 2000a60:	1145883a 	add	r2,r2,r5
 2000a64:	294b883a 	add	r5,r5,r5
 2000a68:	203ffa1e 	bne	r4,zero,2000a54 <__alt_data_end+0xfe000a54>
 2000a6c:	f800283a 	ret
 2000a70:	f800283a 	ret

02000a74 <_fclose_r>:
 2000a74:	28003926 	beq	r5,zero,2000b5c <_fclose_r+0xe8>
 2000a78:	defffc04 	addi	sp,sp,-16
 2000a7c:	dc400115 	stw	r17,4(sp)
 2000a80:	dc000015 	stw	r16,0(sp)
 2000a84:	dfc00315 	stw	ra,12(sp)
 2000a88:	dc800215 	stw	r18,8(sp)
 2000a8c:	2023883a 	mov	r17,r4
 2000a90:	2821883a 	mov	r16,r5
 2000a94:	20000226 	beq	r4,zero,2000aa0 <_fclose_r+0x2c>
 2000a98:	20800e17 	ldw	r2,56(r4)
 2000a9c:	10002726 	beq	r2,zero,2000b3c <_fclose_r+0xc8>
 2000aa0:	8080030f 	ldh	r2,12(r16)
 2000aa4:	1000071e 	bne	r2,zero,2000ac4 <_fclose_r+0x50>
 2000aa8:	0005883a 	mov	r2,zero
 2000aac:	dfc00317 	ldw	ra,12(sp)
 2000ab0:	dc800217 	ldw	r18,8(sp)
 2000ab4:	dc400117 	ldw	r17,4(sp)
 2000ab8:	dc000017 	ldw	r16,0(sp)
 2000abc:	dec00404 	addi	sp,sp,16
 2000ac0:	f800283a 	ret
 2000ac4:	800b883a 	mov	r5,r16
 2000ac8:	8809883a 	mov	r4,r17
 2000acc:	2000b780 	call	2000b78 <__sflush_r>
 2000ad0:	1025883a 	mov	r18,r2
 2000ad4:	80800b17 	ldw	r2,44(r16)
 2000ad8:	10000426 	beq	r2,zero,2000aec <_fclose_r+0x78>
 2000adc:	81400717 	ldw	r5,28(r16)
 2000ae0:	8809883a 	mov	r4,r17
 2000ae4:	103ee83a 	callr	r2
 2000ae8:	10001616 	blt	r2,zero,2000b44 <_fclose_r+0xd0>
 2000aec:	8080030b 	ldhu	r2,12(r16)
 2000af0:	1080200c 	andi	r2,r2,128
 2000af4:	1000151e 	bne	r2,zero,2000b4c <_fclose_r+0xd8>
 2000af8:	81400c17 	ldw	r5,48(r16)
 2000afc:	28000526 	beq	r5,zero,2000b14 <_fclose_r+0xa0>
 2000b00:	80801004 	addi	r2,r16,64
 2000b04:	28800226 	beq	r5,r2,2000b10 <_fclose_r+0x9c>
 2000b08:	8809883a 	mov	r4,r17
 2000b0c:	20016700 	call	2001670 <_free_r>
 2000b10:	80000c15 	stw	zero,48(r16)
 2000b14:	81401117 	ldw	r5,68(r16)
 2000b18:	28000326 	beq	r5,zero,2000b28 <_fclose_r+0xb4>
 2000b1c:	8809883a 	mov	r4,r17
 2000b20:	20016700 	call	2001670 <_free_r>
 2000b24:	80001115 	stw	zero,68(r16)
 2000b28:	20011900 	call	2001190 <__sfp_lock_acquire>
 2000b2c:	8000030d 	sth	zero,12(r16)
 2000b30:	20011940 	call	2001194 <__sfp_lock_release>
 2000b34:	9005883a 	mov	r2,r18
 2000b38:	003fdc06 	br	2000aac <__alt_data_end+0xfe000aac>
 2000b3c:	20011800 	call	2001180 <__sinit>
 2000b40:	003fd706 	br	2000aa0 <__alt_data_end+0xfe000aa0>
 2000b44:	04bfffc4 	movi	r18,-1
 2000b48:	003fe806 	br	2000aec <__alt_data_end+0xfe000aec>
 2000b4c:	81400417 	ldw	r5,16(r16)
 2000b50:	8809883a 	mov	r4,r17
 2000b54:	20016700 	call	2001670 <_free_r>
 2000b58:	003fe706 	br	2000af8 <__alt_data_end+0xfe000af8>
 2000b5c:	0005883a 	mov	r2,zero
 2000b60:	f800283a 	ret

02000b64 <fclose>:
 2000b64:	00808074 	movhi	r2,513
 2000b68:	108d1404 	addi	r2,r2,13392
 2000b6c:	200b883a 	mov	r5,r4
 2000b70:	11000017 	ldw	r4,0(r2)
 2000b74:	2000a741 	jmpi	2000a74 <_fclose_r>

02000b78 <__sflush_r>:
 2000b78:	2880030b 	ldhu	r2,12(r5)
 2000b7c:	defffb04 	addi	sp,sp,-20
 2000b80:	dcc00315 	stw	r19,12(sp)
 2000b84:	dc400115 	stw	r17,4(sp)
 2000b88:	dfc00415 	stw	ra,16(sp)
 2000b8c:	dc800215 	stw	r18,8(sp)
 2000b90:	dc000015 	stw	r16,0(sp)
 2000b94:	10c0020c 	andi	r3,r2,8
 2000b98:	2823883a 	mov	r17,r5
 2000b9c:	2027883a 	mov	r19,r4
 2000ba0:	1800311e 	bne	r3,zero,2000c68 <__sflush_r+0xf0>
 2000ba4:	28c00117 	ldw	r3,4(r5)
 2000ba8:	10820014 	ori	r2,r2,2048
 2000bac:	2880030d 	sth	r2,12(r5)
 2000bb0:	00c04b0e 	bge	zero,r3,2000ce0 <__sflush_r+0x168>
 2000bb4:	8a000a17 	ldw	r8,40(r17)
 2000bb8:	40002326 	beq	r8,zero,2000c48 <__sflush_r+0xd0>
 2000bbc:	9c000017 	ldw	r16,0(r19)
 2000bc0:	10c4000c 	andi	r3,r2,4096
 2000bc4:	98000015 	stw	zero,0(r19)
 2000bc8:	18004826 	beq	r3,zero,2000cec <__sflush_r+0x174>
 2000bcc:	89801417 	ldw	r6,80(r17)
 2000bd0:	10c0010c 	andi	r3,r2,4
 2000bd4:	18000626 	beq	r3,zero,2000bf0 <__sflush_r+0x78>
 2000bd8:	88c00117 	ldw	r3,4(r17)
 2000bdc:	88800c17 	ldw	r2,48(r17)
 2000be0:	30cdc83a 	sub	r6,r6,r3
 2000be4:	10000226 	beq	r2,zero,2000bf0 <__sflush_r+0x78>
 2000be8:	88800f17 	ldw	r2,60(r17)
 2000bec:	308dc83a 	sub	r6,r6,r2
 2000bf0:	89400717 	ldw	r5,28(r17)
 2000bf4:	000f883a 	mov	r7,zero
 2000bf8:	9809883a 	mov	r4,r19
 2000bfc:	403ee83a 	callr	r8
 2000c00:	00ffffc4 	movi	r3,-1
 2000c04:	10c04426 	beq	r2,r3,2000d18 <__sflush_r+0x1a0>
 2000c08:	88c0030b 	ldhu	r3,12(r17)
 2000c0c:	89000417 	ldw	r4,16(r17)
 2000c10:	88000115 	stw	zero,4(r17)
 2000c14:	197dffcc 	andi	r5,r3,63487
 2000c18:	8940030d 	sth	r5,12(r17)
 2000c1c:	89000015 	stw	r4,0(r17)
 2000c20:	18c4000c 	andi	r3,r3,4096
 2000c24:	18002c1e 	bne	r3,zero,2000cd8 <__sflush_r+0x160>
 2000c28:	89400c17 	ldw	r5,48(r17)
 2000c2c:	9c000015 	stw	r16,0(r19)
 2000c30:	28000526 	beq	r5,zero,2000c48 <__sflush_r+0xd0>
 2000c34:	88801004 	addi	r2,r17,64
 2000c38:	28800226 	beq	r5,r2,2000c44 <__sflush_r+0xcc>
 2000c3c:	9809883a 	mov	r4,r19
 2000c40:	20016700 	call	2001670 <_free_r>
 2000c44:	88000c15 	stw	zero,48(r17)
 2000c48:	0005883a 	mov	r2,zero
 2000c4c:	dfc00417 	ldw	ra,16(sp)
 2000c50:	dcc00317 	ldw	r19,12(sp)
 2000c54:	dc800217 	ldw	r18,8(sp)
 2000c58:	dc400117 	ldw	r17,4(sp)
 2000c5c:	dc000017 	ldw	r16,0(sp)
 2000c60:	dec00504 	addi	sp,sp,20
 2000c64:	f800283a 	ret
 2000c68:	2c800417 	ldw	r18,16(r5)
 2000c6c:	903ff626 	beq	r18,zero,2000c48 <__alt_data_end+0xfe000c48>
 2000c70:	2c000017 	ldw	r16,0(r5)
 2000c74:	108000cc 	andi	r2,r2,3
 2000c78:	2c800015 	stw	r18,0(r5)
 2000c7c:	84a1c83a 	sub	r16,r16,r18
 2000c80:	1000131e 	bne	r2,zero,2000cd0 <__sflush_r+0x158>
 2000c84:	28800517 	ldw	r2,20(r5)
 2000c88:	88800215 	stw	r2,8(r17)
 2000c8c:	04000316 	blt	zero,r16,2000c9c <__sflush_r+0x124>
 2000c90:	003fed06 	br	2000c48 <__alt_data_end+0xfe000c48>
 2000c94:	90a5883a 	add	r18,r18,r2
 2000c98:	043feb0e 	bge	zero,r16,2000c48 <__alt_data_end+0xfe000c48>
 2000c9c:	88800917 	ldw	r2,36(r17)
 2000ca0:	89400717 	ldw	r5,28(r17)
 2000ca4:	800f883a 	mov	r7,r16
 2000ca8:	900d883a 	mov	r6,r18
 2000cac:	9809883a 	mov	r4,r19
 2000cb0:	103ee83a 	callr	r2
 2000cb4:	80a1c83a 	sub	r16,r16,r2
 2000cb8:	00bff616 	blt	zero,r2,2000c94 <__alt_data_end+0xfe000c94>
 2000cbc:	88c0030b 	ldhu	r3,12(r17)
 2000cc0:	00bfffc4 	movi	r2,-1
 2000cc4:	18c01014 	ori	r3,r3,64
 2000cc8:	88c0030d 	sth	r3,12(r17)
 2000ccc:	003fdf06 	br	2000c4c <__alt_data_end+0xfe000c4c>
 2000cd0:	0005883a 	mov	r2,zero
 2000cd4:	003fec06 	br	2000c88 <__alt_data_end+0xfe000c88>
 2000cd8:	88801415 	stw	r2,80(r17)
 2000cdc:	003fd206 	br	2000c28 <__alt_data_end+0xfe000c28>
 2000ce0:	28c00f17 	ldw	r3,60(r5)
 2000ce4:	00ffb316 	blt	zero,r3,2000bb4 <__alt_data_end+0xfe000bb4>
 2000ce8:	003fd706 	br	2000c48 <__alt_data_end+0xfe000c48>
 2000cec:	89400717 	ldw	r5,28(r17)
 2000cf0:	000d883a 	mov	r6,zero
 2000cf4:	01c00044 	movi	r7,1
 2000cf8:	9809883a 	mov	r4,r19
 2000cfc:	403ee83a 	callr	r8
 2000d00:	100d883a 	mov	r6,r2
 2000d04:	00bfffc4 	movi	r2,-1
 2000d08:	30801426 	beq	r6,r2,2000d5c <__sflush_r+0x1e4>
 2000d0c:	8880030b 	ldhu	r2,12(r17)
 2000d10:	8a000a17 	ldw	r8,40(r17)
 2000d14:	003fae06 	br	2000bd0 <__alt_data_end+0xfe000bd0>
 2000d18:	98c00017 	ldw	r3,0(r19)
 2000d1c:	183fba26 	beq	r3,zero,2000c08 <__alt_data_end+0xfe000c08>
 2000d20:	01000744 	movi	r4,29
 2000d24:	19000626 	beq	r3,r4,2000d40 <__sflush_r+0x1c8>
 2000d28:	01000584 	movi	r4,22
 2000d2c:	19000426 	beq	r3,r4,2000d40 <__sflush_r+0x1c8>
 2000d30:	88c0030b 	ldhu	r3,12(r17)
 2000d34:	18c01014 	ori	r3,r3,64
 2000d38:	88c0030d 	sth	r3,12(r17)
 2000d3c:	003fc306 	br	2000c4c <__alt_data_end+0xfe000c4c>
 2000d40:	8880030b 	ldhu	r2,12(r17)
 2000d44:	88c00417 	ldw	r3,16(r17)
 2000d48:	88000115 	stw	zero,4(r17)
 2000d4c:	10bdffcc 	andi	r2,r2,63487
 2000d50:	8880030d 	sth	r2,12(r17)
 2000d54:	88c00015 	stw	r3,0(r17)
 2000d58:	003fb306 	br	2000c28 <__alt_data_end+0xfe000c28>
 2000d5c:	98800017 	ldw	r2,0(r19)
 2000d60:	103fea26 	beq	r2,zero,2000d0c <__alt_data_end+0xfe000d0c>
 2000d64:	00c00744 	movi	r3,29
 2000d68:	10c00226 	beq	r2,r3,2000d74 <__sflush_r+0x1fc>
 2000d6c:	00c00584 	movi	r3,22
 2000d70:	10c0031e 	bne	r2,r3,2000d80 <__sflush_r+0x208>
 2000d74:	9c000015 	stw	r16,0(r19)
 2000d78:	0005883a 	mov	r2,zero
 2000d7c:	003fb306 	br	2000c4c <__alt_data_end+0xfe000c4c>
 2000d80:	88c0030b 	ldhu	r3,12(r17)
 2000d84:	3005883a 	mov	r2,r6
 2000d88:	18c01014 	ori	r3,r3,64
 2000d8c:	88c0030d 	sth	r3,12(r17)
 2000d90:	003fae06 	br	2000c4c <__alt_data_end+0xfe000c4c>

02000d94 <_fflush_r>:
 2000d94:	defffd04 	addi	sp,sp,-12
 2000d98:	dc000115 	stw	r16,4(sp)
 2000d9c:	dfc00215 	stw	ra,8(sp)
 2000da0:	2021883a 	mov	r16,r4
 2000da4:	20000226 	beq	r4,zero,2000db0 <_fflush_r+0x1c>
 2000da8:	20800e17 	ldw	r2,56(r4)
 2000dac:	10000c26 	beq	r2,zero,2000de0 <_fflush_r+0x4c>
 2000db0:	2880030f 	ldh	r2,12(r5)
 2000db4:	1000051e 	bne	r2,zero,2000dcc <_fflush_r+0x38>
 2000db8:	0005883a 	mov	r2,zero
 2000dbc:	dfc00217 	ldw	ra,8(sp)
 2000dc0:	dc000117 	ldw	r16,4(sp)
 2000dc4:	dec00304 	addi	sp,sp,12
 2000dc8:	f800283a 	ret
 2000dcc:	8009883a 	mov	r4,r16
 2000dd0:	dfc00217 	ldw	ra,8(sp)
 2000dd4:	dc000117 	ldw	r16,4(sp)
 2000dd8:	dec00304 	addi	sp,sp,12
 2000ddc:	2000b781 	jmpi	2000b78 <__sflush_r>
 2000de0:	d9400015 	stw	r5,0(sp)
 2000de4:	20011800 	call	2001180 <__sinit>
 2000de8:	d9400017 	ldw	r5,0(sp)
 2000dec:	003ff006 	br	2000db0 <__alt_data_end+0xfe000db0>

02000df0 <fflush>:
 2000df0:	20000526 	beq	r4,zero,2000e08 <fflush+0x18>
 2000df4:	00808074 	movhi	r2,513
 2000df8:	108d1404 	addi	r2,r2,13392
 2000dfc:	200b883a 	mov	r5,r4
 2000e00:	11000017 	ldw	r4,0(r2)
 2000e04:	2000d941 	jmpi	2000d94 <_fflush_r>
 2000e08:	00808074 	movhi	r2,513
 2000e0c:	108d1304 	addi	r2,r2,13388
 2000e10:	11000017 	ldw	r4,0(r2)
 2000e14:	01408034 	movhi	r5,512
 2000e18:	29436504 	addi	r5,r5,3476
 2000e1c:	2001f201 	jmpi	2001f20 <_fwalk_reent>

02000e20 <__fp_unlock>:
 2000e20:	0005883a 	mov	r2,zero
 2000e24:	f800283a 	ret

02000e28 <_cleanup_r>:
 2000e28:	01408034 	movhi	r5,512
 2000e2c:	29429d04 	addi	r5,r5,2676
 2000e30:	2001f201 	jmpi	2001f20 <_fwalk_reent>

02000e34 <__sinit.part.1>:
 2000e34:	defff704 	addi	sp,sp,-36
 2000e38:	00c08034 	movhi	r3,512
 2000e3c:	dfc00815 	stw	ra,32(sp)
 2000e40:	ddc00715 	stw	r23,28(sp)
 2000e44:	dd800615 	stw	r22,24(sp)
 2000e48:	dd400515 	stw	r21,20(sp)
 2000e4c:	dd000415 	stw	r20,16(sp)
 2000e50:	dcc00315 	stw	r19,12(sp)
 2000e54:	dc800215 	stw	r18,8(sp)
 2000e58:	dc400115 	stw	r17,4(sp)
 2000e5c:	dc000015 	stw	r16,0(sp)
 2000e60:	18c38a04 	addi	r3,r3,3624
 2000e64:	24000117 	ldw	r16,4(r4)
 2000e68:	20c00f15 	stw	r3,60(r4)
 2000e6c:	2080bb04 	addi	r2,r4,748
 2000e70:	00c000c4 	movi	r3,3
 2000e74:	20c0b915 	stw	r3,740(r4)
 2000e78:	2080ba15 	stw	r2,744(r4)
 2000e7c:	2000b815 	stw	zero,736(r4)
 2000e80:	05c00204 	movi	r23,8
 2000e84:	00800104 	movi	r2,4
 2000e88:	2025883a 	mov	r18,r4
 2000e8c:	b80d883a 	mov	r6,r23
 2000e90:	81001704 	addi	r4,r16,92
 2000e94:	000b883a 	mov	r5,zero
 2000e98:	80000015 	stw	zero,0(r16)
 2000e9c:	80000115 	stw	zero,4(r16)
 2000ea0:	80000215 	stw	zero,8(r16)
 2000ea4:	8080030d 	sth	r2,12(r16)
 2000ea8:	80001915 	stw	zero,100(r16)
 2000eac:	8000038d 	sth	zero,14(r16)
 2000eb0:	80000415 	stw	zero,16(r16)
 2000eb4:	80000515 	stw	zero,20(r16)
 2000eb8:	80000615 	stw	zero,24(r16)
 2000ebc:	2002c2c0 	call	2002c2c <memset>
 2000ec0:	05808034 	movhi	r22,512
 2000ec4:	94400217 	ldw	r17,8(r18)
 2000ec8:	05408034 	movhi	r21,512
 2000ecc:	05008034 	movhi	r20,512
 2000ed0:	04c08034 	movhi	r19,512
 2000ed4:	b58c4e04 	addi	r22,r22,12600
 2000ed8:	ad4c6504 	addi	r21,r21,12692
 2000edc:	a50c8404 	addi	r20,r20,12816
 2000ee0:	9ccc9b04 	addi	r19,r19,12908
 2000ee4:	85800815 	stw	r22,32(r16)
 2000ee8:	85400915 	stw	r21,36(r16)
 2000eec:	85000a15 	stw	r20,40(r16)
 2000ef0:	84c00b15 	stw	r19,44(r16)
 2000ef4:	84000715 	stw	r16,28(r16)
 2000ef8:	00800284 	movi	r2,10
 2000efc:	8880030d 	sth	r2,12(r17)
 2000f00:	00800044 	movi	r2,1
 2000f04:	b80d883a 	mov	r6,r23
 2000f08:	89001704 	addi	r4,r17,92
 2000f0c:	000b883a 	mov	r5,zero
 2000f10:	88000015 	stw	zero,0(r17)
 2000f14:	88000115 	stw	zero,4(r17)
 2000f18:	88000215 	stw	zero,8(r17)
 2000f1c:	88001915 	stw	zero,100(r17)
 2000f20:	8880038d 	sth	r2,14(r17)
 2000f24:	88000415 	stw	zero,16(r17)
 2000f28:	88000515 	stw	zero,20(r17)
 2000f2c:	88000615 	stw	zero,24(r17)
 2000f30:	2002c2c0 	call	2002c2c <memset>
 2000f34:	94000317 	ldw	r16,12(r18)
 2000f38:	00800484 	movi	r2,18
 2000f3c:	8c400715 	stw	r17,28(r17)
 2000f40:	8d800815 	stw	r22,32(r17)
 2000f44:	8d400915 	stw	r21,36(r17)
 2000f48:	8d000a15 	stw	r20,40(r17)
 2000f4c:	8cc00b15 	stw	r19,44(r17)
 2000f50:	8080030d 	sth	r2,12(r16)
 2000f54:	00800084 	movi	r2,2
 2000f58:	80000015 	stw	zero,0(r16)
 2000f5c:	80000115 	stw	zero,4(r16)
 2000f60:	80000215 	stw	zero,8(r16)
 2000f64:	80001915 	stw	zero,100(r16)
 2000f68:	8080038d 	sth	r2,14(r16)
 2000f6c:	80000415 	stw	zero,16(r16)
 2000f70:	80000515 	stw	zero,20(r16)
 2000f74:	80000615 	stw	zero,24(r16)
 2000f78:	b80d883a 	mov	r6,r23
 2000f7c:	000b883a 	mov	r5,zero
 2000f80:	81001704 	addi	r4,r16,92
 2000f84:	2002c2c0 	call	2002c2c <memset>
 2000f88:	00800044 	movi	r2,1
 2000f8c:	84000715 	stw	r16,28(r16)
 2000f90:	85800815 	stw	r22,32(r16)
 2000f94:	85400915 	stw	r21,36(r16)
 2000f98:	85000a15 	stw	r20,40(r16)
 2000f9c:	84c00b15 	stw	r19,44(r16)
 2000fa0:	90800e15 	stw	r2,56(r18)
 2000fa4:	dfc00817 	ldw	ra,32(sp)
 2000fa8:	ddc00717 	ldw	r23,28(sp)
 2000fac:	dd800617 	ldw	r22,24(sp)
 2000fb0:	dd400517 	ldw	r21,20(sp)
 2000fb4:	dd000417 	ldw	r20,16(sp)
 2000fb8:	dcc00317 	ldw	r19,12(sp)
 2000fbc:	dc800217 	ldw	r18,8(sp)
 2000fc0:	dc400117 	ldw	r17,4(sp)
 2000fc4:	dc000017 	ldw	r16,0(sp)
 2000fc8:	dec00904 	addi	sp,sp,36
 2000fcc:	f800283a 	ret

02000fd0 <__fp_lock>:
 2000fd0:	0005883a 	mov	r2,zero
 2000fd4:	f800283a 	ret

02000fd8 <__sfmoreglue>:
 2000fd8:	defffc04 	addi	sp,sp,-16
 2000fdc:	dc800215 	stw	r18,8(sp)
 2000fe0:	2825883a 	mov	r18,r5
 2000fe4:	dc000015 	stw	r16,0(sp)
 2000fe8:	01401a04 	movi	r5,104
 2000fec:	2021883a 	mov	r16,r4
 2000ff0:	913fffc4 	addi	r4,r18,-1
 2000ff4:	dfc00315 	stw	ra,12(sp)
 2000ff8:	dc400115 	stw	r17,4(sp)
 2000ffc:	2000a4c0 	call	2000a4c <__mulsi3>
 2001000:	8009883a 	mov	r4,r16
 2001004:	11401d04 	addi	r5,r2,116
 2001008:	1023883a 	mov	r17,r2
 200100c:	20022d80 	call	20022d8 <_malloc_r>
 2001010:	1021883a 	mov	r16,r2
 2001014:	10000726 	beq	r2,zero,2001034 <__sfmoreglue+0x5c>
 2001018:	11000304 	addi	r4,r2,12
 200101c:	10000015 	stw	zero,0(r2)
 2001020:	14800115 	stw	r18,4(r2)
 2001024:	11000215 	stw	r4,8(r2)
 2001028:	89801a04 	addi	r6,r17,104
 200102c:	000b883a 	mov	r5,zero
 2001030:	2002c2c0 	call	2002c2c <memset>
 2001034:	8005883a 	mov	r2,r16
 2001038:	dfc00317 	ldw	ra,12(sp)
 200103c:	dc800217 	ldw	r18,8(sp)
 2001040:	dc400117 	ldw	r17,4(sp)
 2001044:	dc000017 	ldw	r16,0(sp)
 2001048:	dec00404 	addi	sp,sp,16
 200104c:	f800283a 	ret

02001050 <__sfp>:
 2001050:	defffb04 	addi	sp,sp,-20
 2001054:	dc000015 	stw	r16,0(sp)
 2001058:	04008074 	movhi	r16,513
 200105c:	840d1304 	addi	r16,r16,13388
 2001060:	dcc00315 	stw	r19,12(sp)
 2001064:	2027883a 	mov	r19,r4
 2001068:	81000017 	ldw	r4,0(r16)
 200106c:	dfc00415 	stw	ra,16(sp)
 2001070:	dc800215 	stw	r18,8(sp)
 2001074:	20800e17 	ldw	r2,56(r4)
 2001078:	dc400115 	stw	r17,4(sp)
 200107c:	1000021e 	bne	r2,zero,2001088 <__sfp+0x38>
 2001080:	2000e340 	call	2000e34 <__sinit.part.1>
 2001084:	81000017 	ldw	r4,0(r16)
 2001088:	2480b804 	addi	r18,r4,736
 200108c:	047fffc4 	movi	r17,-1
 2001090:	91000117 	ldw	r4,4(r18)
 2001094:	94000217 	ldw	r16,8(r18)
 2001098:	213fffc4 	addi	r4,r4,-1
 200109c:	20000a16 	blt	r4,zero,20010c8 <__sfp+0x78>
 20010a0:	8080030f 	ldh	r2,12(r16)
 20010a4:	10000c26 	beq	r2,zero,20010d8 <__sfp+0x88>
 20010a8:	80c01d04 	addi	r3,r16,116
 20010ac:	00000206 	br	20010b8 <__sfp+0x68>
 20010b0:	18bfe60f 	ldh	r2,-104(r3)
 20010b4:	10000826 	beq	r2,zero,20010d8 <__sfp+0x88>
 20010b8:	213fffc4 	addi	r4,r4,-1
 20010bc:	1c3ffd04 	addi	r16,r3,-12
 20010c0:	18c01a04 	addi	r3,r3,104
 20010c4:	247ffa1e 	bne	r4,r17,20010b0 <__alt_data_end+0xfe0010b0>
 20010c8:	90800017 	ldw	r2,0(r18)
 20010cc:	10001d26 	beq	r2,zero,2001144 <__sfp+0xf4>
 20010d0:	1025883a 	mov	r18,r2
 20010d4:	003fee06 	br	2001090 <__alt_data_end+0xfe001090>
 20010d8:	00bfffc4 	movi	r2,-1
 20010dc:	8080038d 	sth	r2,14(r16)
 20010e0:	00800044 	movi	r2,1
 20010e4:	8080030d 	sth	r2,12(r16)
 20010e8:	80001915 	stw	zero,100(r16)
 20010ec:	80000015 	stw	zero,0(r16)
 20010f0:	80000215 	stw	zero,8(r16)
 20010f4:	80000115 	stw	zero,4(r16)
 20010f8:	80000415 	stw	zero,16(r16)
 20010fc:	80000515 	stw	zero,20(r16)
 2001100:	80000615 	stw	zero,24(r16)
 2001104:	01800204 	movi	r6,8
 2001108:	000b883a 	mov	r5,zero
 200110c:	81001704 	addi	r4,r16,92
 2001110:	2002c2c0 	call	2002c2c <memset>
 2001114:	8005883a 	mov	r2,r16
 2001118:	80000c15 	stw	zero,48(r16)
 200111c:	80000d15 	stw	zero,52(r16)
 2001120:	80001115 	stw	zero,68(r16)
 2001124:	80001215 	stw	zero,72(r16)
 2001128:	dfc00417 	ldw	ra,16(sp)
 200112c:	dcc00317 	ldw	r19,12(sp)
 2001130:	dc800217 	ldw	r18,8(sp)
 2001134:	dc400117 	ldw	r17,4(sp)
 2001138:	dc000017 	ldw	r16,0(sp)
 200113c:	dec00504 	addi	sp,sp,20
 2001140:	f800283a 	ret
 2001144:	01400104 	movi	r5,4
 2001148:	9809883a 	mov	r4,r19
 200114c:	2000fd80 	call	2000fd8 <__sfmoreglue>
 2001150:	90800015 	stw	r2,0(r18)
 2001154:	103fde1e 	bne	r2,zero,20010d0 <__alt_data_end+0xfe0010d0>
 2001158:	00800304 	movi	r2,12
 200115c:	98800015 	stw	r2,0(r19)
 2001160:	0005883a 	mov	r2,zero
 2001164:	003ff006 	br	2001128 <__alt_data_end+0xfe001128>

02001168 <_cleanup>:
 2001168:	00808074 	movhi	r2,513
 200116c:	108d1304 	addi	r2,r2,13388
 2001170:	11000017 	ldw	r4,0(r2)
 2001174:	01408034 	movhi	r5,512
 2001178:	29429d04 	addi	r5,r5,2676
 200117c:	2001f201 	jmpi	2001f20 <_fwalk_reent>

02001180 <__sinit>:
 2001180:	20800e17 	ldw	r2,56(r4)
 2001184:	10000126 	beq	r2,zero,200118c <__sinit+0xc>
 2001188:	f800283a 	ret
 200118c:	2000e341 	jmpi	2000e34 <__sinit.part.1>

02001190 <__sfp_lock_acquire>:
 2001190:	f800283a 	ret

02001194 <__sfp_lock_release>:
 2001194:	f800283a 	ret

02001198 <__sinit_lock_acquire>:
 2001198:	f800283a 	ret

0200119c <__sinit_lock_release>:
 200119c:	f800283a 	ret

020011a0 <__fp_lock_all>:
 20011a0:	00808074 	movhi	r2,513
 20011a4:	108d1404 	addi	r2,r2,13392
 20011a8:	11000017 	ldw	r4,0(r2)
 20011ac:	01408034 	movhi	r5,512
 20011b0:	2943f404 	addi	r5,r5,4048
 20011b4:	2001e5c1 	jmpi	2001e5c <_fwalk>

020011b8 <__fp_unlock_all>:
 20011b8:	00808074 	movhi	r2,513
 20011bc:	108d1404 	addi	r2,r2,13392
 20011c0:	11000017 	ldw	r4,0(r2)
 20011c4:	01408034 	movhi	r5,512
 20011c8:	29438804 	addi	r5,r5,3616
 20011cc:	2001e5c1 	jmpi	2001e5c <_fwalk>

020011d0 <_fopen_r>:
 20011d0:	defffa04 	addi	sp,sp,-24
 20011d4:	3005883a 	mov	r2,r6
 20011d8:	dcc00415 	stw	r19,16(sp)
 20011dc:	d80d883a 	mov	r6,sp
 20011e0:	2827883a 	mov	r19,r5
 20011e4:	100b883a 	mov	r5,r2
 20011e8:	dc800315 	stw	r18,12(sp)
 20011ec:	dfc00515 	stw	ra,20(sp)
 20011f0:	dc400215 	stw	r17,8(sp)
 20011f4:	dc000115 	stw	r16,4(sp)
 20011f8:	2025883a 	mov	r18,r4
 20011fc:	20071780 	call	2007178 <__sflags>
 2001200:	10002726 	beq	r2,zero,20012a0 <_fopen_r+0xd0>
 2001204:	9009883a 	mov	r4,r18
 2001208:	1023883a 	mov	r17,r2
 200120c:	20010500 	call	2001050 <__sfp>
 2001210:	1021883a 	mov	r16,r2
 2001214:	10002226 	beq	r2,zero,20012a0 <_fopen_r+0xd0>
 2001218:	d9800017 	ldw	r6,0(sp)
 200121c:	01c06d84 	movi	r7,438
 2001220:	980b883a 	mov	r5,r19
 2001224:	9009883a 	mov	r4,r18
 2001228:	2002d540 	call	2002d54 <_open_r>
 200122c:	10001916 	blt	r2,zero,2001294 <_fopen_r+0xc4>
 2001230:	8080038d 	sth	r2,14(r16)
 2001234:	00808034 	movhi	r2,512
 2001238:	108c4e04 	addi	r2,r2,12600
 200123c:	80800815 	stw	r2,32(r16)
 2001240:	00808034 	movhi	r2,512
 2001244:	108c6504 	addi	r2,r2,12692
 2001248:	80800915 	stw	r2,36(r16)
 200124c:	00808034 	movhi	r2,512
 2001250:	108c8404 	addi	r2,r2,12816
 2001254:	80800a15 	stw	r2,40(r16)
 2001258:	00808034 	movhi	r2,512
 200125c:	108c9b04 	addi	r2,r2,12908
 2001260:	8440030d 	sth	r17,12(r16)
 2001264:	84000715 	stw	r16,28(r16)
 2001268:	80800b15 	stw	r2,44(r16)
 200126c:	8c40400c 	andi	r17,r17,256
 2001270:	88000d1e 	bne	r17,zero,20012a8 <_fopen_r+0xd8>
 2001274:	8005883a 	mov	r2,r16
 2001278:	dfc00517 	ldw	ra,20(sp)
 200127c:	dcc00417 	ldw	r19,16(sp)
 2001280:	dc800317 	ldw	r18,12(sp)
 2001284:	dc400217 	ldw	r17,8(sp)
 2001288:	dc000117 	ldw	r16,4(sp)
 200128c:	dec00604 	addi	sp,sp,24
 2001290:	f800283a 	ret
 2001294:	20011900 	call	2001190 <__sfp_lock_acquire>
 2001298:	8000030d 	sth	zero,12(r16)
 200129c:	20011940 	call	2001194 <__sfp_lock_release>
 20012a0:	0005883a 	mov	r2,zero
 20012a4:	003ff406 	br	2001278 <__alt_data_end+0xfe001278>
 20012a8:	01c00084 	movi	r7,2
 20012ac:	000d883a 	mov	r6,zero
 20012b0:	800b883a 	mov	r5,r16
 20012b4:	9009883a 	mov	r4,r18
 20012b8:	20019800 	call	2001980 <_fseek_r>
 20012bc:	8005883a 	mov	r2,r16
 20012c0:	003fed06 	br	2001278 <__alt_data_end+0xfe001278>

020012c4 <fopen>:
 20012c4:	00808074 	movhi	r2,513
 20012c8:	108d1404 	addi	r2,r2,13392
 20012cc:	280d883a 	mov	r6,r5
 20012d0:	200b883a 	mov	r5,r4
 20012d4:	11000017 	ldw	r4,0(r2)
 20012d8:	20011d01 	jmpi	20011d0 <_fopen_r>

020012dc <_fread_r>:
 20012dc:	defff404 	addi	sp,sp,-48
 20012e0:	dd000615 	stw	r20,24(sp)
 20012e4:	dcc00515 	stw	r19,20(sp)
 20012e8:	2029883a 	mov	r20,r4
 20012ec:	2827883a 	mov	r19,r5
 20012f0:	3809883a 	mov	r4,r7
 20012f4:	300b883a 	mov	r5,r6
 20012f8:	ddc00915 	stw	r23,36(sp)
 20012fc:	dd400715 	stw	r21,28(sp)
 2001300:	dc000215 	stw	r16,8(sp)
 2001304:	dfc00b15 	stw	ra,44(sp)
 2001308:	df000a15 	stw	fp,40(sp)
 200130c:	dd800815 	stw	r22,32(sp)
 2001310:	dc800415 	stw	r18,16(sp)
 2001314:	dc400315 	stw	r17,12(sp)
 2001318:	302f883a 	mov	r23,r6
 200131c:	382b883a 	mov	r21,r7
 2001320:	2000a4c0 	call	2000a4c <__mulsi3>
 2001324:	dc000c17 	ldw	r16,48(sp)
 2001328:	10003826 	beq	r2,zero,200140c <_fread_r+0x130>
 200132c:	102d883a 	mov	r22,r2
 2001330:	a0000226 	beq	r20,zero,200133c <_fread_r+0x60>
 2001334:	a0800e17 	ldw	r2,56(r20)
 2001338:	10006e26 	beq	r2,zero,20014f4 <_fread_r+0x218>
 200133c:	8080030b 	ldhu	r2,12(r16)
 2001340:	10c8000c 	andi	r3,r2,8192
 2001344:	1800061e 	bne	r3,zero,2001360 <_fread_r+0x84>
 2001348:	81001917 	ldw	r4,100(r16)
 200134c:	00f7ffc4 	movi	r3,-8193
 2001350:	10880014 	ori	r2,r2,8192
 2001354:	20c6703a 	and	r3,r4,r3
 2001358:	8080030d 	sth	r2,12(r16)
 200135c:	80c01915 	stw	r3,100(r16)
 2001360:	84400117 	ldw	r17,4(r16)
 2001364:	88005f16 	blt	r17,zero,20014e4 <_fread_r+0x208>
 2001368:	8809883a 	mov	r4,r17
 200136c:	1080008c 	andi	r2,r2,2
 2001370:	1000281e 	bne	r2,zero,2001414 <_fread_r+0x138>
 2001374:	b025883a 	mov	r18,r22
 2001378:	00000b06 	br	20013a8 <_fread_r+0xcc>
 200137c:	2002ae40 	call	2002ae4 <memcpy>
 2001380:	80800017 	ldw	r2,0(r16)
 2001384:	9c67883a 	add	r19,r19,r17
 2001388:	9465c83a 	sub	r18,r18,r17
 200138c:	1463883a 	add	r17,r2,r17
 2001390:	800b883a 	mov	r5,r16
 2001394:	a009883a 	mov	r4,r20
 2001398:	84400015 	stw	r17,0(r16)
 200139c:	2002f100 	call	2002f10 <__srefill_r>
 20013a0:	10004c1e 	bne	r2,zero,20014d4 <_fread_r+0x1f8>
 20013a4:	84400117 	ldw	r17,4(r16)
 20013a8:	880d883a 	mov	r6,r17
 20013ac:	9809883a 	mov	r4,r19
 20013b0:	81400017 	ldw	r5,0(r16)
 20013b4:	8cbff136 	bltu	r17,r18,200137c <__alt_data_end+0xfe00137c>
 20013b8:	900d883a 	mov	r6,r18
 20013bc:	2002ae40 	call	2002ae4 <memcpy>
 20013c0:	80c00117 	ldw	r3,4(r16)
 20013c4:	81000017 	ldw	r4,0(r16)
 20013c8:	a805883a 	mov	r2,r21
 20013cc:	1c87c83a 	sub	r3,r3,r18
 20013d0:	24a5883a 	add	r18,r4,r18
 20013d4:	80c00115 	stw	r3,4(r16)
 20013d8:	84800015 	stw	r18,0(r16)
 20013dc:	dfc00b17 	ldw	ra,44(sp)
 20013e0:	df000a17 	ldw	fp,40(sp)
 20013e4:	ddc00917 	ldw	r23,36(sp)
 20013e8:	dd800817 	ldw	r22,32(sp)
 20013ec:	dd400717 	ldw	r21,28(sp)
 20013f0:	dd000617 	ldw	r20,24(sp)
 20013f4:	dcc00517 	ldw	r19,20(sp)
 20013f8:	dc800417 	ldw	r18,16(sp)
 20013fc:	dc400317 	ldw	r17,12(sp)
 2001400:	dc000217 	ldw	r16,8(sp)
 2001404:	dec00c04 	addi	sp,sp,48
 2001408:	f800283a 	ret
 200140c:	0005883a 	mov	r2,zero
 2001410:	003ff206 	br	20013dc <__alt_data_end+0xfe0013dc>
 2001414:	b007883a 	mov	r3,r22
 2001418:	2580012e 	bgeu	r4,r22,2001420 <_fread_r+0x144>
 200141c:	2007883a 	mov	r3,r4
 2001420:	81400017 	ldw	r5,0(r16)
 2001424:	180d883a 	mov	r6,r3
 2001428:	9809883a 	mov	r4,r19
 200142c:	d8c00115 	stw	r3,4(sp)
 2001430:	2002ae40 	call	2002ae4 <memcpy>
 2001434:	d8c00117 	ldw	r3,4(sp)
 2001438:	84400017 	ldw	r17,0(r16)
 200143c:	80800117 	ldw	r2,4(r16)
 2001440:	81400c17 	ldw	r5,48(r16)
 2001444:	88e3883a 	add	r17,r17,r3
 2001448:	10c5c83a 	sub	r2,r2,r3
 200144c:	84400015 	stw	r17,0(r16)
 2001450:	80800115 	stw	r2,4(r16)
 2001454:	b0e5c83a 	sub	r18,r22,r3
 2001458:	28002c26 	beq	r5,zero,200150c <_fread_r+0x230>
 200145c:	90002c26 	beq	r18,zero,2001510 <_fread_r+0x234>
 2001460:	80801004 	addi	r2,r16,64
 2001464:	28800526 	beq	r5,r2,200147c <_fread_r+0x1a0>
 2001468:	a009883a 	mov	r4,r20
 200146c:	d8c00115 	stw	r3,4(sp)
 2001470:	20016700 	call	2001670 <_free_r>
 2001474:	d8c00117 	ldw	r3,4(sp)
 2001478:	84400017 	ldw	r17,0(r16)
 200147c:	80000c15 	stw	zero,48(r16)
 2001480:	80800517 	ldw	r2,20(r16)
 2001484:	87000417 	ldw	fp,16(r16)
 2001488:	98e7883a 	add	r19,r19,r3
 200148c:	d8800015 	stw	r2,0(sp)
 2001490:	00000106 	br	2001498 <_fread_r+0x1bc>
 2001494:	90001e26 	beq	r18,zero,2001510 <_fread_r+0x234>
 2001498:	84c00415 	stw	r19,16(r16)
 200149c:	84800515 	stw	r18,20(r16)
 20014a0:	84c00015 	stw	r19,0(r16)
 20014a4:	a009883a 	mov	r4,r20
 20014a8:	800b883a 	mov	r5,r16
 20014ac:	2002f100 	call	2002f10 <__srefill_r>
 20014b0:	d9000017 	ldw	r4,0(sp)
 20014b4:	80c00117 	ldw	r3,4(r16)
 20014b8:	87000415 	stw	fp,16(r16)
 20014bc:	81000515 	stw	r4,20(r16)
 20014c0:	84400015 	stw	r17,0(r16)
 20014c4:	80000115 	stw	zero,4(r16)
 20014c8:	90e5c83a 	sub	r18,r18,r3
 20014cc:	98e7883a 	add	r19,r19,r3
 20014d0:	103ff026 	beq	r2,zero,2001494 <__alt_data_end+0xfe001494>
 20014d4:	b80b883a 	mov	r5,r23
 20014d8:	b489c83a 	sub	r4,r22,r18
 20014dc:	20009900 	call	2000990 <__udivsi3>
 20014e0:	003fbe06 	br	20013dc <__alt_data_end+0xfe0013dc>
 20014e4:	80000115 	stw	zero,4(r16)
 20014e8:	0009883a 	mov	r4,zero
 20014ec:	0023883a 	mov	r17,zero
 20014f0:	003f9e06 	br	200136c <__alt_data_end+0xfe00136c>
 20014f4:	a009883a 	mov	r4,r20
 20014f8:	20011800 	call	2001180 <__sinit>
 20014fc:	8080030b 	ldhu	r2,12(r16)
 2001500:	10c8000c 	andi	r3,r2,8192
 2001504:	183f961e 	bne	r3,zero,2001360 <__alt_data_end+0xfe001360>
 2001508:	003f8f06 	br	2001348 <__alt_data_end+0xfe001348>
 200150c:	903fdc1e 	bne	r18,zero,2001480 <__alt_data_end+0xfe001480>
 2001510:	a805883a 	mov	r2,r21
 2001514:	003fb106 	br	20013dc <__alt_data_end+0xfe0013dc>

02001518 <fread>:
 2001518:	defffe04 	addi	sp,sp,-8
 200151c:	00808074 	movhi	r2,513
 2001520:	d9c00015 	stw	r7,0(sp)
 2001524:	108d1404 	addi	r2,r2,13392
 2001528:	300f883a 	mov	r7,r6
 200152c:	280d883a 	mov	r6,r5
 2001530:	200b883a 	mov	r5,r4
 2001534:	11000017 	ldw	r4,0(r2)
 2001538:	dfc00115 	stw	ra,4(sp)
 200153c:	20012dc0 	call	20012dc <_fread_r>
 2001540:	dfc00117 	ldw	ra,4(sp)
 2001544:	dec00204 	addi	sp,sp,8
 2001548:	f800283a 	ret

0200154c <_malloc_trim_r>:
 200154c:	defffb04 	addi	sp,sp,-20
 2001550:	dcc00315 	stw	r19,12(sp)
 2001554:	04c08074 	movhi	r19,513
 2001558:	dc800215 	stw	r18,8(sp)
 200155c:	dc400115 	stw	r17,4(sp)
 2001560:	dc000015 	stw	r16,0(sp)
 2001564:	dfc00415 	stw	ra,16(sp)
 2001568:	2821883a 	mov	r16,r5
 200156c:	9cc76704 	addi	r19,r19,7580
 2001570:	2025883a 	mov	r18,r4
 2001574:	200e9a40 	call	200e9a4 <__malloc_lock>
 2001578:	98800217 	ldw	r2,8(r19)
 200157c:	14400117 	ldw	r17,4(r2)
 2001580:	00bfff04 	movi	r2,-4
 2001584:	88a2703a 	and	r17,r17,r2
 2001588:	8c21c83a 	sub	r16,r17,r16
 200158c:	8403fbc4 	addi	r16,r16,4079
 2001590:	8020d33a 	srli	r16,r16,12
 2001594:	0083ffc4 	movi	r2,4095
 2001598:	843fffc4 	addi	r16,r16,-1
 200159c:	8020933a 	slli	r16,r16,12
 20015a0:	1400060e 	bge	r2,r16,20015bc <_malloc_trim_r+0x70>
 20015a4:	000b883a 	mov	r5,zero
 20015a8:	9009883a 	mov	r4,r18
 20015ac:	20030e40 	call	20030e4 <_sbrk_r>
 20015b0:	98c00217 	ldw	r3,8(r19)
 20015b4:	1c47883a 	add	r3,r3,r17
 20015b8:	10c00a26 	beq	r2,r3,20015e4 <_malloc_trim_r+0x98>
 20015bc:	9009883a 	mov	r4,r18
 20015c0:	200e9c80 	call	200e9c8 <__malloc_unlock>
 20015c4:	0005883a 	mov	r2,zero
 20015c8:	dfc00417 	ldw	ra,16(sp)
 20015cc:	dcc00317 	ldw	r19,12(sp)
 20015d0:	dc800217 	ldw	r18,8(sp)
 20015d4:	dc400117 	ldw	r17,4(sp)
 20015d8:	dc000017 	ldw	r16,0(sp)
 20015dc:	dec00504 	addi	sp,sp,20
 20015e0:	f800283a 	ret
 20015e4:	040bc83a 	sub	r5,zero,r16
 20015e8:	9009883a 	mov	r4,r18
 20015ec:	20030e40 	call	20030e4 <_sbrk_r>
 20015f0:	00ffffc4 	movi	r3,-1
 20015f4:	10c00d26 	beq	r2,r3,200162c <_malloc_trim_r+0xe0>
 20015f8:	00c08074 	movhi	r3,513
 20015fc:	18d41a04 	addi	r3,r3,20584
 2001600:	18800017 	ldw	r2,0(r3)
 2001604:	99000217 	ldw	r4,8(r19)
 2001608:	8c23c83a 	sub	r17,r17,r16
 200160c:	8c400054 	ori	r17,r17,1
 2001610:	1421c83a 	sub	r16,r2,r16
 2001614:	24400115 	stw	r17,4(r4)
 2001618:	9009883a 	mov	r4,r18
 200161c:	1c000015 	stw	r16,0(r3)
 2001620:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2001624:	00800044 	movi	r2,1
 2001628:	003fe706 	br	20015c8 <__alt_data_end+0xfe0015c8>
 200162c:	000b883a 	mov	r5,zero
 2001630:	9009883a 	mov	r4,r18
 2001634:	20030e40 	call	20030e4 <_sbrk_r>
 2001638:	99000217 	ldw	r4,8(r19)
 200163c:	014003c4 	movi	r5,15
 2001640:	1107c83a 	sub	r3,r2,r4
 2001644:	28ffdd0e 	bge	r5,r3,20015bc <__alt_data_end+0xfe0015bc>
 2001648:	01408074 	movhi	r5,513
 200164c:	294d1504 	addi	r5,r5,13396
 2001650:	29400017 	ldw	r5,0(r5)
 2001654:	18c00054 	ori	r3,r3,1
 2001658:	20c00115 	stw	r3,4(r4)
 200165c:	00c08074 	movhi	r3,513
 2001660:	1145c83a 	sub	r2,r2,r5
 2001664:	18d41a04 	addi	r3,r3,20584
 2001668:	18800015 	stw	r2,0(r3)
 200166c:	003fd306 	br	20015bc <__alt_data_end+0xfe0015bc>

02001670 <_free_r>:
 2001670:	28004126 	beq	r5,zero,2001778 <_free_r+0x108>
 2001674:	defffd04 	addi	sp,sp,-12
 2001678:	dc400115 	stw	r17,4(sp)
 200167c:	dc000015 	stw	r16,0(sp)
 2001680:	2023883a 	mov	r17,r4
 2001684:	2821883a 	mov	r16,r5
 2001688:	dfc00215 	stw	ra,8(sp)
 200168c:	200e9a40 	call	200e9a4 <__malloc_lock>
 2001690:	81ffff17 	ldw	r7,-4(r16)
 2001694:	00bfff84 	movi	r2,-2
 2001698:	01008074 	movhi	r4,513
 200169c:	81bffe04 	addi	r6,r16,-8
 20016a0:	3884703a 	and	r2,r7,r2
 20016a4:	21076704 	addi	r4,r4,7580
 20016a8:	308b883a 	add	r5,r6,r2
 20016ac:	2a400117 	ldw	r9,4(r5)
 20016b0:	22000217 	ldw	r8,8(r4)
 20016b4:	00ffff04 	movi	r3,-4
 20016b8:	48c6703a 	and	r3,r9,r3
 20016bc:	2a005726 	beq	r5,r8,200181c <_free_r+0x1ac>
 20016c0:	28c00115 	stw	r3,4(r5)
 20016c4:	39c0004c 	andi	r7,r7,1
 20016c8:	3800091e 	bne	r7,zero,20016f0 <_free_r+0x80>
 20016cc:	823ffe17 	ldw	r8,-8(r16)
 20016d0:	22400204 	addi	r9,r4,8
 20016d4:	320dc83a 	sub	r6,r6,r8
 20016d8:	31c00217 	ldw	r7,8(r6)
 20016dc:	1205883a 	add	r2,r2,r8
 20016e0:	3a406526 	beq	r7,r9,2001878 <_free_r+0x208>
 20016e4:	32000317 	ldw	r8,12(r6)
 20016e8:	3a000315 	stw	r8,12(r7)
 20016ec:	41c00215 	stw	r7,8(r8)
 20016f0:	28cf883a 	add	r7,r5,r3
 20016f4:	39c00117 	ldw	r7,4(r7)
 20016f8:	39c0004c 	andi	r7,r7,1
 20016fc:	38003a26 	beq	r7,zero,20017e8 <_free_r+0x178>
 2001700:	10c00054 	ori	r3,r2,1
 2001704:	30c00115 	stw	r3,4(r6)
 2001708:	3087883a 	add	r3,r6,r2
 200170c:	18800015 	stw	r2,0(r3)
 2001710:	00c07fc4 	movi	r3,511
 2001714:	18801936 	bltu	r3,r2,200177c <_free_r+0x10c>
 2001718:	1004d0fa 	srli	r2,r2,3
 200171c:	01c00044 	movi	r7,1
 2001720:	21400117 	ldw	r5,4(r4)
 2001724:	10c00044 	addi	r3,r2,1
 2001728:	18c7883a 	add	r3,r3,r3
 200172c:	1005d0ba 	srai	r2,r2,2
 2001730:	18c7883a 	add	r3,r3,r3
 2001734:	18c7883a 	add	r3,r3,r3
 2001738:	1907883a 	add	r3,r3,r4
 200173c:	3884983a 	sll	r2,r7,r2
 2001740:	19c00017 	ldw	r7,0(r3)
 2001744:	1a3ffe04 	addi	r8,r3,-8
 2001748:	1144b03a 	or	r2,r2,r5
 200174c:	32000315 	stw	r8,12(r6)
 2001750:	31c00215 	stw	r7,8(r6)
 2001754:	20800115 	stw	r2,4(r4)
 2001758:	19800015 	stw	r6,0(r3)
 200175c:	39800315 	stw	r6,12(r7)
 2001760:	8809883a 	mov	r4,r17
 2001764:	dfc00217 	ldw	ra,8(sp)
 2001768:	dc400117 	ldw	r17,4(sp)
 200176c:	dc000017 	ldw	r16,0(sp)
 2001770:	dec00304 	addi	sp,sp,12
 2001774:	200e9c81 	jmpi	200e9c8 <__malloc_unlock>
 2001778:	f800283a 	ret
 200177c:	100ad27a 	srli	r5,r2,9
 2001780:	00c00104 	movi	r3,4
 2001784:	19404a36 	bltu	r3,r5,20018b0 <_free_r+0x240>
 2001788:	100ad1ba 	srli	r5,r2,6
 200178c:	28c00e44 	addi	r3,r5,57
 2001790:	18c7883a 	add	r3,r3,r3
 2001794:	29400e04 	addi	r5,r5,56
 2001798:	18c7883a 	add	r3,r3,r3
 200179c:	18c7883a 	add	r3,r3,r3
 20017a0:	1909883a 	add	r4,r3,r4
 20017a4:	20c00017 	ldw	r3,0(r4)
 20017a8:	01c08074 	movhi	r7,513
 20017ac:	213ffe04 	addi	r4,r4,-8
 20017b0:	39c76704 	addi	r7,r7,7580
 20017b4:	20c04426 	beq	r4,r3,20018c8 <_free_r+0x258>
 20017b8:	01ffff04 	movi	r7,-4
 20017bc:	19400117 	ldw	r5,4(r3)
 20017c0:	29ca703a 	and	r5,r5,r7
 20017c4:	1140022e 	bgeu	r2,r5,20017d0 <_free_r+0x160>
 20017c8:	18c00217 	ldw	r3,8(r3)
 20017cc:	20fffb1e 	bne	r4,r3,20017bc <__alt_data_end+0xfe0017bc>
 20017d0:	19000317 	ldw	r4,12(r3)
 20017d4:	31000315 	stw	r4,12(r6)
 20017d8:	30c00215 	stw	r3,8(r6)
 20017dc:	21800215 	stw	r6,8(r4)
 20017e0:	19800315 	stw	r6,12(r3)
 20017e4:	003fde06 	br	2001760 <__alt_data_end+0xfe001760>
 20017e8:	29c00217 	ldw	r7,8(r5)
 20017ec:	10c5883a 	add	r2,r2,r3
 20017f0:	00c08074 	movhi	r3,513
 20017f4:	18c76904 	addi	r3,r3,7588
 20017f8:	38c03b26 	beq	r7,r3,20018e8 <_free_r+0x278>
 20017fc:	2a000317 	ldw	r8,12(r5)
 2001800:	11400054 	ori	r5,r2,1
 2001804:	3087883a 	add	r3,r6,r2
 2001808:	3a000315 	stw	r8,12(r7)
 200180c:	41c00215 	stw	r7,8(r8)
 2001810:	31400115 	stw	r5,4(r6)
 2001814:	18800015 	stw	r2,0(r3)
 2001818:	003fbd06 	br	2001710 <__alt_data_end+0xfe001710>
 200181c:	39c0004c 	andi	r7,r7,1
 2001820:	10c5883a 	add	r2,r2,r3
 2001824:	3800071e 	bne	r7,zero,2001844 <_free_r+0x1d4>
 2001828:	81fffe17 	ldw	r7,-8(r16)
 200182c:	31cdc83a 	sub	r6,r6,r7
 2001830:	30c00317 	ldw	r3,12(r6)
 2001834:	31400217 	ldw	r5,8(r6)
 2001838:	11c5883a 	add	r2,r2,r7
 200183c:	28c00315 	stw	r3,12(r5)
 2001840:	19400215 	stw	r5,8(r3)
 2001844:	10c00054 	ori	r3,r2,1
 2001848:	30c00115 	stw	r3,4(r6)
 200184c:	00c08074 	movhi	r3,513
 2001850:	18cd1604 	addi	r3,r3,13400
 2001854:	18c00017 	ldw	r3,0(r3)
 2001858:	21800215 	stw	r6,8(r4)
 200185c:	10ffc036 	bltu	r2,r3,2001760 <__alt_data_end+0xfe001760>
 2001860:	00808074 	movhi	r2,513
 2001864:	10940f04 	addi	r2,r2,20540
 2001868:	11400017 	ldw	r5,0(r2)
 200186c:	8809883a 	mov	r4,r17
 2001870:	200154c0 	call	200154c <_malloc_trim_r>
 2001874:	003fba06 	br	2001760 <__alt_data_end+0xfe001760>
 2001878:	28c9883a 	add	r4,r5,r3
 200187c:	21000117 	ldw	r4,4(r4)
 2001880:	2100004c 	andi	r4,r4,1
 2001884:	2000391e 	bne	r4,zero,200196c <_free_r+0x2fc>
 2001888:	29c00217 	ldw	r7,8(r5)
 200188c:	29000317 	ldw	r4,12(r5)
 2001890:	1885883a 	add	r2,r3,r2
 2001894:	10c00054 	ori	r3,r2,1
 2001898:	39000315 	stw	r4,12(r7)
 200189c:	21c00215 	stw	r7,8(r4)
 20018a0:	30c00115 	stw	r3,4(r6)
 20018a4:	308d883a 	add	r6,r6,r2
 20018a8:	30800015 	stw	r2,0(r6)
 20018ac:	003fac06 	br	2001760 <__alt_data_end+0xfe001760>
 20018b0:	00c00504 	movi	r3,20
 20018b4:	19401536 	bltu	r3,r5,200190c <_free_r+0x29c>
 20018b8:	28c01704 	addi	r3,r5,92
 20018bc:	18c7883a 	add	r3,r3,r3
 20018c0:	294016c4 	addi	r5,r5,91
 20018c4:	003fb406 	br	2001798 <__alt_data_end+0xfe001798>
 20018c8:	280bd0ba 	srai	r5,r5,2
 20018cc:	00c00044 	movi	r3,1
 20018d0:	38800117 	ldw	r2,4(r7)
 20018d4:	194a983a 	sll	r5,r3,r5
 20018d8:	2007883a 	mov	r3,r4
 20018dc:	2884b03a 	or	r2,r5,r2
 20018e0:	38800115 	stw	r2,4(r7)
 20018e4:	003fbb06 	br	20017d4 <__alt_data_end+0xfe0017d4>
 20018e8:	21800515 	stw	r6,20(r4)
 20018ec:	21800415 	stw	r6,16(r4)
 20018f0:	10c00054 	ori	r3,r2,1
 20018f4:	31c00315 	stw	r7,12(r6)
 20018f8:	31c00215 	stw	r7,8(r6)
 20018fc:	30c00115 	stw	r3,4(r6)
 2001900:	308d883a 	add	r6,r6,r2
 2001904:	30800015 	stw	r2,0(r6)
 2001908:	003f9506 	br	2001760 <__alt_data_end+0xfe001760>
 200190c:	00c01504 	movi	r3,84
 2001910:	19400536 	bltu	r3,r5,2001928 <_free_r+0x2b8>
 2001914:	100ad33a 	srli	r5,r2,12
 2001918:	28c01bc4 	addi	r3,r5,111
 200191c:	18c7883a 	add	r3,r3,r3
 2001920:	29401b84 	addi	r5,r5,110
 2001924:	003f9c06 	br	2001798 <__alt_data_end+0xfe001798>
 2001928:	00c05504 	movi	r3,340
 200192c:	19400536 	bltu	r3,r5,2001944 <_free_r+0x2d4>
 2001930:	100ad3fa 	srli	r5,r2,15
 2001934:	28c01e04 	addi	r3,r5,120
 2001938:	18c7883a 	add	r3,r3,r3
 200193c:	29401dc4 	addi	r5,r5,119
 2001940:	003f9506 	br	2001798 <__alt_data_end+0xfe001798>
 2001944:	00c15504 	movi	r3,1364
 2001948:	19400536 	bltu	r3,r5,2001960 <_free_r+0x2f0>
 200194c:	100ad4ba 	srli	r5,r2,18
 2001950:	28c01f44 	addi	r3,r5,125
 2001954:	18c7883a 	add	r3,r3,r3
 2001958:	29401f04 	addi	r5,r5,124
 200195c:	003f8e06 	br	2001798 <__alt_data_end+0xfe001798>
 2001960:	00c03f84 	movi	r3,254
 2001964:	01401f84 	movi	r5,126
 2001968:	003f8b06 	br	2001798 <__alt_data_end+0xfe001798>
 200196c:	10c00054 	ori	r3,r2,1
 2001970:	30c00115 	stw	r3,4(r6)
 2001974:	308d883a 	add	r6,r6,r2
 2001978:	30800015 	stw	r2,0(r6)
 200197c:	003f7806 	br	2001760 <__alt_data_end+0xfe001760>

02001980 <_fseek_r>:
 2001980:	20019a01 	jmpi	20019a0 <_fseeko_r>

02001984 <fseek>:
 2001984:	00808074 	movhi	r2,513
 2001988:	108d1404 	addi	r2,r2,13392
 200198c:	300f883a 	mov	r7,r6
 2001990:	280d883a 	mov	r6,r5
 2001994:	200b883a 	mov	r5,r4
 2001998:	11000017 	ldw	r4,0(r2)
 200199c:	20019a01 	jmpi	20019a0 <_fseeko_r>

020019a0 <_fseeko_r>:
 20019a0:	deffe804 	addi	sp,sp,-96
 20019a4:	dd401415 	stw	r21,80(sp)
 20019a8:	dc801115 	stw	r18,68(sp)
 20019ac:	dc401015 	stw	r17,64(sp)
 20019b0:	dc000f15 	stw	r16,60(sp)
 20019b4:	dfc01715 	stw	ra,92(sp)
 20019b8:	ddc01615 	stw	r23,88(sp)
 20019bc:	dd801515 	stw	r22,84(sp)
 20019c0:	dd001315 	stw	r20,76(sp)
 20019c4:	dcc01215 	stw	r19,72(sp)
 20019c8:	2023883a 	mov	r17,r4
 20019cc:	2821883a 	mov	r16,r5
 20019d0:	302b883a 	mov	r21,r6
 20019d4:	3825883a 	mov	r18,r7
 20019d8:	20000226 	beq	r4,zero,20019e4 <_fseeko_r+0x44>
 20019dc:	20800e17 	ldw	r2,56(r4)
 20019e0:	10005a26 	beq	r2,zero,2001b4c <_fseeko_r+0x1ac>
 20019e4:	8080030b 	ldhu	r2,12(r16)
 20019e8:	00c04204 	movi	r3,264
 20019ec:	1080420c 	andi	r2,r2,264
 20019f0:	10c05b26 	beq	r2,r3,2001b60 <_fseeko_r+0x1c0>
 20019f4:	85000a17 	ldw	r20,40(r16)
 20019f8:	a000f626 	beq	r20,zero,2001dd4 <_fseeko_r+0x434>
 20019fc:	00800044 	movi	r2,1
 2001a00:	90803e26 	beq	r18,r2,2001afc <_fseeko_r+0x15c>
 2001a04:	00800084 	movi	r2,2
 2001a08:	90801026 	beq	r18,r2,2001a4c <_fseeko_r+0xac>
 2001a0c:	90000f26 	beq	r18,zero,2001a4c <_fseeko_r+0xac>
 2001a10:	00800584 	movi	r2,22
 2001a14:	88800015 	stw	r2,0(r17)
 2001a18:	04ffffc4 	movi	r19,-1
 2001a1c:	9805883a 	mov	r2,r19
 2001a20:	dfc01717 	ldw	ra,92(sp)
 2001a24:	ddc01617 	ldw	r23,88(sp)
 2001a28:	dd801517 	ldw	r22,84(sp)
 2001a2c:	dd401417 	ldw	r21,80(sp)
 2001a30:	dd001317 	ldw	r20,76(sp)
 2001a34:	dcc01217 	ldw	r19,72(sp)
 2001a38:	dc801117 	ldw	r18,68(sp)
 2001a3c:	dc401017 	ldw	r17,64(sp)
 2001a40:	dc000f17 	ldw	r16,60(sp)
 2001a44:	dec01804 	addi	sp,sp,96
 2001a48:	f800283a 	ret
 2001a4c:	80800417 	ldw	r2,16(r16)
 2001a50:	002f883a 	mov	r23,zero
 2001a54:	0027883a 	mov	r19,zero
 2001a58:	1000cb26 	beq	r2,zero,2001d88 <_fseeko_r+0x3e8>
 2001a5c:	8080030b 	ldhu	r2,12(r16)
 2001a60:	10c2068c 	andi	r3,r2,2074
 2001a64:	1800071e 	bne	r3,zero,2001a84 <_fseeko_r+0xe4>
 2001a68:	10c1000c 	andi	r3,r2,1024
 2001a6c:	1800451e 	bne	r3,zero,2001b84 <_fseeko_r+0x1e4>
 2001a70:	00c08034 	movhi	r3,512
 2001a74:	18cc8404 	addi	r3,r3,12816
 2001a78:	a0c0b726 	beq	r20,r3,2001d58 <_fseeko_r+0x3b8>
 2001a7c:	10820014 	ori	r2,r2,2048
 2001a80:	8080030d 	sth	r2,12(r16)
 2001a84:	800b883a 	mov	r5,r16
 2001a88:	8809883a 	mov	r4,r17
 2001a8c:	2000d940 	call	2000d94 <_fflush_r>
 2001a90:	1027883a 	mov	r19,r2
 2001a94:	103fe01e 	bne	r2,zero,2001a18 <__alt_data_end+0xfe001a18>
 2001a98:	81400717 	ldw	r5,28(r16)
 2001a9c:	900f883a 	mov	r7,r18
 2001aa0:	a80d883a 	mov	r6,r21
 2001aa4:	8809883a 	mov	r4,r17
 2001aa8:	a03ee83a 	callr	r20
 2001aac:	00ffffc4 	movi	r3,-1
 2001ab0:	10ffd926 	beq	r2,r3,2001a18 <__alt_data_end+0xfe001a18>
 2001ab4:	81400c17 	ldw	r5,48(r16)
 2001ab8:	28000526 	beq	r5,zero,2001ad0 <_fseeko_r+0x130>
 2001abc:	80801004 	addi	r2,r16,64
 2001ac0:	28800226 	beq	r5,r2,2001acc <_fseeko_r+0x12c>
 2001ac4:	8809883a 	mov	r4,r17
 2001ac8:	20016700 	call	2001670 <_free_r>
 2001acc:	80000c15 	stw	zero,48(r16)
 2001ad0:	8080030b 	ldhu	r2,12(r16)
 2001ad4:	80c00417 	ldw	r3,16(r16)
 2001ad8:	80000115 	stw	zero,4(r16)
 2001adc:	10bdf7cc 	andi	r2,r2,63455
 2001ae0:	80c00015 	stw	r3,0(r16)
 2001ae4:	8080030d 	sth	r2,12(r16)
 2001ae8:	01800204 	movi	r6,8
 2001aec:	000b883a 	mov	r5,zero
 2001af0:	81001704 	addi	r4,r16,92
 2001af4:	2002c2c0 	call	2002c2c <memset>
 2001af8:	003fc806 	br	2001a1c <__alt_data_end+0xfe001a1c>
 2001afc:	800b883a 	mov	r5,r16
 2001b00:	8809883a 	mov	r4,r17
 2001b04:	2000d940 	call	2000d94 <_fflush_r>
 2001b08:	8080030b 	ldhu	r2,12(r16)
 2001b0c:	10c4000c 	andi	r3,r2,4096
 2001b10:	18008726 	beq	r3,zero,2001d30 <_fseeko_r+0x390>
 2001b14:	84c01417 	ldw	r19,80(r16)
 2001b18:	10c0010c 	andi	r3,r2,4
 2001b1c:	1800431e 	bne	r3,zero,2001c2c <_fseeko_r+0x28c>
 2001b20:	1080020c 	andi	r2,r2,8
 2001b24:	10008026 	beq	r2,zero,2001d28 <_fseeko_r+0x388>
 2001b28:	80c00017 	ldw	r3,0(r16)
 2001b2c:	80800417 	ldw	r2,16(r16)
 2001b30:	18000226 	beq	r3,zero,2001b3c <_fseeko_r+0x19c>
 2001b34:	1887c83a 	sub	r3,r3,r2
 2001b38:	98e7883a 	add	r19,r19,r3
 2001b3c:	aceb883a 	add	r21,r21,r19
 2001b40:	05c00044 	movi	r23,1
 2001b44:	0025883a 	mov	r18,zero
 2001b48:	003fc306 	br	2001a58 <__alt_data_end+0xfe001a58>
 2001b4c:	20011800 	call	2001180 <__sinit>
 2001b50:	8080030b 	ldhu	r2,12(r16)
 2001b54:	00c04204 	movi	r3,264
 2001b58:	1080420c 	andi	r2,r2,264
 2001b5c:	10ffa51e 	bne	r2,r3,20019f4 <__alt_data_end+0xfe0019f4>
 2001b60:	800b883a 	mov	r5,r16
 2001b64:	8809883a 	mov	r4,r17
 2001b68:	2000d940 	call	2000d94 <_fflush_r>
 2001b6c:	003fa106 	br	20019f4 <__alt_data_end+0xfe0019f4>
 2001b70:	8080030b 	ldhu	r2,12(r16)
 2001b74:	00c10004 	movi	r3,1024
 2001b78:	80c01315 	stw	r3,76(r16)
 2001b7c:	10c4b03a 	or	r2,r2,r3
 2001b80:	8080030d 	sth	r2,12(r16)
 2001b84:	9000311e 	bne	r18,zero,2001c4c <_fseeko_r+0x2ac>
 2001b88:	a82d883a 	mov	r22,r21
 2001b8c:	b800371e 	bne	r23,zero,2001c6c <_fseeko_r+0x2cc>
 2001b90:	8080030b 	ldhu	r2,12(r16)
 2001b94:	1084000c 	andi	r2,r2,4096
 2001b98:	10007f26 	beq	r2,zero,2001d98 <_fseeko_r+0x3f8>
 2001b9c:	80801417 	ldw	r2,80(r16)
 2001ba0:	81800117 	ldw	r6,4(r16)
 2001ba4:	81400c17 	ldw	r5,48(r16)
 2001ba8:	11a7c83a 	sub	r19,r2,r6
 2001bac:	28008226 	beq	r5,zero,2001db8 <_fseeko_r+0x418>
 2001bb0:	81c00f17 	ldw	r7,60(r16)
 2001bb4:	99e7c83a 	sub	r19,r19,r7
 2001bb8:	81000e17 	ldw	r4,56(r16)
 2001bbc:	80800417 	ldw	r2,16(r16)
 2001bc0:	99a7883a 	add	r19,r19,r6
 2001bc4:	2087c83a 	sub	r3,r4,r2
 2001bc8:	98e7c83a 	sub	r19,r19,r3
 2001bcc:	38c7883a 	add	r3,r7,r3
 2001bd0:	b4c02b16 	blt	r22,r19,2001c80 <_fseeko_r+0x2e0>
 2001bd4:	98c9883a 	add	r4,r19,r3
 2001bd8:	b100292e 	bgeu	r22,r4,2001c80 <_fseeko_r+0x2e0>
 2001bdc:	b4e7c83a 	sub	r19,r22,r19
 2001be0:	14c5883a 	add	r2,r2,r19
 2001be4:	1ce7c83a 	sub	r19,r3,r19
 2001be8:	80800015 	stw	r2,0(r16)
 2001bec:	84c00115 	stw	r19,4(r16)
 2001bf0:	28000526 	beq	r5,zero,2001c08 <_fseeko_r+0x268>
 2001bf4:	80801004 	addi	r2,r16,64
 2001bf8:	28800226 	beq	r5,r2,2001c04 <_fseeko_r+0x264>
 2001bfc:	8809883a 	mov	r4,r17
 2001c00:	20016700 	call	2001670 <_free_r>
 2001c04:	80000c15 	stw	zero,48(r16)
 2001c08:	8080030b 	ldhu	r2,12(r16)
 2001c0c:	01800204 	movi	r6,8
 2001c10:	000b883a 	mov	r5,zero
 2001c14:	10bff7cc 	andi	r2,r2,65503
 2001c18:	8080030d 	sth	r2,12(r16)
 2001c1c:	81001704 	addi	r4,r16,92
 2001c20:	2002c2c0 	call	2002c2c <memset>
 2001c24:	0027883a 	mov	r19,zero
 2001c28:	003f7c06 	br	2001a1c <__alt_data_end+0xfe001a1c>
 2001c2c:	80c00117 	ldw	r3,4(r16)
 2001c30:	80800c17 	ldw	r2,48(r16)
 2001c34:	98e7c83a 	sub	r19,r19,r3
 2001c38:	10003b26 	beq	r2,zero,2001d28 <_fseeko_r+0x388>
 2001c3c:	80c00f17 	ldw	r3,60(r16)
 2001c40:	80800417 	ldw	r2,16(r16)
 2001c44:	98e7c83a 	sub	r19,r19,r3
 2001c48:	003fbc06 	br	2001b3c <__alt_data_end+0xfe001b3c>
 2001c4c:	8140038f 	ldh	r5,14(r16)
 2001c50:	d80d883a 	mov	r6,sp
 2001c54:	8809883a 	mov	r4,r17
 2001c58:	2001e000 	call	2001e00 <_fstat_r>
 2001c5c:	103f891e 	bne	r2,zero,2001a84 <__alt_data_end+0xfe001a84>
 2001c60:	dd800417 	ldw	r22,16(sp)
 2001c64:	adad883a 	add	r22,r21,r22
 2001c68:	b83fc926 	beq	r23,zero,2001b90 <__alt_data_end+0xfe001b90>
 2001c6c:	81400c17 	ldw	r5,48(r16)
 2001c70:	81800117 	ldw	r6,4(r16)
 2001c74:	28005026 	beq	r5,zero,2001db8 <_fseeko_r+0x418>
 2001c78:	81c00f17 	ldw	r7,60(r16)
 2001c7c:	003fce06 	br	2001bb8 <__alt_data_end+0xfe001bb8>
 2001c80:	84c01317 	ldw	r19,76(r16)
 2001c84:	81400717 	ldw	r5,28(r16)
 2001c88:	000f883a 	mov	r7,zero
 2001c8c:	04e7c83a 	sub	r19,zero,r19
 2001c90:	9da6703a 	and	r19,r19,r22
 2001c94:	980d883a 	mov	r6,r19
 2001c98:	8809883a 	mov	r4,r17
 2001c9c:	a03ee83a 	callr	r20
 2001ca0:	00ffffc4 	movi	r3,-1
 2001ca4:	10ff7726 	beq	r2,r3,2001a84 <__alt_data_end+0xfe001a84>
 2001ca8:	80800417 	ldw	r2,16(r16)
 2001cac:	81400c17 	ldw	r5,48(r16)
 2001cb0:	80000115 	stw	zero,4(r16)
 2001cb4:	80800015 	stw	r2,0(r16)
 2001cb8:	28000526 	beq	r5,zero,2001cd0 <_fseeko_r+0x330>
 2001cbc:	80801004 	addi	r2,r16,64
 2001cc0:	28800226 	beq	r5,r2,2001ccc <_fseeko_r+0x32c>
 2001cc4:	8809883a 	mov	r4,r17
 2001cc8:	20016700 	call	2001670 <_free_r>
 2001ccc:	80000c15 	stw	zero,48(r16)
 2001cd0:	8080030b 	ldhu	r2,12(r16)
 2001cd4:	b4e7c83a 	sub	r19,r22,r19
 2001cd8:	10bff7cc 	andi	r2,r2,65503
 2001cdc:	8080030d 	sth	r2,12(r16)
 2001ce0:	98000b26 	beq	r19,zero,2001d10 <_fseeko_r+0x370>
 2001ce4:	800b883a 	mov	r5,r16
 2001ce8:	8809883a 	mov	r4,r17
 2001cec:	2002f100 	call	2002f10 <__srefill_r>
 2001cf0:	103f641e 	bne	r2,zero,2001a84 <__alt_data_end+0xfe001a84>
 2001cf4:	80800117 	ldw	r2,4(r16)
 2001cf8:	14ff6236 	bltu	r2,r19,2001a84 <__alt_data_end+0xfe001a84>
 2001cfc:	80c00017 	ldw	r3,0(r16)
 2001d00:	14c5c83a 	sub	r2,r2,r19
 2001d04:	80800115 	stw	r2,4(r16)
 2001d08:	1ce7883a 	add	r19,r3,r19
 2001d0c:	84c00015 	stw	r19,0(r16)
 2001d10:	01800204 	movi	r6,8
 2001d14:	000b883a 	mov	r5,zero
 2001d18:	81001704 	addi	r4,r16,92
 2001d1c:	2002c2c0 	call	2002c2c <memset>
 2001d20:	0027883a 	mov	r19,zero
 2001d24:	003f3d06 	br	2001a1c <__alt_data_end+0xfe001a1c>
 2001d28:	80800417 	ldw	r2,16(r16)
 2001d2c:	003f8306 	br	2001b3c <__alt_data_end+0xfe001b3c>
 2001d30:	81400717 	ldw	r5,28(r16)
 2001d34:	900f883a 	mov	r7,r18
 2001d38:	000d883a 	mov	r6,zero
 2001d3c:	8809883a 	mov	r4,r17
 2001d40:	a03ee83a 	callr	r20
 2001d44:	1027883a 	mov	r19,r2
 2001d48:	00bfffc4 	movi	r2,-1
 2001d4c:	98bf3226 	beq	r19,r2,2001a18 <__alt_data_end+0xfe001a18>
 2001d50:	8080030b 	ldhu	r2,12(r16)
 2001d54:	003f7006 	br	2001b18 <__alt_data_end+0xfe001b18>
 2001d58:	8140038f 	ldh	r5,14(r16)
 2001d5c:	283f4716 	blt	r5,zero,2001a7c <__alt_data_end+0xfe001a7c>
 2001d60:	d80d883a 	mov	r6,sp
 2001d64:	8809883a 	mov	r4,r17
 2001d68:	2001e000 	call	2001e00 <_fstat_r>
 2001d6c:	1000041e 	bne	r2,zero,2001d80 <_fseeko_r+0x3e0>
 2001d70:	d8800117 	ldw	r2,4(sp)
 2001d74:	00e00014 	movui	r3,32768
 2001d78:	10bc000c 	andi	r2,r2,61440
 2001d7c:	10ff7c26 	beq	r2,r3,2001b70 <__alt_data_end+0xfe001b70>
 2001d80:	8080030b 	ldhu	r2,12(r16)
 2001d84:	003f3d06 	br	2001a7c <__alt_data_end+0xfe001a7c>
 2001d88:	800b883a 	mov	r5,r16
 2001d8c:	8809883a 	mov	r4,r17
 2001d90:	20020f40 	call	20020f4 <__smakebuf_r>
 2001d94:	003f3106 	br	2001a5c <__alt_data_end+0xfe001a5c>
 2001d98:	81400717 	ldw	r5,28(r16)
 2001d9c:	01c00044 	movi	r7,1
 2001da0:	000d883a 	mov	r6,zero
 2001da4:	8809883a 	mov	r4,r17
 2001da8:	a03ee83a 	callr	r20
 2001dac:	00ffffc4 	movi	r3,-1
 2001db0:	10ff7b1e 	bne	r2,r3,2001ba0 <__alt_data_end+0xfe001ba0>
 2001db4:	003f3306 	br	2001a84 <__alt_data_end+0xfe001a84>
 2001db8:	80c00017 	ldw	r3,0(r16)
 2001dbc:	80800417 	ldw	r2,16(r16)
 2001dc0:	000b883a 	mov	r5,zero
 2001dc4:	1887c83a 	sub	r3,r3,r2
 2001dc8:	98e7c83a 	sub	r19,r19,r3
 2001dcc:	30c7883a 	add	r3,r6,r3
 2001dd0:	003f7f06 	br	2001bd0 <__alt_data_end+0xfe001bd0>
 2001dd4:	00800744 	movi	r2,29
 2001dd8:	88800015 	stw	r2,0(r17)
 2001ddc:	04ffffc4 	movi	r19,-1
 2001de0:	003f0e06 	br	2001a1c <__alt_data_end+0xfe001a1c>

02001de4 <fseeko>:
 2001de4:	00808074 	movhi	r2,513
 2001de8:	108d1404 	addi	r2,r2,13392
 2001dec:	300f883a 	mov	r7,r6
 2001df0:	280d883a 	mov	r6,r5
 2001df4:	200b883a 	mov	r5,r4
 2001df8:	11000017 	ldw	r4,0(r2)
 2001dfc:	20019a01 	jmpi	20019a0 <_fseeko_r>

02001e00 <_fstat_r>:
 2001e00:	defffd04 	addi	sp,sp,-12
 2001e04:	2805883a 	mov	r2,r5
 2001e08:	dc000015 	stw	r16,0(sp)
 2001e0c:	04008074 	movhi	r16,513
 2001e10:	dc400115 	stw	r17,4(sp)
 2001e14:	84140c04 	addi	r16,r16,20528
 2001e18:	2023883a 	mov	r17,r4
 2001e1c:	300b883a 	mov	r5,r6
 2001e20:	1009883a 	mov	r4,r2
 2001e24:	dfc00215 	stw	ra,8(sp)
 2001e28:	80000015 	stw	zero,0(r16)
 2001e2c:	200e5840 	call	200e584 <fstat>
 2001e30:	00ffffc4 	movi	r3,-1
 2001e34:	10c00526 	beq	r2,r3,2001e4c <_fstat_r+0x4c>
 2001e38:	dfc00217 	ldw	ra,8(sp)
 2001e3c:	dc400117 	ldw	r17,4(sp)
 2001e40:	dc000017 	ldw	r16,0(sp)
 2001e44:	dec00304 	addi	sp,sp,12
 2001e48:	f800283a 	ret
 2001e4c:	80c00017 	ldw	r3,0(r16)
 2001e50:	183ff926 	beq	r3,zero,2001e38 <__alt_data_end+0xfe001e38>
 2001e54:	88c00015 	stw	r3,0(r17)
 2001e58:	003ff706 	br	2001e38 <__alt_data_end+0xfe001e38>

02001e5c <_fwalk>:
 2001e5c:	defff704 	addi	sp,sp,-36
 2001e60:	dd000415 	stw	r20,16(sp)
 2001e64:	dfc00815 	stw	ra,32(sp)
 2001e68:	ddc00715 	stw	r23,28(sp)
 2001e6c:	dd800615 	stw	r22,24(sp)
 2001e70:	dd400515 	stw	r21,20(sp)
 2001e74:	dcc00315 	stw	r19,12(sp)
 2001e78:	dc800215 	stw	r18,8(sp)
 2001e7c:	dc400115 	stw	r17,4(sp)
 2001e80:	dc000015 	stw	r16,0(sp)
 2001e84:	2500b804 	addi	r20,r4,736
 2001e88:	a0002326 	beq	r20,zero,2001f18 <_fwalk+0xbc>
 2001e8c:	282b883a 	mov	r21,r5
 2001e90:	002f883a 	mov	r23,zero
 2001e94:	05800044 	movi	r22,1
 2001e98:	04ffffc4 	movi	r19,-1
 2001e9c:	a4400117 	ldw	r17,4(r20)
 2001ea0:	a4800217 	ldw	r18,8(r20)
 2001ea4:	8c7fffc4 	addi	r17,r17,-1
 2001ea8:	88000d16 	blt	r17,zero,2001ee0 <_fwalk+0x84>
 2001eac:	94000304 	addi	r16,r18,12
 2001eb0:	94800384 	addi	r18,r18,14
 2001eb4:	8080000b 	ldhu	r2,0(r16)
 2001eb8:	8c7fffc4 	addi	r17,r17,-1
 2001ebc:	813ffd04 	addi	r4,r16,-12
 2001ec0:	b080042e 	bgeu	r22,r2,2001ed4 <_fwalk+0x78>
 2001ec4:	9080000f 	ldh	r2,0(r18)
 2001ec8:	14c00226 	beq	r2,r19,2001ed4 <_fwalk+0x78>
 2001ecc:	a83ee83a 	callr	r21
 2001ed0:	b8aeb03a 	or	r23,r23,r2
 2001ed4:	84001a04 	addi	r16,r16,104
 2001ed8:	94801a04 	addi	r18,r18,104
 2001edc:	8cfff51e 	bne	r17,r19,2001eb4 <__alt_data_end+0xfe001eb4>
 2001ee0:	a5000017 	ldw	r20,0(r20)
 2001ee4:	a03fed1e 	bne	r20,zero,2001e9c <__alt_data_end+0xfe001e9c>
 2001ee8:	b805883a 	mov	r2,r23
 2001eec:	dfc00817 	ldw	ra,32(sp)
 2001ef0:	ddc00717 	ldw	r23,28(sp)
 2001ef4:	dd800617 	ldw	r22,24(sp)
 2001ef8:	dd400517 	ldw	r21,20(sp)
 2001efc:	dd000417 	ldw	r20,16(sp)
 2001f00:	dcc00317 	ldw	r19,12(sp)
 2001f04:	dc800217 	ldw	r18,8(sp)
 2001f08:	dc400117 	ldw	r17,4(sp)
 2001f0c:	dc000017 	ldw	r16,0(sp)
 2001f10:	dec00904 	addi	sp,sp,36
 2001f14:	f800283a 	ret
 2001f18:	002f883a 	mov	r23,zero
 2001f1c:	003ff206 	br	2001ee8 <__alt_data_end+0xfe001ee8>

02001f20 <_fwalk_reent>:
 2001f20:	defff704 	addi	sp,sp,-36
 2001f24:	dd000415 	stw	r20,16(sp)
 2001f28:	dfc00815 	stw	ra,32(sp)
 2001f2c:	ddc00715 	stw	r23,28(sp)
 2001f30:	dd800615 	stw	r22,24(sp)
 2001f34:	dd400515 	stw	r21,20(sp)
 2001f38:	dcc00315 	stw	r19,12(sp)
 2001f3c:	dc800215 	stw	r18,8(sp)
 2001f40:	dc400115 	stw	r17,4(sp)
 2001f44:	dc000015 	stw	r16,0(sp)
 2001f48:	2500b804 	addi	r20,r4,736
 2001f4c:	a0002326 	beq	r20,zero,2001fdc <_fwalk_reent+0xbc>
 2001f50:	282b883a 	mov	r21,r5
 2001f54:	2027883a 	mov	r19,r4
 2001f58:	002f883a 	mov	r23,zero
 2001f5c:	05800044 	movi	r22,1
 2001f60:	04bfffc4 	movi	r18,-1
 2001f64:	a4400117 	ldw	r17,4(r20)
 2001f68:	a4000217 	ldw	r16,8(r20)
 2001f6c:	8c7fffc4 	addi	r17,r17,-1
 2001f70:	88000c16 	blt	r17,zero,2001fa4 <_fwalk_reent+0x84>
 2001f74:	84000304 	addi	r16,r16,12
 2001f78:	8080000b 	ldhu	r2,0(r16)
 2001f7c:	8c7fffc4 	addi	r17,r17,-1
 2001f80:	817ffd04 	addi	r5,r16,-12
 2001f84:	b080052e 	bgeu	r22,r2,2001f9c <_fwalk_reent+0x7c>
 2001f88:	8080008f 	ldh	r2,2(r16)
 2001f8c:	9809883a 	mov	r4,r19
 2001f90:	14800226 	beq	r2,r18,2001f9c <_fwalk_reent+0x7c>
 2001f94:	a83ee83a 	callr	r21
 2001f98:	b8aeb03a 	or	r23,r23,r2
 2001f9c:	84001a04 	addi	r16,r16,104
 2001fa0:	8cbff51e 	bne	r17,r18,2001f78 <__alt_data_end+0xfe001f78>
 2001fa4:	a5000017 	ldw	r20,0(r20)
 2001fa8:	a03fee1e 	bne	r20,zero,2001f64 <__alt_data_end+0xfe001f64>
 2001fac:	b805883a 	mov	r2,r23
 2001fb0:	dfc00817 	ldw	ra,32(sp)
 2001fb4:	ddc00717 	ldw	r23,28(sp)
 2001fb8:	dd800617 	ldw	r22,24(sp)
 2001fbc:	dd400517 	ldw	r21,20(sp)
 2001fc0:	dd000417 	ldw	r20,16(sp)
 2001fc4:	dcc00317 	ldw	r19,12(sp)
 2001fc8:	dc800217 	ldw	r18,8(sp)
 2001fcc:	dc400117 	ldw	r17,4(sp)
 2001fd0:	dc000017 	ldw	r16,0(sp)
 2001fd4:	dec00904 	addi	sp,sp,36
 2001fd8:	f800283a 	ret
 2001fdc:	002f883a 	mov	r23,zero
 2001fe0:	003ff206 	br	2001fac <__alt_data_end+0xfe001fac>

02001fe4 <_fwrite_r>:
 2001fe4:	defff504 	addi	sp,sp,-44
 2001fe8:	dc400715 	stw	r17,28(sp)
 2001fec:	d9400315 	stw	r5,12(sp)
 2001ff0:	2023883a 	mov	r17,r4
 2001ff4:	300b883a 	mov	r5,r6
 2001ff8:	3809883a 	mov	r4,r7
 2001ffc:	dcc00915 	stw	r19,36(sp)
 2002000:	dc800815 	stw	r18,32(sp)
 2002004:	dc000615 	stw	r16,24(sp)
 2002008:	dfc00a15 	stw	ra,40(sp)
 200200c:	3027883a 	mov	r19,r6
 2002010:	3821883a 	mov	r16,r7
 2002014:	2000a4c0 	call	2000a4c <__mulsi3>
 2002018:	1025883a 	mov	r18,r2
 200201c:	d8800415 	stw	r2,16(sp)
 2002020:	d8800215 	stw	r2,8(sp)
 2002024:	d8800304 	addi	r2,sp,12
 2002028:	d8800015 	stw	r2,0(sp)
 200202c:	00800044 	movi	r2,1
 2002030:	d8800115 	stw	r2,4(sp)
 2002034:	d9400b17 	ldw	r5,44(sp)
 2002038:	88000226 	beq	r17,zero,2002044 <_fwrite_r+0x60>
 200203c:	88800e17 	ldw	r2,56(r17)
 2002040:	10001a26 	beq	r2,zero,20020ac <_fwrite_r+0xc8>
 2002044:	2880030b 	ldhu	r2,12(r5)
 2002048:	10c8000c 	andi	r3,r2,8192
 200204c:	1800061e 	bne	r3,zero,2002068 <_fwrite_r+0x84>
 2002050:	29001917 	ldw	r4,100(r5)
 2002054:	00f7ffc4 	movi	r3,-8193
 2002058:	10880014 	ori	r2,r2,8192
 200205c:	20c6703a 	and	r3,r4,r3
 2002060:	2880030d 	sth	r2,12(r5)
 2002064:	28c01915 	stw	r3,100(r5)
 2002068:	d80d883a 	mov	r6,sp
 200206c:	8809883a 	mov	r4,r17
 2002070:	20072240 	call	2007224 <__sfvwrite_r>
 2002074:	10000b26 	beq	r2,zero,20020a4 <_fwrite_r+0xc0>
 2002078:	d9000217 	ldw	r4,8(sp)
 200207c:	980b883a 	mov	r5,r19
 2002080:	9109c83a 	sub	r4,r18,r4
 2002084:	20009900 	call	2000990 <__udivsi3>
 2002088:	dfc00a17 	ldw	ra,40(sp)
 200208c:	dcc00917 	ldw	r19,36(sp)
 2002090:	dc800817 	ldw	r18,32(sp)
 2002094:	dc400717 	ldw	r17,28(sp)
 2002098:	dc000617 	ldw	r16,24(sp)
 200209c:	dec00b04 	addi	sp,sp,44
 20020a0:	f800283a 	ret
 20020a4:	8005883a 	mov	r2,r16
 20020a8:	003ff706 	br	2002088 <__alt_data_end+0xfe002088>
 20020ac:	8809883a 	mov	r4,r17
 20020b0:	d9400515 	stw	r5,20(sp)
 20020b4:	20011800 	call	2001180 <__sinit>
 20020b8:	d9400517 	ldw	r5,20(sp)
 20020bc:	003fe106 	br	2002044 <__alt_data_end+0xfe002044>

020020c0 <fwrite>:
 20020c0:	defffe04 	addi	sp,sp,-8
 20020c4:	00808074 	movhi	r2,513
 20020c8:	d9c00015 	stw	r7,0(sp)
 20020cc:	108d1404 	addi	r2,r2,13392
 20020d0:	300f883a 	mov	r7,r6
 20020d4:	280d883a 	mov	r6,r5
 20020d8:	200b883a 	mov	r5,r4
 20020dc:	11000017 	ldw	r4,0(r2)
 20020e0:	dfc00115 	stw	ra,4(sp)
 20020e4:	2001fe40 	call	2001fe4 <_fwrite_r>
 20020e8:	dfc00117 	ldw	ra,4(sp)
 20020ec:	dec00204 	addi	sp,sp,8
 20020f0:	f800283a 	ret

020020f4 <__smakebuf_r>:
 20020f4:	2880030b 	ldhu	r2,12(r5)
 20020f8:	10c0008c 	andi	r3,r2,2
 20020fc:	1800411e 	bne	r3,zero,2002204 <__smakebuf_r+0x110>
 2002100:	deffec04 	addi	sp,sp,-80
 2002104:	dc000f15 	stw	r16,60(sp)
 2002108:	2821883a 	mov	r16,r5
 200210c:	2940038f 	ldh	r5,14(r5)
 2002110:	dc401015 	stw	r17,64(sp)
 2002114:	dfc01315 	stw	ra,76(sp)
 2002118:	dcc01215 	stw	r19,72(sp)
 200211c:	dc801115 	stw	r18,68(sp)
 2002120:	2023883a 	mov	r17,r4
 2002124:	28001c16 	blt	r5,zero,2002198 <__smakebuf_r+0xa4>
 2002128:	d80d883a 	mov	r6,sp
 200212c:	2001e000 	call	2001e00 <_fstat_r>
 2002130:	10001816 	blt	r2,zero,2002194 <__smakebuf_r+0xa0>
 2002134:	d8800117 	ldw	r2,4(sp)
 2002138:	00e00014 	movui	r3,32768
 200213c:	10bc000c 	andi	r2,r2,61440
 2002140:	14c80020 	cmpeqi	r19,r2,8192
 2002144:	10c03726 	beq	r2,r3,2002224 <__smakebuf_r+0x130>
 2002148:	80c0030b 	ldhu	r3,12(r16)
 200214c:	18c20014 	ori	r3,r3,2048
 2002150:	80c0030d 	sth	r3,12(r16)
 2002154:	00c80004 	movi	r3,8192
 2002158:	10c0521e 	bne	r2,r3,20022a4 <__smakebuf_r+0x1b0>
 200215c:	8140038f 	ldh	r5,14(r16)
 2002160:	8809883a 	mov	r4,r17
 2002164:	20076ec0 	call	20076ec <_isatty_r>
 2002168:	10004c26 	beq	r2,zero,200229c <__smakebuf_r+0x1a8>
 200216c:	8080030b 	ldhu	r2,12(r16)
 2002170:	80c010c4 	addi	r3,r16,67
 2002174:	80c00015 	stw	r3,0(r16)
 2002178:	10800054 	ori	r2,r2,1
 200217c:	8080030d 	sth	r2,12(r16)
 2002180:	00800044 	movi	r2,1
 2002184:	80c00415 	stw	r3,16(r16)
 2002188:	80800515 	stw	r2,20(r16)
 200218c:	04810004 	movi	r18,1024
 2002190:	00000706 	br	20021b0 <__smakebuf_r+0xbc>
 2002194:	8080030b 	ldhu	r2,12(r16)
 2002198:	10c0200c 	andi	r3,r2,128
 200219c:	18001f1e 	bne	r3,zero,200221c <__smakebuf_r+0x128>
 20021a0:	04810004 	movi	r18,1024
 20021a4:	10820014 	ori	r2,r2,2048
 20021a8:	8080030d 	sth	r2,12(r16)
 20021ac:	0027883a 	mov	r19,zero
 20021b0:	900b883a 	mov	r5,r18
 20021b4:	8809883a 	mov	r4,r17
 20021b8:	20022d80 	call	20022d8 <_malloc_r>
 20021bc:	10002c26 	beq	r2,zero,2002270 <__smakebuf_r+0x17c>
 20021c0:	80c0030b 	ldhu	r3,12(r16)
 20021c4:	01008034 	movhi	r4,512
 20021c8:	21038a04 	addi	r4,r4,3624
 20021cc:	89000f15 	stw	r4,60(r17)
 20021d0:	18c02014 	ori	r3,r3,128
 20021d4:	80c0030d 	sth	r3,12(r16)
 20021d8:	80800015 	stw	r2,0(r16)
 20021dc:	80800415 	stw	r2,16(r16)
 20021e0:	84800515 	stw	r18,20(r16)
 20021e4:	98001a1e 	bne	r19,zero,2002250 <__smakebuf_r+0x15c>
 20021e8:	dfc01317 	ldw	ra,76(sp)
 20021ec:	dcc01217 	ldw	r19,72(sp)
 20021f0:	dc801117 	ldw	r18,68(sp)
 20021f4:	dc401017 	ldw	r17,64(sp)
 20021f8:	dc000f17 	ldw	r16,60(sp)
 20021fc:	dec01404 	addi	sp,sp,80
 2002200:	f800283a 	ret
 2002204:	288010c4 	addi	r2,r5,67
 2002208:	28800015 	stw	r2,0(r5)
 200220c:	28800415 	stw	r2,16(r5)
 2002210:	00800044 	movi	r2,1
 2002214:	28800515 	stw	r2,20(r5)
 2002218:	f800283a 	ret
 200221c:	04801004 	movi	r18,64
 2002220:	003fe006 	br	20021a4 <__alt_data_end+0xfe0021a4>
 2002224:	81000a17 	ldw	r4,40(r16)
 2002228:	00c08034 	movhi	r3,512
 200222c:	18cc8404 	addi	r3,r3,12816
 2002230:	20ffc51e 	bne	r4,r3,2002148 <__alt_data_end+0xfe002148>
 2002234:	8080030b 	ldhu	r2,12(r16)
 2002238:	04810004 	movi	r18,1024
 200223c:	84801315 	stw	r18,76(r16)
 2002240:	1484b03a 	or	r2,r2,r18
 2002244:	8080030d 	sth	r2,12(r16)
 2002248:	0027883a 	mov	r19,zero
 200224c:	003fd806 	br	20021b0 <__alt_data_end+0xfe0021b0>
 2002250:	8140038f 	ldh	r5,14(r16)
 2002254:	8809883a 	mov	r4,r17
 2002258:	20076ec0 	call	20076ec <_isatty_r>
 200225c:	103fe226 	beq	r2,zero,20021e8 <__alt_data_end+0xfe0021e8>
 2002260:	8080030b 	ldhu	r2,12(r16)
 2002264:	10800054 	ori	r2,r2,1
 2002268:	8080030d 	sth	r2,12(r16)
 200226c:	003fde06 	br	20021e8 <__alt_data_end+0xfe0021e8>
 2002270:	8080030b 	ldhu	r2,12(r16)
 2002274:	10c0800c 	andi	r3,r2,512
 2002278:	183fdb1e 	bne	r3,zero,20021e8 <__alt_data_end+0xfe0021e8>
 200227c:	10800094 	ori	r2,r2,2
 2002280:	80c010c4 	addi	r3,r16,67
 2002284:	8080030d 	sth	r2,12(r16)
 2002288:	00800044 	movi	r2,1
 200228c:	80c00015 	stw	r3,0(r16)
 2002290:	80c00415 	stw	r3,16(r16)
 2002294:	80800515 	stw	r2,20(r16)
 2002298:	003fd306 	br	20021e8 <__alt_data_end+0xfe0021e8>
 200229c:	04810004 	movi	r18,1024
 20022a0:	003fc306 	br	20021b0 <__alt_data_end+0xfe0021b0>
 20022a4:	0027883a 	mov	r19,zero
 20022a8:	04810004 	movi	r18,1024
 20022ac:	003fc006 	br	20021b0 <__alt_data_end+0xfe0021b0>

020022b0 <malloc>:
 20022b0:	00808074 	movhi	r2,513
 20022b4:	108d1404 	addi	r2,r2,13392
 20022b8:	200b883a 	mov	r5,r4
 20022bc:	11000017 	ldw	r4,0(r2)
 20022c0:	20022d81 	jmpi	20022d8 <_malloc_r>

020022c4 <free>:
 20022c4:	00808074 	movhi	r2,513
 20022c8:	108d1404 	addi	r2,r2,13392
 20022cc:	200b883a 	mov	r5,r4
 20022d0:	11000017 	ldw	r4,0(r2)
 20022d4:	20016701 	jmpi	2001670 <_free_r>

020022d8 <_malloc_r>:
 20022d8:	defff504 	addi	sp,sp,-44
 20022dc:	dc800315 	stw	r18,12(sp)
 20022e0:	dfc00a15 	stw	ra,40(sp)
 20022e4:	df000915 	stw	fp,36(sp)
 20022e8:	ddc00815 	stw	r23,32(sp)
 20022ec:	dd800715 	stw	r22,28(sp)
 20022f0:	dd400615 	stw	r21,24(sp)
 20022f4:	dd000515 	stw	r20,20(sp)
 20022f8:	dcc00415 	stw	r19,16(sp)
 20022fc:	dc400215 	stw	r17,8(sp)
 2002300:	dc000115 	stw	r16,4(sp)
 2002304:	288002c4 	addi	r2,r5,11
 2002308:	00c00584 	movi	r3,22
 200230c:	2025883a 	mov	r18,r4
 2002310:	18807f2e 	bgeu	r3,r2,2002510 <_malloc_r+0x238>
 2002314:	047ffe04 	movi	r17,-8
 2002318:	1462703a 	and	r17,r2,r17
 200231c:	8800a316 	blt	r17,zero,20025ac <_malloc_r+0x2d4>
 2002320:	8940a236 	bltu	r17,r5,20025ac <_malloc_r+0x2d4>
 2002324:	200e9a40 	call	200e9a4 <__malloc_lock>
 2002328:	00807dc4 	movi	r2,503
 200232c:	1441e92e 	bgeu	r2,r17,2002ad4 <_malloc_r+0x7fc>
 2002330:	8804d27a 	srli	r2,r17,9
 2002334:	1000a126 	beq	r2,zero,20025bc <_malloc_r+0x2e4>
 2002338:	00c00104 	movi	r3,4
 200233c:	18811e36 	bltu	r3,r2,20027b8 <_malloc_r+0x4e0>
 2002340:	8804d1ba 	srli	r2,r17,6
 2002344:	12000e44 	addi	r8,r2,57
 2002348:	11c00e04 	addi	r7,r2,56
 200234c:	4209883a 	add	r4,r8,r8
 2002350:	04c08074 	movhi	r19,513
 2002354:	2109883a 	add	r4,r4,r4
 2002358:	9cc76704 	addi	r19,r19,7580
 200235c:	2109883a 	add	r4,r4,r4
 2002360:	9909883a 	add	r4,r19,r4
 2002364:	24000117 	ldw	r16,4(r4)
 2002368:	213ffe04 	addi	r4,r4,-8
 200236c:	24009726 	beq	r4,r16,20025cc <_malloc_r+0x2f4>
 2002370:	80800117 	ldw	r2,4(r16)
 2002374:	01bfff04 	movi	r6,-4
 2002378:	014003c4 	movi	r5,15
 200237c:	1184703a 	and	r2,r2,r6
 2002380:	1447c83a 	sub	r3,r2,r17
 2002384:	28c00716 	blt	r5,r3,20023a4 <_malloc_r+0xcc>
 2002388:	1800920e 	bge	r3,zero,20025d4 <_malloc_r+0x2fc>
 200238c:	84000317 	ldw	r16,12(r16)
 2002390:	24008e26 	beq	r4,r16,20025cc <_malloc_r+0x2f4>
 2002394:	80800117 	ldw	r2,4(r16)
 2002398:	1184703a 	and	r2,r2,r6
 200239c:	1447c83a 	sub	r3,r2,r17
 20023a0:	28fff90e 	bge	r5,r3,2002388 <__alt_data_end+0xfe002388>
 20023a4:	3809883a 	mov	r4,r7
 20023a8:	01808074 	movhi	r6,513
 20023ac:	9c000417 	ldw	r16,16(r19)
 20023b0:	31876704 	addi	r6,r6,7580
 20023b4:	32000204 	addi	r8,r6,8
 20023b8:	82013426 	beq	r16,r8,200288c <_malloc_r+0x5b4>
 20023bc:	80c00117 	ldw	r3,4(r16)
 20023c0:	00bfff04 	movi	r2,-4
 20023c4:	188e703a 	and	r7,r3,r2
 20023c8:	3c45c83a 	sub	r2,r7,r17
 20023cc:	00c003c4 	movi	r3,15
 20023d0:	18811f16 	blt	r3,r2,2002850 <_malloc_r+0x578>
 20023d4:	32000515 	stw	r8,20(r6)
 20023d8:	32000415 	stw	r8,16(r6)
 20023dc:	10007f0e 	bge	r2,zero,20025dc <_malloc_r+0x304>
 20023e0:	00807fc4 	movi	r2,511
 20023e4:	11c0fd36 	bltu	r2,r7,20027dc <_malloc_r+0x504>
 20023e8:	3806d0fa 	srli	r3,r7,3
 20023ec:	01c00044 	movi	r7,1
 20023f0:	30800117 	ldw	r2,4(r6)
 20023f4:	19400044 	addi	r5,r3,1
 20023f8:	294b883a 	add	r5,r5,r5
 20023fc:	1807d0ba 	srai	r3,r3,2
 2002400:	294b883a 	add	r5,r5,r5
 2002404:	294b883a 	add	r5,r5,r5
 2002408:	298b883a 	add	r5,r5,r6
 200240c:	38c6983a 	sll	r3,r7,r3
 2002410:	29c00017 	ldw	r7,0(r5)
 2002414:	2a7ffe04 	addi	r9,r5,-8
 2002418:	1886b03a 	or	r3,r3,r2
 200241c:	82400315 	stw	r9,12(r16)
 2002420:	81c00215 	stw	r7,8(r16)
 2002424:	30c00115 	stw	r3,4(r6)
 2002428:	2c000015 	stw	r16,0(r5)
 200242c:	3c000315 	stw	r16,12(r7)
 2002430:	2005d0ba 	srai	r2,r4,2
 2002434:	01400044 	movi	r5,1
 2002438:	288a983a 	sll	r5,r5,r2
 200243c:	19406f36 	bltu	r3,r5,20025fc <_malloc_r+0x324>
 2002440:	28c4703a 	and	r2,r5,r3
 2002444:	10000a1e 	bne	r2,zero,2002470 <_malloc_r+0x198>
 2002448:	00bfff04 	movi	r2,-4
 200244c:	294b883a 	add	r5,r5,r5
 2002450:	2088703a 	and	r4,r4,r2
 2002454:	28c4703a 	and	r2,r5,r3
 2002458:	21000104 	addi	r4,r4,4
 200245c:	1000041e 	bne	r2,zero,2002470 <_malloc_r+0x198>
 2002460:	294b883a 	add	r5,r5,r5
 2002464:	28c4703a 	and	r2,r5,r3
 2002468:	21000104 	addi	r4,r4,4
 200246c:	103ffc26 	beq	r2,zero,2002460 <__alt_data_end+0xfe002460>
 2002470:	02bfff04 	movi	r10,-4
 2002474:	024003c4 	movi	r9,15
 2002478:	21800044 	addi	r6,r4,1
 200247c:	318d883a 	add	r6,r6,r6
 2002480:	318d883a 	add	r6,r6,r6
 2002484:	318d883a 	add	r6,r6,r6
 2002488:	998d883a 	add	r6,r19,r6
 200248c:	333ffe04 	addi	r12,r6,-8
 2002490:	2017883a 	mov	r11,r4
 2002494:	31800104 	addi	r6,r6,4
 2002498:	34000017 	ldw	r16,0(r6)
 200249c:	31fffd04 	addi	r7,r6,-12
 20024a0:	81c0041e 	bne	r16,r7,20024b4 <_malloc_r+0x1dc>
 20024a4:	0000fb06 	br	2002894 <_malloc_r+0x5bc>
 20024a8:	1801030e 	bge	r3,zero,20028b8 <_malloc_r+0x5e0>
 20024ac:	84000317 	ldw	r16,12(r16)
 20024b0:	81c0f826 	beq	r16,r7,2002894 <_malloc_r+0x5bc>
 20024b4:	80800117 	ldw	r2,4(r16)
 20024b8:	1284703a 	and	r2,r2,r10
 20024bc:	1447c83a 	sub	r3,r2,r17
 20024c0:	48fff90e 	bge	r9,r3,20024a8 <__alt_data_end+0xfe0024a8>
 20024c4:	80800317 	ldw	r2,12(r16)
 20024c8:	81000217 	ldw	r4,8(r16)
 20024cc:	89400054 	ori	r5,r17,1
 20024d0:	81400115 	stw	r5,4(r16)
 20024d4:	20800315 	stw	r2,12(r4)
 20024d8:	11000215 	stw	r4,8(r2)
 20024dc:	8463883a 	add	r17,r16,r17
 20024e0:	9c400515 	stw	r17,20(r19)
 20024e4:	9c400415 	stw	r17,16(r19)
 20024e8:	18800054 	ori	r2,r3,1
 20024ec:	88800115 	stw	r2,4(r17)
 20024f0:	8a000315 	stw	r8,12(r17)
 20024f4:	8a000215 	stw	r8,8(r17)
 20024f8:	88e3883a 	add	r17,r17,r3
 20024fc:	88c00015 	stw	r3,0(r17)
 2002500:	9009883a 	mov	r4,r18
 2002504:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2002508:	80800204 	addi	r2,r16,8
 200250c:	00001b06 	br	200257c <_malloc_r+0x2a4>
 2002510:	04400404 	movi	r17,16
 2002514:	89402536 	bltu	r17,r5,20025ac <_malloc_r+0x2d4>
 2002518:	200e9a40 	call	200e9a4 <__malloc_lock>
 200251c:	00800184 	movi	r2,6
 2002520:	01000084 	movi	r4,2
 2002524:	04c08074 	movhi	r19,513
 2002528:	1085883a 	add	r2,r2,r2
 200252c:	9cc76704 	addi	r19,r19,7580
 2002530:	1085883a 	add	r2,r2,r2
 2002534:	9885883a 	add	r2,r19,r2
 2002538:	14000117 	ldw	r16,4(r2)
 200253c:	10fffe04 	addi	r3,r2,-8
 2002540:	80c0d926 	beq	r16,r3,20028a8 <_malloc_r+0x5d0>
 2002544:	80c00117 	ldw	r3,4(r16)
 2002548:	81000317 	ldw	r4,12(r16)
 200254c:	00bfff04 	movi	r2,-4
 2002550:	1884703a 	and	r2,r3,r2
 2002554:	81400217 	ldw	r5,8(r16)
 2002558:	8085883a 	add	r2,r16,r2
 200255c:	10c00117 	ldw	r3,4(r2)
 2002560:	29000315 	stw	r4,12(r5)
 2002564:	21400215 	stw	r5,8(r4)
 2002568:	18c00054 	ori	r3,r3,1
 200256c:	10c00115 	stw	r3,4(r2)
 2002570:	9009883a 	mov	r4,r18
 2002574:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2002578:	80800204 	addi	r2,r16,8
 200257c:	dfc00a17 	ldw	ra,40(sp)
 2002580:	df000917 	ldw	fp,36(sp)
 2002584:	ddc00817 	ldw	r23,32(sp)
 2002588:	dd800717 	ldw	r22,28(sp)
 200258c:	dd400617 	ldw	r21,24(sp)
 2002590:	dd000517 	ldw	r20,20(sp)
 2002594:	dcc00417 	ldw	r19,16(sp)
 2002598:	dc800317 	ldw	r18,12(sp)
 200259c:	dc400217 	ldw	r17,8(sp)
 20025a0:	dc000117 	ldw	r16,4(sp)
 20025a4:	dec00b04 	addi	sp,sp,44
 20025a8:	f800283a 	ret
 20025ac:	00800304 	movi	r2,12
 20025b0:	90800015 	stw	r2,0(r18)
 20025b4:	0005883a 	mov	r2,zero
 20025b8:	003ff006 	br	200257c <__alt_data_end+0xfe00257c>
 20025bc:	01002004 	movi	r4,128
 20025c0:	02001004 	movi	r8,64
 20025c4:	01c00fc4 	movi	r7,63
 20025c8:	003f6106 	br	2002350 <__alt_data_end+0xfe002350>
 20025cc:	4009883a 	mov	r4,r8
 20025d0:	003f7506 	br	20023a8 <__alt_data_end+0xfe0023a8>
 20025d4:	81000317 	ldw	r4,12(r16)
 20025d8:	003fde06 	br	2002554 <__alt_data_end+0xfe002554>
 20025dc:	81c5883a 	add	r2,r16,r7
 20025e0:	11400117 	ldw	r5,4(r2)
 20025e4:	9009883a 	mov	r4,r18
 20025e8:	29400054 	ori	r5,r5,1
 20025ec:	11400115 	stw	r5,4(r2)
 20025f0:	200e9c80 	call	200e9c8 <__malloc_unlock>
 20025f4:	80800204 	addi	r2,r16,8
 20025f8:	003fe006 	br	200257c <__alt_data_end+0xfe00257c>
 20025fc:	9c000217 	ldw	r16,8(r19)
 2002600:	00bfff04 	movi	r2,-4
 2002604:	85800117 	ldw	r22,4(r16)
 2002608:	b0ac703a 	and	r22,r22,r2
 200260c:	b4400336 	bltu	r22,r17,200261c <_malloc_r+0x344>
 2002610:	b445c83a 	sub	r2,r22,r17
 2002614:	00c003c4 	movi	r3,15
 2002618:	18805d16 	blt	r3,r2,2002790 <_malloc_r+0x4b8>
 200261c:	05c08074 	movhi	r23,513
 2002620:	00808074 	movhi	r2,513
 2002624:	10940f04 	addi	r2,r2,20540
 2002628:	bdcd1504 	addi	r23,r23,13396
 200262c:	15400017 	ldw	r21,0(r2)
 2002630:	b8c00017 	ldw	r3,0(r23)
 2002634:	00bfffc4 	movi	r2,-1
 2002638:	858d883a 	add	r6,r16,r22
 200263c:	8d6b883a 	add	r21,r17,r21
 2002640:	1880ea26 	beq	r3,r2,20029ec <_malloc_r+0x714>
 2002644:	ad4403c4 	addi	r21,r21,4111
 2002648:	00bc0004 	movi	r2,-4096
 200264c:	a8aa703a 	and	r21,r21,r2
 2002650:	a80b883a 	mov	r5,r21
 2002654:	9009883a 	mov	r4,r18
 2002658:	d9800015 	stw	r6,0(sp)
 200265c:	20030e40 	call	20030e4 <_sbrk_r>
 2002660:	1029883a 	mov	r20,r2
 2002664:	00bfffc4 	movi	r2,-1
 2002668:	d9800017 	ldw	r6,0(sp)
 200266c:	a080e826 	beq	r20,r2,2002a10 <_malloc_r+0x738>
 2002670:	a180a636 	bltu	r20,r6,200290c <_malloc_r+0x634>
 2002674:	07008074 	movhi	fp,513
 2002678:	e7141a04 	addi	fp,fp,20584
 200267c:	e0800017 	ldw	r2,0(fp)
 2002680:	a887883a 	add	r3,r21,r2
 2002684:	e0c00015 	stw	r3,0(fp)
 2002688:	3500e626 	beq	r6,r20,2002a24 <_malloc_r+0x74c>
 200268c:	b9000017 	ldw	r4,0(r23)
 2002690:	00bfffc4 	movi	r2,-1
 2002694:	2080ee26 	beq	r4,r2,2002a50 <_malloc_r+0x778>
 2002698:	a185c83a 	sub	r2,r20,r6
 200269c:	10c5883a 	add	r2,r2,r3
 20026a0:	e0800015 	stw	r2,0(fp)
 20026a4:	a0c001cc 	andi	r3,r20,7
 20026a8:	1800bc26 	beq	r3,zero,200299c <_malloc_r+0x6c4>
 20026ac:	a0e9c83a 	sub	r20,r20,r3
 20026b0:	00840204 	movi	r2,4104
 20026b4:	a5000204 	addi	r20,r20,8
 20026b8:	10c7c83a 	sub	r3,r2,r3
 20026bc:	a545883a 	add	r2,r20,r21
 20026c0:	1083ffcc 	andi	r2,r2,4095
 20026c4:	18abc83a 	sub	r21,r3,r2
 20026c8:	a80b883a 	mov	r5,r21
 20026cc:	9009883a 	mov	r4,r18
 20026d0:	20030e40 	call	20030e4 <_sbrk_r>
 20026d4:	00ffffc4 	movi	r3,-1
 20026d8:	10c0e126 	beq	r2,r3,2002a60 <_malloc_r+0x788>
 20026dc:	1505c83a 	sub	r2,r2,r20
 20026e0:	1545883a 	add	r2,r2,r21
 20026e4:	10800054 	ori	r2,r2,1
 20026e8:	e0c00017 	ldw	r3,0(fp)
 20026ec:	9d000215 	stw	r20,8(r19)
 20026f0:	a0800115 	stw	r2,4(r20)
 20026f4:	a8c7883a 	add	r3,r21,r3
 20026f8:	e0c00015 	stw	r3,0(fp)
 20026fc:	84c00e26 	beq	r16,r19,2002738 <_malloc_r+0x460>
 2002700:	018003c4 	movi	r6,15
 2002704:	3580a72e 	bgeu	r6,r22,20029a4 <_malloc_r+0x6cc>
 2002708:	81400117 	ldw	r5,4(r16)
 200270c:	013ffe04 	movi	r4,-8
 2002710:	b0bffd04 	addi	r2,r22,-12
 2002714:	1104703a 	and	r2,r2,r4
 2002718:	2900004c 	andi	r4,r5,1
 200271c:	2088b03a 	or	r4,r4,r2
 2002720:	81000115 	stw	r4,4(r16)
 2002724:	01400144 	movi	r5,5
 2002728:	8089883a 	add	r4,r16,r2
 200272c:	21400115 	stw	r5,4(r4)
 2002730:	21400215 	stw	r5,8(r4)
 2002734:	3080cd36 	bltu	r6,r2,2002a6c <_malloc_r+0x794>
 2002738:	00808074 	movhi	r2,513
 200273c:	10940e04 	addi	r2,r2,20536
 2002740:	11000017 	ldw	r4,0(r2)
 2002744:	20c0012e 	bgeu	r4,r3,200274c <_malloc_r+0x474>
 2002748:	10c00015 	stw	r3,0(r2)
 200274c:	00808074 	movhi	r2,513
 2002750:	10940d04 	addi	r2,r2,20532
 2002754:	11000017 	ldw	r4,0(r2)
 2002758:	9c000217 	ldw	r16,8(r19)
 200275c:	20c0012e 	bgeu	r4,r3,2002764 <_malloc_r+0x48c>
 2002760:	10c00015 	stw	r3,0(r2)
 2002764:	80c00117 	ldw	r3,4(r16)
 2002768:	00bfff04 	movi	r2,-4
 200276c:	1886703a 	and	r3,r3,r2
 2002770:	1c45c83a 	sub	r2,r3,r17
 2002774:	1c400236 	bltu	r3,r17,2002780 <_malloc_r+0x4a8>
 2002778:	00c003c4 	movi	r3,15
 200277c:	18800416 	blt	r3,r2,2002790 <_malloc_r+0x4b8>
 2002780:	9009883a 	mov	r4,r18
 2002784:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2002788:	0005883a 	mov	r2,zero
 200278c:	003f7b06 	br	200257c <__alt_data_end+0xfe00257c>
 2002790:	88c00054 	ori	r3,r17,1
 2002794:	80c00115 	stw	r3,4(r16)
 2002798:	8463883a 	add	r17,r16,r17
 200279c:	10800054 	ori	r2,r2,1
 20027a0:	9c400215 	stw	r17,8(r19)
 20027a4:	88800115 	stw	r2,4(r17)
 20027a8:	9009883a 	mov	r4,r18
 20027ac:	200e9c80 	call	200e9c8 <__malloc_unlock>
 20027b0:	80800204 	addi	r2,r16,8
 20027b4:	003f7106 	br	200257c <__alt_data_end+0xfe00257c>
 20027b8:	00c00504 	movi	r3,20
 20027bc:	18804a2e 	bgeu	r3,r2,20028e8 <_malloc_r+0x610>
 20027c0:	00c01504 	movi	r3,84
 20027c4:	18806e36 	bltu	r3,r2,2002980 <_malloc_r+0x6a8>
 20027c8:	8804d33a 	srli	r2,r17,12
 20027cc:	12001bc4 	addi	r8,r2,111
 20027d0:	11c01b84 	addi	r7,r2,110
 20027d4:	4209883a 	add	r4,r8,r8
 20027d8:	003edd06 	br	2002350 <__alt_data_end+0xfe002350>
 20027dc:	3804d27a 	srli	r2,r7,9
 20027e0:	00c00104 	movi	r3,4
 20027e4:	1880442e 	bgeu	r3,r2,20028f8 <_malloc_r+0x620>
 20027e8:	00c00504 	movi	r3,20
 20027ec:	18808136 	bltu	r3,r2,20029f4 <_malloc_r+0x71c>
 20027f0:	11401704 	addi	r5,r2,92
 20027f4:	10c016c4 	addi	r3,r2,91
 20027f8:	294b883a 	add	r5,r5,r5
 20027fc:	294b883a 	add	r5,r5,r5
 2002800:	294b883a 	add	r5,r5,r5
 2002804:	994b883a 	add	r5,r19,r5
 2002808:	28800017 	ldw	r2,0(r5)
 200280c:	01808074 	movhi	r6,513
 2002810:	297ffe04 	addi	r5,r5,-8
 2002814:	31876704 	addi	r6,r6,7580
 2002818:	28806526 	beq	r5,r2,20029b0 <_malloc_r+0x6d8>
 200281c:	01bfff04 	movi	r6,-4
 2002820:	10c00117 	ldw	r3,4(r2)
 2002824:	1986703a 	and	r3,r3,r6
 2002828:	38c0022e 	bgeu	r7,r3,2002834 <_malloc_r+0x55c>
 200282c:	10800217 	ldw	r2,8(r2)
 2002830:	28bffb1e 	bne	r5,r2,2002820 <__alt_data_end+0xfe002820>
 2002834:	11400317 	ldw	r5,12(r2)
 2002838:	98c00117 	ldw	r3,4(r19)
 200283c:	81400315 	stw	r5,12(r16)
 2002840:	80800215 	stw	r2,8(r16)
 2002844:	2c000215 	stw	r16,8(r5)
 2002848:	14000315 	stw	r16,12(r2)
 200284c:	003ef806 	br	2002430 <__alt_data_end+0xfe002430>
 2002850:	88c00054 	ori	r3,r17,1
 2002854:	80c00115 	stw	r3,4(r16)
 2002858:	8463883a 	add	r17,r16,r17
 200285c:	34400515 	stw	r17,20(r6)
 2002860:	34400415 	stw	r17,16(r6)
 2002864:	10c00054 	ori	r3,r2,1
 2002868:	8a000315 	stw	r8,12(r17)
 200286c:	8a000215 	stw	r8,8(r17)
 2002870:	88c00115 	stw	r3,4(r17)
 2002874:	88a3883a 	add	r17,r17,r2
 2002878:	88800015 	stw	r2,0(r17)
 200287c:	9009883a 	mov	r4,r18
 2002880:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2002884:	80800204 	addi	r2,r16,8
 2002888:	003f3c06 	br	200257c <__alt_data_end+0xfe00257c>
 200288c:	30c00117 	ldw	r3,4(r6)
 2002890:	003ee706 	br	2002430 <__alt_data_end+0xfe002430>
 2002894:	5ac00044 	addi	r11,r11,1
 2002898:	588000cc 	andi	r2,r11,3
 200289c:	31800204 	addi	r6,r6,8
 20028a0:	103efd1e 	bne	r2,zero,2002498 <__alt_data_end+0xfe002498>
 20028a4:	00002406 	br	2002938 <_malloc_r+0x660>
 20028a8:	14000317 	ldw	r16,12(r2)
 20028ac:	143f251e 	bne	r2,r16,2002544 <__alt_data_end+0xfe002544>
 20028b0:	21000084 	addi	r4,r4,2
 20028b4:	003ebc06 	br	20023a8 <__alt_data_end+0xfe0023a8>
 20028b8:	8085883a 	add	r2,r16,r2
 20028bc:	10c00117 	ldw	r3,4(r2)
 20028c0:	81000317 	ldw	r4,12(r16)
 20028c4:	81400217 	ldw	r5,8(r16)
 20028c8:	18c00054 	ori	r3,r3,1
 20028cc:	10c00115 	stw	r3,4(r2)
 20028d0:	29000315 	stw	r4,12(r5)
 20028d4:	21400215 	stw	r5,8(r4)
 20028d8:	9009883a 	mov	r4,r18
 20028dc:	200e9c80 	call	200e9c8 <__malloc_unlock>
 20028e0:	80800204 	addi	r2,r16,8
 20028e4:	003f2506 	br	200257c <__alt_data_end+0xfe00257c>
 20028e8:	12001704 	addi	r8,r2,92
 20028ec:	11c016c4 	addi	r7,r2,91
 20028f0:	4209883a 	add	r4,r8,r8
 20028f4:	003e9606 	br	2002350 <__alt_data_end+0xfe002350>
 20028f8:	3804d1ba 	srli	r2,r7,6
 20028fc:	11400e44 	addi	r5,r2,57
 2002900:	10c00e04 	addi	r3,r2,56
 2002904:	294b883a 	add	r5,r5,r5
 2002908:	003fbc06 	br	20027fc <__alt_data_end+0xfe0027fc>
 200290c:	84ff5926 	beq	r16,r19,2002674 <__alt_data_end+0xfe002674>
 2002910:	00808074 	movhi	r2,513
 2002914:	10876704 	addi	r2,r2,7580
 2002918:	14000217 	ldw	r16,8(r2)
 200291c:	00bfff04 	movi	r2,-4
 2002920:	80c00117 	ldw	r3,4(r16)
 2002924:	1886703a 	and	r3,r3,r2
 2002928:	003f9106 	br	2002770 <__alt_data_end+0xfe002770>
 200292c:	60800217 	ldw	r2,8(r12)
 2002930:	213fffc4 	addi	r4,r4,-1
 2002934:	1300651e 	bne	r2,r12,2002acc <_malloc_r+0x7f4>
 2002938:	208000cc 	andi	r2,r4,3
 200293c:	633ffe04 	addi	r12,r12,-8
 2002940:	103ffa1e 	bne	r2,zero,200292c <__alt_data_end+0xfe00292c>
 2002944:	98800117 	ldw	r2,4(r19)
 2002948:	0146303a 	nor	r3,zero,r5
 200294c:	1884703a 	and	r2,r3,r2
 2002950:	98800115 	stw	r2,4(r19)
 2002954:	294b883a 	add	r5,r5,r5
 2002958:	117f2836 	bltu	r2,r5,20025fc <__alt_data_end+0xfe0025fc>
 200295c:	283f2726 	beq	r5,zero,20025fc <__alt_data_end+0xfe0025fc>
 2002960:	2886703a 	and	r3,r5,r2
 2002964:	5809883a 	mov	r4,r11
 2002968:	183ec31e 	bne	r3,zero,2002478 <__alt_data_end+0xfe002478>
 200296c:	294b883a 	add	r5,r5,r5
 2002970:	2886703a 	and	r3,r5,r2
 2002974:	21000104 	addi	r4,r4,4
 2002978:	183ffc26 	beq	r3,zero,200296c <__alt_data_end+0xfe00296c>
 200297c:	003ebe06 	br	2002478 <__alt_data_end+0xfe002478>
 2002980:	00c05504 	movi	r3,340
 2002984:	18801236 	bltu	r3,r2,20029d0 <_malloc_r+0x6f8>
 2002988:	8804d3fa 	srli	r2,r17,15
 200298c:	12001e04 	addi	r8,r2,120
 2002990:	11c01dc4 	addi	r7,r2,119
 2002994:	4209883a 	add	r4,r8,r8
 2002998:	003e6d06 	br	2002350 <__alt_data_end+0xfe002350>
 200299c:	00c40004 	movi	r3,4096
 20029a0:	003f4606 	br	20026bc <__alt_data_end+0xfe0026bc>
 20029a4:	00800044 	movi	r2,1
 20029a8:	a0800115 	stw	r2,4(r20)
 20029ac:	003f7406 	br	2002780 <__alt_data_end+0xfe002780>
 20029b0:	1805d0ba 	srai	r2,r3,2
 20029b4:	01c00044 	movi	r7,1
 20029b8:	30c00117 	ldw	r3,4(r6)
 20029bc:	388e983a 	sll	r7,r7,r2
 20029c0:	2805883a 	mov	r2,r5
 20029c4:	38c6b03a 	or	r3,r7,r3
 20029c8:	30c00115 	stw	r3,4(r6)
 20029cc:	003f9b06 	br	200283c <__alt_data_end+0xfe00283c>
 20029d0:	00c15504 	movi	r3,1364
 20029d4:	18801a36 	bltu	r3,r2,2002a40 <_malloc_r+0x768>
 20029d8:	8804d4ba 	srli	r2,r17,18
 20029dc:	12001f44 	addi	r8,r2,125
 20029e0:	11c01f04 	addi	r7,r2,124
 20029e4:	4209883a 	add	r4,r8,r8
 20029e8:	003e5906 	br	2002350 <__alt_data_end+0xfe002350>
 20029ec:	ad400404 	addi	r21,r21,16
 20029f0:	003f1706 	br	2002650 <__alt_data_end+0xfe002650>
 20029f4:	00c01504 	movi	r3,84
 20029f8:	18802336 	bltu	r3,r2,2002a88 <_malloc_r+0x7b0>
 20029fc:	3804d33a 	srli	r2,r7,12
 2002a00:	11401bc4 	addi	r5,r2,111
 2002a04:	10c01b84 	addi	r3,r2,110
 2002a08:	294b883a 	add	r5,r5,r5
 2002a0c:	003f7b06 	br	20027fc <__alt_data_end+0xfe0027fc>
 2002a10:	9c000217 	ldw	r16,8(r19)
 2002a14:	00bfff04 	movi	r2,-4
 2002a18:	80c00117 	ldw	r3,4(r16)
 2002a1c:	1886703a 	and	r3,r3,r2
 2002a20:	003f5306 	br	2002770 <__alt_data_end+0xfe002770>
 2002a24:	3083ffcc 	andi	r2,r6,4095
 2002a28:	103f181e 	bne	r2,zero,200268c <__alt_data_end+0xfe00268c>
 2002a2c:	99000217 	ldw	r4,8(r19)
 2002a30:	b545883a 	add	r2,r22,r21
 2002a34:	10800054 	ori	r2,r2,1
 2002a38:	20800115 	stw	r2,4(r4)
 2002a3c:	003f3e06 	br	2002738 <__alt_data_end+0xfe002738>
 2002a40:	01003f84 	movi	r4,254
 2002a44:	02001fc4 	movi	r8,127
 2002a48:	01c01f84 	movi	r7,126
 2002a4c:	003e4006 	br	2002350 <__alt_data_end+0xfe002350>
 2002a50:	00808074 	movhi	r2,513
 2002a54:	108d1504 	addi	r2,r2,13396
 2002a58:	15000015 	stw	r20,0(r2)
 2002a5c:	003f1106 	br	20026a4 <__alt_data_end+0xfe0026a4>
 2002a60:	00800044 	movi	r2,1
 2002a64:	002b883a 	mov	r21,zero
 2002a68:	003f1f06 	br	20026e8 <__alt_data_end+0xfe0026e8>
 2002a6c:	81400204 	addi	r5,r16,8
 2002a70:	9009883a 	mov	r4,r18
 2002a74:	20016700 	call	2001670 <_free_r>
 2002a78:	00808074 	movhi	r2,513
 2002a7c:	10941a04 	addi	r2,r2,20584
 2002a80:	10c00017 	ldw	r3,0(r2)
 2002a84:	003f2c06 	br	2002738 <__alt_data_end+0xfe002738>
 2002a88:	00c05504 	movi	r3,340
 2002a8c:	18800536 	bltu	r3,r2,2002aa4 <_malloc_r+0x7cc>
 2002a90:	3804d3fa 	srli	r2,r7,15
 2002a94:	11401e04 	addi	r5,r2,120
 2002a98:	10c01dc4 	addi	r3,r2,119
 2002a9c:	294b883a 	add	r5,r5,r5
 2002aa0:	003f5606 	br	20027fc <__alt_data_end+0xfe0027fc>
 2002aa4:	00c15504 	movi	r3,1364
 2002aa8:	18800536 	bltu	r3,r2,2002ac0 <_malloc_r+0x7e8>
 2002aac:	3804d4ba 	srli	r2,r7,18
 2002ab0:	11401f44 	addi	r5,r2,125
 2002ab4:	10c01f04 	addi	r3,r2,124
 2002ab8:	294b883a 	add	r5,r5,r5
 2002abc:	003f4f06 	br	20027fc <__alt_data_end+0xfe0027fc>
 2002ac0:	01403f84 	movi	r5,254
 2002ac4:	00c01f84 	movi	r3,126
 2002ac8:	003f4c06 	br	20027fc <__alt_data_end+0xfe0027fc>
 2002acc:	98800117 	ldw	r2,4(r19)
 2002ad0:	003fa006 	br	2002954 <__alt_data_end+0xfe002954>
 2002ad4:	8808d0fa 	srli	r4,r17,3
 2002ad8:	20800044 	addi	r2,r4,1
 2002adc:	1085883a 	add	r2,r2,r2
 2002ae0:	003e9006 	br	2002524 <__alt_data_end+0xfe002524>

02002ae4 <memcpy>:
 2002ae4:	defffd04 	addi	sp,sp,-12
 2002ae8:	dfc00215 	stw	ra,8(sp)
 2002aec:	dc400115 	stw	r17,4(sp)
 2002af0:	dc000015 	stw	r16,0(sp)
 2002af4:	00c003c4 	movi	r3,15
 2002af8:	2005883a 	mov	r2,r4
 2002afc:	1980452e 	bgeu	r3,r6,2002c14 <memcpy+0x130>
 2002b00:	2906b03a 	or	r3,r5,r4
 2002b04:	18c000cc 	andi	r3,r3,3
 2002b08:	1800441e 	bne	r3,zero,2002c1c <memcpy+0x138>
 2002b0c:	347ffc04 	addi	r17,r6,-16
 2002b10:	8822d13a 	srli	r17,r17,4
 2002b14:	28c00104 	addi	r3,r5,4
 2002b18:	23400104 	addi	r13,r4,4
 2002b1c:	8820913a 	slli	r16,r17,4
 2002b20:	2b000204 	addi	r12,r5,8
 2002b24:	22c00204 	addi	r11,r4,8
 2002b28:	84000504 	addi	r16,r16,20
 2002b2c:	2a800304 	addi	r10,r5,12
 2002b30:	22400304 	addi	r9,r4,12
 2002b34:	2c21883a 	add	r16,r5,r16
 2002b38:	2811883a 	mov	r8,r5
 2002b3c:	200f883a 	mov	r7,r4
 2002b40:	41000017 	ldw	r4,0(r8)
 2002b44:	1fc00017 	ldw	ra,0(r3)
 2002b48:	63c00017 	ldw	r15,0(r12)
 2002b4c:	39000015 	stw	r4,0(r7)
 2002b50:	53800017 	ldw	r14,0(r10)
 2002b54:	6fc00015 	stw	ra,0(r13)
 2002b58:	5bc00015 	stw	r15,0(r11)
 2002b5c:	4b800015 	stw	r14,0(r9)
 2002b60:	18c00404 	addi	r3,r3,16
 2002b64:	39c00404 	addi	r7,r7,16
 2002b68:	42000404 	addi	r8,r8,16
 2002b6c:	6b400404 	addi	r13,r13,16
 2002b70:	63000404 	addi	r12,r12,16
 2002b74:	5ac00404 	addi	r11,r11,16
 2002b78:	52800404 	addi	r10,r10,16
 2002b7c:	4a400404 	addi	r9,r9,16
 2002b80:	1c3fef1e 	bne	r3,r16,2002b40 <__alt_data_end+0xfe002b40>
 2002b84:	89c00044 	addi	r7,r17,1
 2002b88:	380e913a 	slli	r7,r7,4
 2002b8c:	310003cc 	andi	r4,r6,15
 2002b90:	02c000c4 	movi	r11,3
 2002b94:	11c7883a 	add	r3,r2,r7
 2002b98:	29cb883a 	add	r5,r5,r7
 2002b9c:	5900212e 	bgeu	r11,r4,2002c24 <memcpy+0x140>
 2002ba0:	1813883a 	mov	r9,r3
 2002ba4:	2811883a 	mov	r8,r5
 2002ba8:	200f883a 	mov	r7,r4
 2002bac:	42800017 	ldw	r10,0(r8)
 2002bb0:	4a400104 	addi	r9,r9,4
 2002bb4:	39ffff04 	addi	r7,r7,-4
 2002bb8:	4abfff15 	stw	r10,-4(r9)
 2002bbc:	42000104 	addi	r8,r8,4
 2002bc0:	59fffa36 	bltu	r11,r7,2002bac <__alt_data_end+0xfe002bac>
 2002bc4:	213fff04 	addi	r4,r4,-4
 2002bc8:	2008d0ba 	srli	r4,r4,2
 2002bcc:	318000cc 	andi	r6,r6,3
 2002bd0:	21000044 	addi	r4,r4,1
 2002bd4:	2109883a 	add	r4,r4,r4
 2002bd8:	2109883a 	add	r4,r4,r4
 2002bdc:	1907883a 	add	r3,r3,r4
 2002be0:	290b883a 	add	r5,r5,r4
 2002be4:	30000626 	beq	r6,zero,2002c00 <memcpy+0x11c>
 2002be8:	198d883a 	add	r6,r3,r6
 2002bec:	29c00003 	ldbu	r7,0(r5)
 2002bf0:	18c00044 	addi	r3,r3,1
 2002bf4:	29400044 	addi	r5,r5,1
 2002bf8:	19ffffc5 	stb	r7,-1(r3)
 2002bfc:	19bffb1e 	bne	r3,r6,2002bec <__alt_data_end+0xfe002bec>
 2002c00:	dfc00217 	ldw	ra,8(sp)
 2002c04:	dc400117 	ldw	r17,4(sp)
 2002c08:	dc000017 	ldw	r16,0(sp)
 2002c0c:	dec00304 	addi	sp,sp,12
 2002c10:	f800283a 	ret
 2002c14:	2007883a 	mov	r3,r4
 2002c18:	003ff206 	br	2002be4 <__alt_data_end+0xfe002be4>
 2002c1c:	2007883a 	mov	r3,r4
 2002c20:	003ff106 	br	2002be8 <__alt_data_end+0xfe002be8>
 2002c24:	200d883a 	mov	r6,r4
 2002c28:	003fee06 	br	2002be4 <__alt_data_end+0xfe002be4>

02002c2c <memset>:
 2002c2c:	20c000cc 	andi	r3,r4,3
 2002c30:	2005883a 	mov	r2,r4
 2002c34:	18004426 	beq	r3,zero,2002d48 <memset+0x11c>
 2002c38:	31ffffc4 	addi	r7,r6,-1
 2002c3c:	30004026 	beq	r6,zero,2002d40 <memset+0x114>
 2002c40:	2813883a 	mov	r9,r5
 2002c44:	200d883a 	mov	r6,r4
 2002c48:	2007883a 	mov	r3,r4
 2002c4c:	00000406 	br	2002c60 <memset+0x34>
 2002c50:	3a3fffc4 	addi	r8,r7,-1
 2002c54:	31800044 	addi	r6,r6,1
 2002c58:	38003926 	beq	r7,zero,2002d40 <memset+0x114>
 2002c5c:	400f883a 	mov	r7,r8
 2002c60:	18c00044 	addi	r3,r3,1
 2002c64:	32400005 	stb	r9,0(r6)
 2002c68:	1a0000cc 	andi	r8,r3,3
 2002c6c:	403ff81e 	bne	r8,zero,2002c50 <__alt_data_end+0xfe002c50>
 2002c70:	010000c4 	movi	r4,3
 2002c74:	21c02d2e 	bgeu	r4,r7,2002d2c <memset+0x100>
 2002c78:	29003fcc 	andi	r4,r5,255
 2002c7c:	200c923a 	slli	r6,r4,8
 2002c80:	3108b03a 	or	r4,r6,r4
 2002c84:	200c943a 	slli	r6,r4,16
 2002c88:	218cb03a 	or	r6,r4,r6
 2002c8c:	010003c4 	movi	r4,15
 2002c90:	21c0182e 	bgeu	r4,r7,2002cf4 <memset+0xc8>
 2002c94:	3b3ffc04 	addi	r12,r7,-16
 2002c98:	6018d13a 	srli	r12,r12,4
 2002c9c:	1a000104 	addi	r8,r3,4
 2002ca0:	1ac00204 	addi	r11,r3,8
 2002ca4:	6008913a 	slli	r4,r12,4
 2002ca8:	1a800304 	addi	r10,r3,12
 2002cac:	1813883a 	mov	r9,r3
 2002cb0:	21000504 	addi	r4,r4,20
 2002cb4:	1909883a 	add	r4,r3,r4
 2002cb8:	49800015 	stw	r6,0(r9)
 2002cbc:	41800015 	stw	r6,0(r8)
 2002cc0:	59800015 	stw	r6,0(r11)
 2002cc4:	51800015 	stw	r6,0(r10)
 2002cc8:	42000404 	addi	r8,r8,16
 2002ccc:	4a400404 	addi	r9,r9,16
 2002cd0:	5ac00404 	addi	r11,r11,16
 2002cd4:	52800404 	addi	r10,r10,16
 2002cd8:	413ff71e 	bne	r8,r4,2002cb8 <__alt_data_end+0xfe002cb8>
 2002cdc:	63000044 	addi	r12,r12,1
 2002ce0:	6018913a 	slli	r12,r12,4
 2002ce4:	39c003cc 	andi	r7,r7,15
 2002ce8:	010000c4 	movi	r4,3
 2002cec:	1b07883a 	add	r3,r3,r12
 2002cf0:	21c00e2e 	bgeu	r4,r7,2002d2c <memset+0x100>
 2002cf4:	1813883a 	mov	r9,r3
 2002cf8:	3811883a 	mov	r8,r7
 2002cfc:	010000c4 	movi	r4,3
 2002d00:	49800015 	stw	r6,0(r9)
 2002d04:	423fff04 	addi	r8,r8,-4
 2002d08:	4a400104 	addi	r9,r9,4
 2002d0c:	223ffc36 	bltu	r4,r8,2002d00 <__alt_data_end+0xfe002d00>
 2002d10:	393fff04 	addi	r4,r7,-4
 2002d14:	2008d0ba 	srli	r4,r4,2
 2002d18:	39c000cc 	andi	r7,r7,3
 2002d1c:	21000044 	addi	r4,r4,1
 2002d20:	2109883a 	add	r4,r4,r4
 2002d24:	2109883a 	add	r4,r4,r4
 2002d28:	1907883a 	add	r3,r3,r4
 2002d2c:	38000526 	beq	r7,zero,2002d44 <memset+0x118>
 2002d30:	19cf883a 	add	r7,r3,r7
 2002d34:	19400005 	stb	r5,0(r3)
 2002d38:	18c00044 	addi	r3,r3,1
 2002d3c:	38fffd1e 	bne	r7,r3,2002d34 <__alt_data_end+0xfe002d34>
 2002d40:	f800283a 	ret
 2002d44:	f800283a 	ret
 2002d48:	2007883a 	mov	r3,r4
 2002d4c:	300f883a 	mov	r7,r6
 2002d50:	003fc706 	br	2002c70 <__alt_data_end+0xfe002c70>

02002d54 <_open_r>:
 2002d54:	defffd04 	addi	sp,sp,-12
 2002d58:	2805883a 	mov	r2,r5
 2002d5c:	dc000015 	stw	r16,0(sp)
 2002d60:	04008074 	movhi	r16,513
 2002d64:	dc400115 	stw	r17,4(sp)
 2002d68:	300b883a 	mov	r5,r6
 2002d6c:	84140c04 	addi	r16,r16,20528
 2002d70:	2023883a 	mov	r17,r4
 2002d74:	380d883a 	mov	r6,r7
 2002d78:	1009883a 	mov	r4,r2
 2002d7c:	dfc00215 	stw	ra,8(sp)
 2002d80:	80000015 	stw	zero,0(r16)
 2002d84:	200eb140 	call	200eb14 <open>
 2002d88:	00ffffc4 	movi	r3,-1
 2002d8c:	10c00526 	beq	r2,r3,2002da4 <_open_r+0x50>
 2002d90:	dfc00217 	ldw	ra,8(sp)
 2002d94:	dc400117 	ldw	r17,4(sp)
 2002d98:	dc000017 	ldw	r16,0(sp)
 2002d9c:	dec00304 	addi	sp,sp,12
 2002da0:	f800283a 	ret
 2002da4:	80c00017 	ldw	r3,0(r16)
 2002da8:	183ff926 	beq	r3,zero,2002d90 <__alt_data_end+0xfe002d90>
 2002dac:	88c00015 	stw	r3,0(r17)
 2002db0:	003ff706 	br	2002d90 <__alt_data_end+0xfe002d90>

02002db4 <_printf_r>:
 2002db4:	defffd04 	addi	sp,sp,-12
 2002db8:	2805883a 	mov	r2,r5
 2002dbc:	dfc00015 	stw	ra,0(sp)
 2002dc0:	d9800115 	stw	r6,4(sp)
 2002dc4:	d9c00215 	stw	r7,8(sp)
 2002dc8:	21400217 	ldw	r5,8(r4)
 2002dcc:	d9c00104 	addi	r7,sp,4
 2002dd0:	100d883a 	mov	r6,r2
 2002dd4:	200330c0 	call	200330c <___vfprintf_internal_r>
 2002dd8:	dfc00017 	ldw	ra,0(sp)
 2002ddc:	dec00304 	addi	sp,sp,12
 2002de0:	f800283a 	ret

02002de4 <printf>:
 2002de4:	defffc04 	addi	sp,sp,-16
 2002de8:	dfc00015 	stw	ra,0(sp)
 2002dec:	d9400115 	stw	r5,4(sp)
 2002df0:	d9800215 	stw	r6,8(sp)
 2002df4:	d9c00315 	stw	r7,12(sp)
 2002df8:	00808074 	movhi	r2,513
 2002dfc:	108d1404 	addi	r2,r2,13392
 2002e00:	10800017 	ldw	r2,0(r2)
 2002e04:	200b883a 	mov	r5,r4
 2002e08:	d9800104 	addi	r6,sp,4
 2002e0c:	11000217 	ldw	r4,8(r2)
 2002e10:	20055e80 	call	20055e8 <__vfprintf_internal>
 2002e14:	dfc00017 	ldw	ra,0(sp)
 2002e18:	dec00404 	addi	sp,sp,16
 2002e1c:	f800283a 	ret

02002e20 <_puts_r>:
 2002e20:	defff604 	addi	sp,sp,-40
 2002e24:	dc000715 	stw	r16,28(sp)
 2002e28:	2021883a 	mov	r16,r4
 2002e2c:	2809883a 	mov	r4,r5
 2002e30:	dc400815 	stw	r17,32(sp)
 2002e34:	dfc00915 	stw	ra,36(sp)
 2002e38:	2823883a 	mov	r17,r5
 2002e3c:	20032740 	call	2003274 <strlen>
 2002e40:	10c00044 	addi	r3,r2,1
 2002e44:	d8800115 	stw	r2,4(sp)
 2002e48:	00808074 	movhi	r2,513
 2002e4c:	10855c04 	addi	r2,r2,5488
 2002e50:	d8800215 	stw	r2,8(sp)
 2002e54:	00800044 	movi	r2,1
 2002e58:	d8800315 	stw	r2,12(sp)
 2002e5c:	00800084 	movi	r2,2
 2002e60:	dc400015 	stw	r17,0(sp)
 2002e64:	d8c00615 	stw	r3,24(sp)
 2002e68:	dec00415 	stw	sp,16(sp)
 2002e6c:	d8800515 	stw	r2,20(sp)
 2002e70:	80000226 	beq	r16,zero,2002e7c <_puts_r+0x5c>
 2002e74:	80800e17 	ldw	r2,56(r16)
 2002e78:	10001426 	beq	r2,zero,2002ecc <_puts_r+0xac>
 2002e7c:	81400217 	ldw	r5,8(r16)
 2002e80:	2880030b 	ldhu	r2,12(r5)
 2002e84:	10c8000c 	andi	r3,r2,8192
 2002e88:	1800061e 	bne	r3,zero,2002ea4 <_puts_r+0x84>
 2002e8c:	29001917 	ldw	r4,100(r5)
 2002e90:	00f7ffc4 	movi	r3,-8193
 2002e94:	10880014 	ori	r2,r2,8192
 2002e98:	20c6703a 	and	r3,r4,r3
 2002e9c:	2880030d 	sth	r2,12(r5)
 2002ea0:	28c01915 	stw	r3,100(r5)
 2002ea4:	d9800404 	addi	r6,sp,16
 2002ea8:	8009883a 	mov	r4,r16
 2002eac:	20072240 	call	2007224 <__sfvwrite_r>
 2002eb0:	1000091e 	bne	r2,zero,2002ed8 <_puts_r+0xb8>
 2002eb4:	00800284 	movi	r2,10
 2002eb8:	dfc00917 	ldw	ra,36(sp)
 2002ebc:	dc400817 	ldw	r17,32(sp)
 2002ec0:	dc000717 	ldw	r16,28(sp)
 2002ec4:	dec00a04 	addi	sp,sp,40
 2002ec8:	f800283a 	ret
 2002ecc:	8009883a 	mov	r4,r16
 2002ed0:	20011800 	call	2001180 <__sinit>
 2002ed4:	003fe906 	br	2002e7c <__alt_data_end+0xfe002e7c>
 2002ed8:	00bfffc4 	movi	r2,-1
 2002edc:	003ff606 	br	2002eb8 <__alt_data_end+0xfe002eb8>

02002ee0 <puts>:
 2002ee0:	00808074 	movhi	r2,513
 2002ee4:	108d1404 	addi	r2,r2,13392
 2002ee8:	200b883a 	mov	r5,r4
 2002eec:	11000017 	ldw	r4,0(r2)
 2002ef0:	2002e201 	jmpi	2002e20 <_puts_r>

02002ef4 <lflush>:
 2002ef4:	2080030b 	ldhu	r2,12(r4)
 2002ef8:	00c00244 	movi	r3,9
 2002efc:	1080024c 	andi	r2,r2,9
 2002f00:	10c00226 	beq	r2,r3,2002f0c <lflush+0x18>
 2002f04:	0005883a 	mov	r2,zero
 2002f08:	f800283a 	ret
 2002f0c:	2000df01 	jmpi	2000df0 <fflush>

02002f10 <__srefill_r>:
 2002f10:	defffc04 	addi	sp,sp,-16
 2002f14:	dc400115 	stw	r17,4(sp)
 2002f18:	dc000015 	stw	r16,0(sp)
 2002f1c:	dfc00315 	stw	ra,12(sp)
 2002f20:	dc800215 	stw	r18,8(sp)
 2002f24:	2023883a 	mov	r17,r4
 2002f28:	2821883a 	mov	r16,r5
 2002f2c:	20000226 	beq	r4,zero,2002f38 <__srefill_r+0x28>
 2002f30:	20800e17 	ldw	r2,56(r4)
 2002f34:	10003c26 	beq	r2,zero,2003028 <__srefill_r+0x118>
 2002f38:	80c0030b 	ldhu	r3,12(r16)
 2002f3c:	1908000c 	andi	r4,r3,8192
 2002f40:	1805883a 	mov	r2,r3
 2002f44:	2000071e 	bne	r4,zero,2002f64 <__srefill_r+0x54>
 2002f48:	81001917 	ldw	r4,100(r16)
 2002f4c:	18880014 	ori	r2,r3,8192
 2002f50:	00f7ffc4 	movi	r3,-8193
 2002f54:	20c8703a 	and	r4,r4,r3
 2002f58:	8080030d 	sth	r2,12(r16)
 2002f5c:	1007883a 	mov	r3,r2
 2002f60:	81001915 	stw	r4,100(r16)
 2002f64:	80000115 	stw	zero,4(r16)
 2002f68:	1100080c 	andi	r4,r2,32
 2002f6c:	2000571e 	bne	r4,zero,20030cc <__srefill_r+0x1bc>
 2002f70:	1100010c 	andi	r4,r2,4
 2002f74:	20001f26 	beq	r4,zero,2002ff4 <__srefill_r+0xe4>
 2002f78:	81400c17 	ldw	r5,48(r16)
 2002f7c:	28000826 	beq	r5,zero,2002fa0 <__srefill_r+0x90>
 2002f80:	80801004 	addi	r2,r16,64
 2002f84:	28800226 	beq	r5,r2,2002f90 <__srefill_r+0x80>
 2002f88:	8809883a 	mov	r4,r17
 2002f8c:	20016700 	call	2001670 <_free_r>
 2002f90:	80800f17 	ldw	r2,60(r16)
 2002f94:	80000c15 	stw	zero,48(r16)
 2002f98:	80800115 	stw	r2,4(r16)
 2002f9c:	1000391e 	bne	r2,zero,2003084 <__srefill_r+0x174>
 2002fa0:	80800417 	ldw	r2,16(r16)
 2002fa4:	10004b26 	beq	r2,zero,20030d4 <__srefill_r+0x1c4>
 2002fa8:	8480030b 	ldhu	r18,12(r16)
 2002fac:	908000cc 	andi	r2,r18,3
 2002fb0:	10001f1e 	bne	r2,zero,2003030 <__srefill_r+0x120>
 2002fb4:	81800417 	ldw	r6,16(r16)
 2002fb8:	80800817 	ldw	r2,32(r16)
 2002fbc:	81c00517 	ldw	r7,20(r16)
 2002fc0:	81400717 	ldw	r5,28(r16)
 2002fc4:	81800015 	stw	r6,0(r16)
 2002fc8:	8809883a 	mov	r4,r17
 2002fcc:	103ee83a 	callr	r2
 2002fd0:	80800115 	stw	r2,4(r16)
 2002fd4:	00800e0e 	bge	zero,r2,2003010 <__srefill_r+0x100>
 2002fd8:	0005883a 	mov	r2,zero
 2002fdc:	dfc00317 	ldw	ra,12(sp)
 2002fe0:	dc800217 	ldw	r18,8(sp)
 2002fe4:	dc400117 	ldw	r17,4(sp)
 2002fe8:	dc000017 	ldw	r16,0(sp)
 2002fec:	dec00404 	addi	sp,sp,16
 2002ff0:	f800283a 	ret
 2002ff4:	1100040c 	andi	r4,r2,16
 2002ff8:	20003026 	beq	r4,zero,20030bc <__srefill_r+0x1ac>
 2002ffc:	1080020c 	andi	r2,r2,8
 2003000:	1000241e 	bne	r2,zero,2003094 <__srefill_r+0x184>
 2003004:	18c00114 	ori	r3,r3,4
 2003008:	80c0030d 	sth	r3,12(r16)
 200300c:	003fe406 	br	2002fa0 <__alt_data_end+0xfe002fa0>
 2003010:	80c0030b 	ldhu	r3,12(r16)
 2003014:	1000161e 	bne	r2,zero,2003070 <__srefill_r+0x160>
 2003018:	18c00814 	ori	r3,r3,32
 200301c:	00bfffc4 	movi	r2,-1
 2003020:	80c0030d 	sth	r3,12(r16)
 2003024:	003fed06 	br	2002fdc <__alt_data_end+0xfe002fdc>
 2003028:	20011800 	call	2001180 <__sinit>
 200302c:	003fc206 	br	2002f38 <__alt_data_end+0xfe002f38>
 2003030:	00808074 	movhi	r2,513
 2003034:	108d1304 	addi	r2,r2,13388
 2003038:	11000017 	ldw	r4,0(r2)
 200303c:	01408034 	movhi	r5,512
 2003040:	00800044 	movi	r2,1
 2003044:	294bbd04 	addi	r5,r5,12020
 2003048:	8080030d 	sth	r2,12(r16)
 200304c:	2001e5c0 	call	2001e5c <_fwalk>
 2003050:	00800244 	movi	r2,9
 2003054:	8480030d 	sth	r18,12(r16)
 2003058:	9480024c 	andi	r18,r18,9
 200305c:	90bfd51e 	bne	r18,r2,2002fb4 <__alt_data_end+0xfe002fb4>
 2003060:	800b883a 	mov	r5,r16
 2003064:	8809883a 	mov	r4,r17
 2003068:	2000b780 	call	2000b78 <__sflush_r>
 200306c:	003fd106 	br	2002fb4 <__alt_data_end+0xfe002fb4>
 2003070:	18c01014 	ori	r3,r3,64
 2003074:	80000115 	stw	zero,4(r16)
 2003078:	00bfffc4 	movi	r2,-1
 200307c:	80c0030d 	sth	r3,12(r16)
 2003080:	003fd606 	br	2002fdc <__alt_data_end+0xfe002fdc>
 2003084:	80c00e17 	ldw	r3,56(r16)
 2003088:	0005883a 	mov	r2,zero
 200308c:	80c00015 	stw	r3,0(r16)
 2003090:	003fd206 	br	2002fdc <__alt_data_end+0xfe002fdc>
 2003094:	800b883a 	mov	r5,r16
 2003098:	8809883a 	mov	r4,r17
 200309c:	2000d940 	call	2000d94 <_fflush_r>
 20030a0:	10000a1e 	bne	r2,zero,20030cc <__srefill_r+0x1bc>
 20030a4:	8080030b 	ldhu	r2,12(r16)
 20030a8:	00fffdc4 	movi	r3,-9
 20030ac:	80000215 	stw	zero,8(r16)
 20030b0:	1886703a 	and	r3,r3,r2
 20030b4:	80000615 	stw	zero,24(r16)
 20030b8:	003fd206 	br	2003004 <__alt_data_end+0xfe003004>
 20030bc:	00800244 	movi	r2,9
 20030c0:	88800015 	stw	r2,0(r17)
 20030c4:	18c01014 	ori	r3,r3,64
 20030c8:	80c0030d 	sth	r3,12(r16)
 20030cc:	00bfffc4 	movi	r2,-1
 20030d0:	003fc206 	br	2002fdc <__alt_data_end+0xfe002fdc>
 20030d4:	800b883a 	mov	r5,r16
 20030d8:	8809883a 	mov	r4,r17
 20030dc:	20020f40 	call	20020f4 <__smakebuf_r>
 20030e0:	003fb106 	br	2002fa8 <__alt_data_end+0xfe002fa8>

020030e4 <_sbrk_r>:
 20030e4:	defffd04 	addi	sp,sp,-12
 20030e8:	dc000015 	stw	r16,0(sp)
 20030ec:	04008074 	movhi	r16,513
 20030f0:	dc400115 	stw	r17,4(sp)
 20030f4:	84140c04 	addi	r16,r16,20528
 20030f8:	2023883a 	mov	r17,r4
 20030fc:	2809883a 	mov	r4,r5
 2003100:	dfc00215 	stw	ra,8(sp)
 2003104:	80000015 	stw	zero,0(r16)
 2003108:	200ee340 	call	200ee34 <sbrk>
 200310c:	00ffffc4 	movi	r3,-1
 2003110:	10c00526 	beq	r2,r3,2003128 <_sbrk_r+0x44>
 2003114:	dfc00217 	ldw	ra,8(sp)
 2003118:	dc400117 	ldw	r17,4(sp)
 200311c:	dc000017 	ldw	r16,0(sp)
 2003120:	dec00304 	addi	sp,sp,12
 2003124:	f800283a 	ret
 2003128:	80c00017 	ldw	r3,0(r16)
 200312c:	183ff926 	beq	r3,zero,2003114 <__alt_data_end+0xfe003114>
 2003130:	88c00015 	stw	r3,0(r17)
 2003134:	003ff706 	br	2003114 <__alt_data_end+0xfe003114>

02003138 <__sread>:
 2003138:	defffe04 	addi	sp,sp,-8
 200313c:	dc000015 	stw	r16,0(sp)
 2003140:	2821883a 	mov	r16,r5
 2003144:	2940038f 	ldh	r5,14(r5)
 2003148:	dfc00115 	stw	ra,4(sp)
 200314c:	2008b740 	call	2008b74 <_read_r>
 2003150:	10000716 	blt	r2,zero,2003170 <__sread+0x38>
 2003154:	80c01417 	ldw	r3,80(r16)
 2003158:	1887883a 	add	r3,r3,r2
 200315c:	80c01415 	stw	r3,80(r16)
 2003160:	dfc00117 	ldw	ra,4(sp)
 2003164:	dc000017 	ldw	r16,0(sp)
 2003168:	dec00204 	addi	sp,sp,8
 200316c:	f800283a 	ret
 2003170:	80c0030b 	ldhu	r3,12(r16)
 2003174:	18fbffcc 	andi	r3,r3,61439
 2003178:	80c0030d 	sth	r3,12(r16)
 200317c:	dfc00117 	ldw	ra,4(sp)
 2003180:	dc000017 	ldw	r16,0(sp)
 2003184:	dec00204 	addi	sp,sp,8
 2003188:	f800283a 	ret

0200318c <__seofread>:
 200318c:	0005883a 	mov	r2,zero
 2003190:	f800283a 	ret

02003194 <__swrite>:
 2003194:	2880030b 	ldhu	r2,12(r5)
 2003198:	defffb04 	addi	sp,sp,-20
 200319c:	dcc00315 	stw	r19,12(sp)
 20031a0:	dc800215 	stw	r18,8(sp)
 20031a4:	dc400115 	stw	r17,4(sp)
 20031a8:	dc000015 	stw	r16,0(sp)
 20031ac:	dfc00415 	stw	ra,16(sp)
 20031b0:	10c0400c 	andi	r3,r2,256
 20031b4:	2821883a 	mov	r16,r5
 20031b8:	2023883a 	mov	r17,r4
 20031bc:	3025883a 	mov	r18,r6
 20031c0:	3827883a 	mov	r19,r7
 20031c4:	18000526 	beq	r3,zero,20031dc <__swrite+0x48>
 20031c8:	2940038f 	ldh	r5,14(r5)
 20031cc:	01c00084 	movi	r7,2
 20031d0:	000d883a 	mov	r6,zero
 20031d4:	200781c0 	call	200781c <_lseek_r>
 20031d8:	8080030b 	ldhu	r2,12(r16)
 20031dc:	8140038f 	ldh	r5,14(r16)
 20031e0:	10bbffcc 	andi	r2,r2,61439
 20031e4:	980f883a 	mov	r7,r19
 20031e8:	900d883a 	mov	r6,r18
 20031ec:	8809883a 	mov	r4,r17
 20031f0:	8080030d 	sth	r2,12(r16)
 20031f4:	dfc00417 	ldw	ra,16(sp)
 20031f8:	dcc00317 	ldw	r19,12(sp)
 20031fc:	dc800217 	ldw	r18,8(sp)
 2003200:	dc400117 	ldw	r17,4(sp)
 2003204:	dc000017 	ldw	r16,0(sp)
 2003208:	dec00504 	addi	sp,sp,20
 200320c:	20056c01 	jmpi	20056c0 <_write_r>

02003210 <__sseek>:
 2003210:	defffe04 	addi	sp,sp,-8
 2003214:	dc000015 	stw	r16,0(sp)
 2003218:	2821883a 	mov	r16,r5
 200321c:	2940038f 	ldh	r5,14(r5)
 2003220:	dfc00115 	stw	ra,4(sp)
 2003224:	200781c0 	call	200781c <_lseek_r>
 2003228:	00ffffc4 	movi	r3,-1
 200322c:	10c00826 	beq	r2,r3,2003250 <__sseek+0x40>
 2003230:	80c0030b 	ldhu	r3,12(r16)
 2003234:	80801415 	stw	r2,80(r16)
 2003238:	18c40014 	ori	r3,r3,4096
 200323c:	80c0030d 	sth	r3,12(r16)
 2003240:	dfc00117 	ldw	ra,4(sp)
 2003244:	dc000017 	ldw	r16,0(sp)
 2003248:	dec00204 	addi	sp,sp,8
 200324c:	f800283a 	ret
 2003250:	80c0030b 	ldhu	r3,12(r16)
 2003254:	18fbffcc 	andi	r3,r3,61439
 2003258:	80c0030d 	sth	r3,12(r16)
 200325c:	dfc00117 	ldw	ra,4(sp)
 2003260:	dc000017 	ldw	r16,0(sp)
 2003264:	dec00204 	addi	sp,sp,8
 2003268:	f800283a 	ret

0200326c <__sclose>:
 200326c:	2940038f 	ldh	r5,14(r5)
 2003270:	20058741 	jmpi	2005874 <_close_r>

02003274 <strlen>:
 2003274:	208000cc 	andi	r2,r4,3
 2003278:	10002026 	beq	r2,zero,20032fc <strlen+0x88>
 200327c:	20800007 	ldb	r2,0(r4)
 2003280:	10002026 	beq	r2,zero,2003304 <strlen+0x90>
 2003284:	2005883a 	mov	r2,r4
 2003288:	00000206 	br	2003294 <strlen+0x20>
 200328c:	10c00007 	ldb	r3,0(r2)
 2003290:	18001826 	beq	r3,zero,20032f4 <strlen+0x80>
 2003294:	10800044 	addi	r2,r2,1
 2003298:	10c000cc 	andi	r3,r2,3
 200329c:	183ffb1e 	bne	r3,zero,200328c <__alt_data_end+0xfe00328c>
 20032a0:	10c00017 	ldw	r3,0(r2)
 20032a4:	01ffbff4 	movhi	r7,65279
 20032a8:	39ffbfc4 	addi	r7,r7,-257
 20032ac:	00ca303a 	nor	r5,zero,r3
 20032b0:	01a02074 	movhi	r6,32897
 20032b4:	19c7883a 	add	r3,r3,r7
 20032b8:	31a02004 	addi	r6,r6,-32640
 20032bc:	1946703a 	and	r3,r3,r5
 20032c0:	1986703a 	and	r3,r3,r6
 20032c4:	1800091e 	bne	r3,zero,20032ec <strlen+0x78>
 20032c8:	10800104 	addi	r2,r2,4
 20032cc:	10c00017 	ldw	r3,0(r2)
 20032d0:	19cb883a 	add	r5,r3,r7
 20032d4:	00c6303a 	nor	r3,zero,r3
 20032d8:	28c6703a 	and	r3,r5,r3
 20032dc:	1986703a 	and	r3,r3,r6
 20032e0:	183ff926 	beq	r3,zero,20032c8 <__alt_data_end+0xfe0032c8>
 20032e4:	00000106 	br	20032ec <strlen+0x78>
 20032e8:	10800044 	addi	r2,r2,1
 20032ec:	10c00007 	ldb	r3,0(r2)
 20032f0:	183ffd1e 	bne	r3,zero,20032e8 <__alt_data_end+0xfe0032e8>
 20032f4:	1105c83a 	sub	r2,r2,r4
 20032f8:	f800283a 	ret
 20032fc:	2005883a 	mov	r2,r4
 2003300:	003fe706 	br	20032a0 <__alt_data_end+0xfe0032a0>
 2003304:	0005883a 	mov	r2,zero
 2003308:	f800283a 	ret

0200330c <___vfprintf_internal_r>:
 200330c:	deffb804 	addi	sp,sp,-288
 2003310:	dfc04715 	stw	ra,284(sp)
 2003314:	ddc04515 	stw	r23,276(sp)
 2003318:	dd404315 	stw	r21,268(sp)
 200331c:	d9002d15 	stw	r4,180(sp)
 2003320:	282f883a 	mov	r23,r5
 2003324:	302b883a 	mov	r21,r6
 2003328:	d9c02e15 	stw	r7,184(sp)
 200332c:	df004615 	stw	fp,280(sp)
 2003330:	dd804415 	stw	r22,272(sp)
 2003334:	dd004215 	stw	r20,264(sp)
 2003338:	dcc04115 	stw	r19,260(sp)
 200333c:	dc804015 	stw	r18,256(sp)
 2003340:	dc403f15 	stw	r17,252(sp)
 2003344:	dc003e15 	stw	r16,248(sp)
 2003348:	20077ec0 	call	20077ec <_localeconv_r>
 200334c:	10800017 	ldw	r2,0(r2)
 2003350:	1009883a 	mov	r4,r2
 2003354:	d8803415 	stw	r2,208(sp)
 2003358:	20032740 	call	2003274 <strlen>
 200335c:	d8803715 	stw	r2,220(sp)
 2003360:	d8802d17 	ldw	r2,180(sp)
 2003364:	10000226 	beq	r2,zero,2003370 <___vfprintf_internal_r+0x64>
 2003368:	10800e17 	ldw	r2,56(r2)
 200336c:	1000fb26 	beq	r2,zero,200375c <___vfprintf_internal_r+0x450>
 2003370:	b880030b 	ldhu	r2,12(r23)
 2003374:	10c8000c 	andi	r3,r2,8192
 2003378:	1800061e 	bne	r3,zero,2003394 <___vfprintf_internal_r+0x88>
 200337c:	b9001917 	ldw	r4,100(r23)
 2003380:	00f7ffc4 	movi	r3,-8193
 2003384:	10880014 	ori	r2,r2,8192
 2003388:	20c6703a 	and	r3,r4,r3
 200338c:	b880030d 	sth	r2,12(r23)
 2003390:	b8c01915 	stw	r3,100(r23)
 2003394:	10c0020c 	andi	r3,r2,8
 2003398:	1800c326 	beq	r3,zero,20036a8 <___vfprintf_internal_r+0x39c>
 200339c:	b8c00417 	ldw	r3,16(r23)
 20033a0:	1800c126 	beq	r3,zero,20036a8 <___vfprintf_internal_r+0x39c>
 20033a4:	1080068c 	andi	r2,r2,26
 20033a8:	00c00284 	movi	r3,10
 20033ac:	10c0c626 	beq	r2,r3,20036c8 <___vfprintf_internal_r+0x3bc>
 20033b0:	d8c00404 	addi	r3,sp,16
 20033b4:	05008074 	movhi	r20,513
 20033b8:	d9001e04 	addi	r4,sp,120
 20033bc:	a5056d84 	addi	r20,r20,5558
 20033c0:	d8c01e15 	stw	r3,120(sp)
 20033c4:	d8002015 	stw	zero,128(sp)
 20033c8:	d8001f15 	stw	zero,124(sp)
 20033cc:	d8003315 	stw	zero,204(sp)
 20033d0:	d8003615 	stw	zero,216(sp)
 20033d4:	d8003815 	stw	zero,224(sp)
 20033d8:	1811883a 	mov	r8,r3
 20033dc:	d8003915 	stw	zero,228(sp)
 20033e0:	d8003a15 	stw	zero,232(sp)
 20033e4:	d8002f15 	stw	zero,188(sp)
 20033e8:	d9002815 	stw	r4,160(sp)
 20033ec:	a8800007 	ldb	r2,0(r21)
 20033f0:	10028b26 	beq	r2,zero,2003e20 <___vfprintf_internal_r+0xb14>
 20033f4:	00c00944 	movi	r3,37
 20033f8:	a823883a 	mov	r17,r21
 20033fc:	10c0021e 	bne	r2,r3,2003408 <___vfprintf_internal_r+0xfc>
 2003400:	00001406 	br	2003454 <___vfprintf_internal_r+0x148>
 2003404:	10c00326 	beq	r2,r3,2003414 <___vfprintf_internal_r+0x108>
 2003408:	8c400044 	addi	r17,r17,1
 200340c:	88800007 	ldb	r2,0(r17)
 2003410:	103ffc1e 	bne	r2,zero,2003404 <__alt_data_end+0xfe003404>
 2003414:	8d61c83a 	sub	r16,r17,r21
 2003418:	80000e26 	beq	r16,zero,2003454 <___vfprintf_internal_r+0x148>
 200341c:	d8c02017 	ldw	r3,128(sp)
 2003420:	d8801f17 	ldw	r2,124(sp)
 2003424:	45400015 	stw	r21,0(r8)
 2003428:	1c07883a 	add	r3,r3,r16
 200342c:	10800044 	addi	r2,r2,1
 2003430:	d8c02015 	stw	r3,128(sp)
 2003434:	44000115 	stw	r16,4(r8)
 2003438:	d8801f15 	stw	r2,124(sp)
 200343c:	00c001c4 	movi	r3,7
 2003440:	1880a916 	blt	r3,r2,20036e8 <___vfprintf_internal_r+0x3dc>
 2003444:	42000204 	addi	r8,r8,8
 2003448:	d9402f17 	ldw	r5,188(sp)
 200344c:	2c0b883a 	add	r5,r5,r16
 2003450:	d9402f15 	stw	r5,188(sp)
 2003454:	88800007 	ldb	r2,0(r17)
 2003458:	1000aa26 	beq	r2,zero,2003704 <___vfprintf_internal_r+0x3f8>
 200345c:	8d400044 	addi	r21,r17,1
 2003460:	8c400047 	ldb	r17,1(r17)
 2003464:	0021883a 	mov	r16,zero
 2003468:	00bfffc4 	movi	r2,-1
 200346c:	0025883a 	mov	r18,zero
 2003470:	dc002905 	stb	r16,164(sp)
 2003474:	d8002785 	stb	zero,158(sp)
 2003478:	d8002b05 	stb	zero,172(sp)
 200347c:	d8802a15 	stw	r2,168(sp)
 2003480:	d8003115 	stw	zero,196(sp)
 2003484:	04c01604 	movi	r19,88
 2003488:	05800244 	movi	r22,9
 200348c:	9021883a 	mov	r16,r18
 2003490:	4039883a 	mov	fp,r8
 2003494:	ad400044 	addi	r21,r21,1
 2003498:	88bff804 	addi	r2,r17,-32
 200349c:	98833236 	bltu	r19,r2,2004168 <___vfprintf_internal_r+0xe5c>
 20034a0:	100490ba 	slli	r2,r2,2
 20034a4:	00c08034 	movhi	r3,512
 20034a8:	18cd2e04 	addi	r3,r3,13496
 20034ac:	10c5883a 	add	r2,r2,r3
 20034b0:	10800017 	ldw	r2,0(r2)
 20034b4:	1000683a 	jmp	r2
 20034b8:	02004060 	cmpeqi	r8,zero,257
 20034bc:	02004168 	cmpgeui	r8,zero,261
 20034c0:	02004168 	cmpgeui	r8,zero,261
 20034c4:	02004080 	call	200408 <__alt_mem_sdram-0x1dffbf8>
 20034c8:	02004168 	cmpgeui	r8,zero,261
 20034cc:	02004168 	cmpgeui	r8,zero,261
 20034d0:	02004168 	cmpgeui	r8,zero,261
 20034d4:	02004168 	cmpgeui	r8,zero,261
 20034d8:	02004168 	cmpgeui	r8,zero,261
 20034dc:	02004168 	cmpgeui	r8,zero,261
 20034e0:	02003768 	cmpgeui	r8,zero,221
 20034e4:	02003f70 	cmpltui	r8,zero,253
 20034e8:	02004168 	cmpgeui	r8,zero,261
 20034ec:	0200362c 	andhi	r8,zero,216
 20034f0:	0200378c 	andi	r8,zero,222
 20034f4:	02004168 	cmpgeui	r8,zero,261
 20034f8:	020037dc 	xori	r8,zero,223
 20034fc:	020037e8 	cmpgeui	r8,zero,223
 2003500:	020037e8 	cmpgeui	r8,zero,223
 2003504:	020037e8 	cmpgeui	r8,zero,223
 2003508:	020037e8 	cmpgeui	r8,zero,223
 200350c:	020037e8 	cmpgeui	r8,zero,223
 2003510:	020037e8 	cmpgeui	r8,zero,223
 2003514:	020037e8 	cmpgeui	r8,zero,223
 2003518:	020037e8 	cmpgeui	r8,zero,223
 200351c:	020037e8 	cmpgeui	r8,zero,223
 2003520:	02004168 	cmpgeui	r8,zero,261
 2003524:	02004168 	cmpgeui	r8,zero,261
 2003528:	02004168 	cmpgeui	r8,zero,261
 200352c:	02004168 	cmpgeui	r8,zero,261
 2003530:	02004168 	cmpgeui	r8,zero,261
 2003534:	02004168 	cmpgeui	r8,zero,261
 2003538:	02004168 	cmpgeui	r8,zero,261
 200353c:	02004168 	cmpgeui	r8,zero,261
 2003540:	02004168 	cmpgeui	r8,zero,261
 2003544:	02004168 	cmpgeui	r8,zero,261
 2003548:	02003824 	muli	r8,zero,224
 200354c:	020038ec 	andhi	r8,zero,227
 2003550:	02004168 	cmpgeui	r8,zero,261
 2003554:	020038ec 	andhi	r8,zero,227
 2003558:	02004168 	cmpgeui	r8,zero,261
 200355c:	02004168 	cmpgeui	r8,zero,261
 2003560:	02004168 	cmpgeui	r8,zero,261
 2003564:	02004168 	cmpgeui	r8,zero,261
 2003568:	02003998 	cmpnei	r8,zero,230
 200356c:	02004168 	cmpgeui	r8,zero,261
 2003570:	02004168 	cmpgeui	r8,zero,261
 2003574:	020039a4 	muli	r8,zero,230
 2003578:	02004168 	cmpgeui	r8,zero,261
 200357c:	02004168 	cmpgeui	r8,zero,261
 2003580:	02004168 	cmpgeui	r8,zero,261
 2003584:	02004168 	cmpgeui	r8,zero,261
 2003588:	02004168 	cmpgeui	r8,zero,261
 200358c:	02003e28 	cmpgeui	r8,zero,248
 2003590:	02004168 	cmpgeui	r8,zero,261
 2003594:	02004168 	cmpgeui	r8,zero,261
 2003598:	02003e94 	movui	r8,250
 200359c:	02004168 	cmpgeui	r8,zero,261
 20035a0:	02004168 	cmpgeui	r8,zero,261
 20035a4:	02004168 	cmpgeui	r8,zero,261
 20035a8:	02004168 	cmpgeui	r8,zero,261
 20035ac:	02004168 	cmpgeui	r8,zero,261
 20035b0:	02004168 	cmpgeui	r8,zero,261
 20035b4:	02004168 	cmpgeui	r8,zero,261
 20035b8:	02004168 	cmpgeui	r8,zero,261
 20035bc:	02004168 	cmpgeui	r8,zero,261
 20035c0:	02004168 	cmpgeui	r8,zero,261
 20035c4:	0200410c 	andi	r8,zero,260
 20035c8:	0200408c 	andi	r8,zero,258
 20035cc:	020038ec 	andhi	r8,zero,227
 20035d0:	020038ec 	andhi	r8,zero,227
 20035d4:	020038ec 	andhi	r8,zero,227
 20035d8:	020040ac 	andhi	r8,zero,258
 20035dc:	0200408c 	andi	r8,zero,258
 20035e0:	02004168 	cmpgeui	r8,zero,261
 20035e4:	02004168 	cmpgeui	r8,zero,261
 20035e8:	020040b8 	rdprs	r8,zero,258
 20035ec:	02004168 	cmpgeui	r8,zero,261
 20035f0:	020040cc 	andi	r8,zero,259
 20035f4:	02003f50 	cmplti	r8,zero,253
 20035f8:	02003638 	rdprs	r8,zero,216
 20035fc:	02003f88 	cmpgei	r8,zero,254
 2003600:	02004168 	cmpgeui	r8,zero,261
 2003604:	02003f94 	movui	r8,254
 2003608:	02004168 	cmpgeui	r8,zero,261
 200360c:	02003ff8 	rdprs	r8,zero,255
 2003610:	02004168 	cmpgeui	r8,zero,261
 2003614:	02004168 	cmpgeui	r8,zero,261
 2003618:	02004018 	cmpnei	r8,zero,256
 200361c:	d8c03117 	ldw	r3,196(sp)
 2003620:	d8802e15 	stw	r2,184(sp)
 2003624:	00c7c83a 	sub	r3,zero,r3
 2003628:	d8c03115 	stw	r3,196(sp)
 200362c:	84000114 	ori	r16,r16,4
 2003630:	ac400007 	ldb	r17,0(r21)
 2003634:	003f9706 	br	2003494 <__alt_data_end+0xfe003494>
 2003638:	00800c04 	movi	r2,48
 200363c:	d8802705 	stb	r2,156(sp)
 2003640:	00801e04 	movi	r2,120
 2003644:	d8802745 	stb	r2,157(sp)
 2003648:	d9002a17 	ldw	r4,168(sp)
 200364c:	d8802e17 	ldw	r2,184(sp)
 2003650:	d8002785 	stb	zero,158(sp)
 2003654:	e011883a 	mov	r8,fp
 2003658:	10c00104 	addi	r3,r2,4
 200365c:	14c00017 	ldw	r19,0(r2)
 2003660:	002d883a 	mov	r22,zero
 2003664:	80800094 	ori	r2,r16,2
 2003668:	2002ca16 	blt	r4,zero,2004194 <___vfprintf_internal_r+0xe88>
 200366c:	00bfdfc4 	movi	r2,-129
 2003670:	80a4703a 	and	r18,r16,r2
 2003674:	d8c02e15 	stw	r3,184(sp)
 2003678:	94800094 	ori	r18,r18,2
 200367c:	9802b41e 	bne	r19,zero,2004150 <___vfprintf_internal_r+0xe44>
 2003680:	01408074 	movhi	r5,513
 2003684:	29456604 	addi	r5,r5,5528
 2003688:	d9403915 	stw	r5,228(sp)
 200368c:	04401e04 	movi	r17,120
 2003690:	d8802a17 	ldw	r2,168(sp)
 2003694:	0039883a 	mov	fp,zero
 2003698:	1001fa26 	beq	r2,zero,2003e84 <___vfprintf_internal_r+0xb78>
 200369c:	0027883a 	mov	r19,zero
 20036a0:	002d883a 	mov	r22,zero
 20036a4:	00021906 	br	2003f0c <___vfprintf_internal_r+0xc00>
 20036a8:	d9002d17 	ldw	r4,180(sp)
 20036ac:	b80b883a 	mov	r5,r23
 20036b0:	20057200 	call	2005720 <__swsetup_r>
 20036b4:	1005dc1e 	bne	r2,zero,2004e28 <___vfprintf_internal_r+0x1b1c>
 20036b8:	b880030b 	ldhu	r2,12(r23)
 20036bc:	00c00284 	movi	r3,10
 20036c0:	1080068c 	andi	r2,r2,26
 20036c4:	10ff3a1e 	bne	r2,r3,20033b0 <__alt_data_end+0xfe0033b0>
 20036c8:	b880038f 	ldh	r2,14(r23)
 20036cc:	103f3816 	blt	r2,zero,20033b0 <__alt_data_end+0xfe0033b0>
 20036d0:	d9c02e17 	ldw	r7,184(sp)
 20036d4:	d9002d17 	ldw	r4,180(sp)
 20036d8:	a80d883a 	mov	r6,r21
 20036dc:	b80b883a 	mov	r5,r23
 20036e0:	20056040 	call	2005604 <__sbprintf>
 20036e4:	00001106 	br	200372c <___vfprintf_internal_r+0x420>
 20036e8:	d9002d17 	ldw	r4,180(sp)
 20036ec:	d9801e04 	addi	r6,sp,120
 20036f0:	b80b883a 	mov	r5,r23
 20036f4:	20093840 	call	2009384 <__sprint_r>
 20036f8:	1000081e 	bne	r2,zero,200371c <___vfprintf_internal_r+0x410>
 20036fc:	da000404 	addi	r8,sp,16
 2003700:	003f5106 	br	2003448 <__alt_data_end+0xfe003448>
 2003704:	d8802017 	ldw	r2,128(sp)
 2003708:	10000426 	beq	r2,zero,200371c <___vfprintf_internal_r+0x410>
 200370c:	d9002d17 	ldw	r4,180(sp)
 2003710:	d9801e04 	addi	r6,sp,120
 2003714:	b80b883a 	mov	r5,r23
 2003718:	20093840 	call	2009384 <__sprint_r>
 200371c:	b880030b 	ldhu	r2,12(r23)
 2003720:	1080100c 	andi	r2,r2,64
 2003724:	1005c01e 	bne	r2,zero,2004e28 <___vfprintf_internal_r+0x1b1c>
 2003728:	d8802f17 	ldw	r2,188(sp)
 200372c:	dfc04717 	ldw	ra,284(sp)
 2003730:	df004617 	ldw	fp,280(sp)
 2003734:	ddc04517 	ldw	r23,276(sp)
 2003738:	dd804417 	ldw	r22,272(sp)
 200373c:	dd404317 	ldw	r21,268(sp)
 2003740:	dd004217 	ldw	r20,264(sp)
 2003744:	dcc04117 	ldw	r19,260(sp)
 2003748:	dc804017 	ldw	r18,256(sp)
 200374c:	dc403f17 	ldw	r17,252(sp)
 2003750:	dc003e17 	ldw	r16,248(sp)
 2003754:	dec04804 	addi	sp,sp,288
 2003758:	f800283a 	ret
 200375c:	d9002d17 	ldw	r4,180(sp)
 2003760:	20011800 	call	2001180 <__sinit>
 2003764:	003f0206 	br	2003370 <__alt_data_end+0xfe003370>
 2003768:	d9002e17 	ldw	r4,184(sp)
 200376c:	d9402e17 	ldw	r5,184(sp)
 2003770:	21000017 	ldw	r4,0(r4)
 2003774:	28800104 	addi	r2,r5,4
 2003778:	d9003115 	stw	r4,196(sp)
 200377c:	203fa716 	blt	r4,zero,200361c <__alt_data_end+0xfe00361c>
 2003780:	d8802e15 	stw	r2,184(sp)
 2003784:	ac400007 	ldb	r17,0(r21)
 2003788:	003f4206 	br	2003494 <__alt_data_end+0xfe003494>
 200378c:	ac400007 	ldb	r17,0(r21)
 2003790:	01000a84 	movi	r4,42
 2003794:	a8c00044 	addi	r3,r21,1
 2003798:	89075826 	beq	r17,r4,20054fc <___vfprintf_internal_r+0x21f0>
 200379c:	8cbff404 	addi	r18,r17,-48
 20037a0:	b486ae36 	bltu	r22,r18,200525c <___vfprintf_internal_r+0x1f50>
 20037a4:	0009883a 	mov	r4,zero
 20037a8:	1823883a 	mov	r17,r3
 20037ac:	01400284 	movi	r5,10
 20037b0:	2000a4c0 	call	2000a4c <__mulsi3>
 20037b4:	88c00007 	ldb	r3,0(r17)
 20037b8:	1489883a 	add	r4,r2,r18
 20037bc:	8d400044 	addi	r21,r17,1
 20037c0:	1cbff404 	addi	r18,r3,-48
 20037c4:	a823883a 	mov	r17,r21
 20037c8:	b4bff82e 	bgeu	r22,r18,20037ac <__alt_data_end+0xfe0037ac>
 20037cc:	1823883a 	mov	r17,r3
 20037d0:	2005f616 	blt	r4,zero,2004fac <___vfprintf_internal_r+0x1ca0>
 20037d4:	d9002a15 	stw	r4,168(sp)
 20037d8:	003f2f06 	br	2003498 <__alt_data_end+0xfe003498>
 20037dc:	84002014 	ori	r16,r16,128
 20037e0:	ac400007 	ldb	r17,0(r21)
 20037e4:	003f2b06 	br	2003494 <__alt_data_end+0xfe003494>
 20037e8:	8cbff404 	addi	r18,r17,-48
 20037ec:	d8003115 	stw	zero,196(sp)
 20037f0:	0009883a 	mov	r4,zero
 20037f4:	a823883a 	mov	r17,r21
 20037f8:	01400284 	movi	r5,10
 20037fc:	2000a4c0 	call	2000a4c <__mulsi3>
 2003800:	88c00007 	ldb	r3,0(r17)
 2003804:	9089883a 	add	r4,r18,r2
 2003808:	ad400044 	addi	r21,r21,1
 200380c:	1cbff404 	addi	r18,r3,-48
 2003810:	a823883a 	mov	r17,r21
 2003814:	b4bff82e 	bgeu	r22,r18,20037f8 <__alt_data_end+0xfe0037f8>
 2003818:	1823883a 	mov	r17,r3
 200381c:	d9003115 	stw	r4,196(sp)
 2003820:	003f1d06 	br	2003498 <__alt_data_end+0xfe003498>
 2003824:	8025883a 	mov	r18,r16
 2003828:	dc002903 	ldbu	r16,164(sp)
 200382c:	e011883a 	mov	r8,fp
 2003830:	84003fcc 	andi	r16,r16,255
 2003834:	8007531e 	bne	r16,zero,2005584 <___vfprintf_internal_r+0x2278>
 2003838:	94800414 	ori	r18,r18,16
 200383c:	9080080c 	andi	r2,r18,32
 2003840:	1003a326 	beq	r2,zero,20046d0 <___vfprintf_internal_r+0x13c4>
 2003844:	d9002e17 	ldw	r4,184(sp)
 2003848:	20800117 	ldw	r2,4(r4)
 200384c:	24c00017 	ldw	r19,0(r4)
 2003850:	21000204 	addi	r4,r4,8
 2003854:	d9002e15 	stw	r4,184(sp)
 2003858:	102d883a 	mov	r22,r2
 200385c:	10047316 	blt	r2,zero,2004a2c <___vfprintf_internal_r+0x1720>
 2003860:	d9002a17 	ldw	r4,168(sp)
 2003864:	df002783 	ldbu	fp,158(sp)
 2003868:	2003e416 	blt	r4,zero,20047fc <___vfprintf_internal_r+0x14f0>
 200386c:	00ffdfc4 	movi	r3,-129
 2003870:	9d84b03a 	or	r2,r19,r22
 2003874:	90e4703a 	and	r18,r18,r3
 2003878:	10018026 	beq	r2,zero,2003e7c <___vfprintf_internal_r+0xb70>
 200387c:	b003ab26 	beq	r22,zero,200472c <___vfprintf_internal_r+0x1420>
 2003880:	dc402915 	stw	r17,164(sp)
 2003884:	dc001e04 	addi	r16,sp,120
 2003888:	b023883a 	mov	r17,r22
 200388c:	402d883a 	mov	r22,r8
 2003890:	9809883a 	mov	r4,r19
 2003894:	880b883a 	mov	r5,r17
 2003898:	01800284 	movi	r6,10
 200389c:	000f883a 	mov	r7,zero
 20038a0:	200b5a00 	call	200b5a0 <__umoddi3>
 20038a4:	10800c04 	addi	r2,r2,48
 20038a8:	843fffc4 	addi	r16,r16,-1
 20038ac:	9809883a 	mov	r4,r19
 20038b0:	880b883a 	mov	r5,r17
 20038b4:	80800005 	stb	r2,0(r16)
 20038b8:	01800284 	movi	r6,10
 20038bc:	000f883a 	mov	r7,zero
 20038c0:	200afa40 	call	200afa4 <__udivdi3>
 20038c4:	1027883a 	mov	r19,r2
 20038c8:	10c4b03a 	or	r2,r2,r3
 20038cc:	1823883a 	mov	r17,r3
 20038d0:	103fef1e 	bne	r2,zero,2003890 <__alt_data_end+0xfe003890>
 20038d4:	d8c02817 	ldw	r3,160(sp)
 20038d8:	dc402917 	ldw	r17,164(sp)
 20038dc:	b011883a 	mov	r8,r22
 20038e0:	1c07c83a 	sub	r3,r3,r16
 20038e4:	d8c02b15 	stw	r3,172(sp)
 20038e8:	00005f06 	br	2003a68 <___vfprintf_internal_r+0x75c>
 20038ec:	8025883a 	mov	r18,r16
 20038f0:	dc002903 	ldbu	r16,164(sp)
 20038f4:	e011883a 	mov	r8,fp
 20038f8:	84003fcc 	andi	r16,r16,255
 20038fc:	80071e1e 	bne	r16,zero,2005578 <___vfprintf_internal_r+0x226c>
 2003900:	9080020c 	andi	r2,r18,8
 2003904:	1004af26 	beq	r2,zero,2004bc4 <___vfprintf_internal_r+0x18b8>
 2003908:	d9002e17 	ldw	r4,184(sp)
 200390c:	d9402e17 	ldw	r5,184(sp)
 2003910:	d8802e17 	ldw	r2,184(sp)
 2003914:	21000017 	ldw	r4,0(r4)
 2003918:	29400117 	ldw	r5,4(r5)
 200391c:	10800204 	addi	r2,r2,8
 2003920:	d9003615 	stw	r4,216(sp)
 2003924:	d9403815 	stw	r5,224(sp)
 2003928:	d8802e15 	stw	r2,184(sp)
 200392c:	d9003617 	ldw	r4,216(sp)
 2003930:	d9403817 	ldw	r5,224(sp)
 2003934:	da003d15 	stw	r8,244(sp)
 2003938:	04000044 	movi	r16,1
 200393c:	20091380 	call	2009138 <__fpclassifyd>
 2003940:	da003d17 	ldw	r8,244(sp)
 2003944:	1404441e 	bne	r2,r16,2004a58 <___vfprintf_internal_r+0x174c>
 2003948:	d9003617 	ldw	r4,216(sp)
 200394c:	d9403817 	ldw	r5,224(sp)
 2003950:	000d883a 	mov	r6,zero
 2003954:	000f883a 	mov	r7,zero
 2003958:	200cf440 	call	200cf44 <__ledf2>
 200395c:	da003d17 	ldw	r8,244(sp)
 2003960:	1005e316 	blt	r2,zero,20050f0 <___vfprintf_internal_r+0x1de4>
 2003964:	df002783 	ldbu	fp,158(sp)
 2003968:	008011c4 	movi	r2,71
 200396c:	1445580e 	bge	r2,r17,2004ed0 <___vfprintf_internal_r+0x1bc4>
 2003970:	04008074 	movhi	r16,513
 2003974:	84055e04 	addi	r16,r16,5496
 2003978:	00c000c4 	movi	r3,3
 200397c:	00bfdfc4 	movi	r2,-129
 2003980:	d8c02915 	stw	r3,164(sp)
 2003984:	90a4703a 	and	r18,r18,r2
 2003988:	d8c02b15 	stw	r3,172(sp)
 200398c:	d8002a15 	stw	zero,168(sp)
 2003990:	d8003215 	stw	zero,200(sp)
 2003994:	00003a06 	br	2003a80 <___vfprintf_internal_r+0x774>
 2003998:	84000214 	ori	r16,r16,8
 200399c:	ac400007 	ldb	r17,0(r21)
 20039a0:	003ebc06 	br	2003494 <__alt_data_end+0xfe003494>
 20039a4:	8025883a 	mov	r18,r16
 20039a8:	dc002903 	ldbu	r16,164(sp)
 20039ac:	e011883a 	mov	r8,fp
 20039b0:	84003fcc 	andi	r16,r16,255
 20039b4:	8007001e 	bne	r16,zero,20055b8 <___vfprintf_internal_r+0x22ac>
 20039b8:	94800414 	ori	r18,r18,16
 20039bc:	9080080c 	andi	r2,r18,32
 20039c0:	1002fa26 	beq	r2,zero,20045ac <___vfprintf_internal_r+0x12a0>
 20039c4:	d9002e17 	ldw	r4,184(sp)
 20039c8:	d9402a17 	ldw	r5,168(sp)
 20039cc:	d8002785 	stb	zero,158(sp)
 20039d0:	20800204 	addi	r2,r4,8
 20039d4:	24c00017 	ldw	r19,0(r4)
 20039d8:	25800117 	ldw	r22,4(r4)
 20039dc:	2804b116 	blt	r5,zero,2004ca4 <___vfprintf_internal_r+0x1998>
 20039e0:	013fdfc4 	movi	r4,-129
 20039e4:	9d86b03a 	or	r3,r19,r22
 20039e8:	d8802e15 	stw	r2,184(sp)
 20039ec:	9124703a 	and	r18,r18,r4
 20039f0:	1802fb1e 	bne	r3,zero,20045e0 <___vfprintf_internal_r+0x12d4>
 20039f4:	d8c02a17 	ldw	r3,168(sp)
 20039f8:	0039883a 	mov	fp,zero
 20039fc:	1805e526 	beq	r3,zero,2005194 <___vfprintf_internal_r+0x1e88>
 2003a00:	0027883a 	mov	r19,zero
 2003a04:	002d883a 	mov	r22,zero
 2003a08:	dc001e04 	addi	r16,sp,120
 2003a0c:	9806d0fa 	srli	r3,r19,3
 2003a10:	b008977a 	slli	r4,r22,29
 2003a14:	b02cd0fa 	srli	r22,r22,3
 2003a18:	9cc001cc 	andi	r19,r19,7
 2003a1c:	98800c04 	addi	r2,r19,48
 2003a20:	843fffc4 	addi	r16,r16,-1
 2003a24:	20e6b03a 	or	r19,r4,r3
 2003a28:	80800005 	stb	r2,0(r16)
 2003a2c:	9d86b03a 	or	r3,r19,r22
 2003a30:	183ff61e 	bne	r3,zero,2003a0c <__alt_data_end+0xfe003a0c>
 2003a34:	90c0004c 	andi	r3,r18,1
 2003a38:	18014126 	beq	r3,zero,2003f40 <___vfprintf_internal_r+0xc34>
 2003a3c:	10803fcc 	andi	r2,r2,255
 2003a40:	1080201c 	xori	r2,r2,128
 2003a44:	10bfe004 	addi	r2,r2,-128
 2003a48:	00c00c04 	movi	r3,48
 2003a4c:	10c13c26 	beq	r2,r3,2003f40 <___vfprintf_internal_r+0xc34>
 2003a50:	80ffffc5 	stb	r3,-1(r16)
 2003a54:	d8c02817 	ldw	r3,160(sp)
 2003a58:	80bfffc4 	addi	r2,r16,-1
 2003a5c:	1021883a 	mov	r16,r2
 2003a60:	1887c83a 	sub	r3,r3,r2
 2003a64:	d8c02b15 	stw	r3,172(sp)
 2003a68:	d8802b17 	ldw	r2,172(sp)
 2003a6c:	d9002a17 	ldw	r4,168(sp)
 2003a70:	1100010e 	bge	r2,r4,2003a78 <___vfprintf_internal_r+0x76c>
 2003a74:	2005883a 	mov	r2,r4
 2003a78:	d8802915 	stw	r2,164(sp)
 2003a7c:	d8003215 	stw	zero,200(sp)
 2003a80:	e7003fcc 	andi	fp,fp,255
 2003a84:	e700201c 	xori	fp,fp,128
 2003a88:	e73fe004 	addi	fp,fp,-128
 2003a8c:	e0000326 	beq	fp,zero,2003a9c <___vfprintf_internal_r+0x790>
 2003a90:	d8c02917 	ldw	r3,164(sp)
 2003a94:	18c00044 	addi	r3,r3,1
 2003a98:	d8c02915 	stw	r3,164(sp)
 2003a9c:	90c0008c 	andi	r3,r18,2
 2003aa0:	d8c02c15 	stw	r3,176(sp)
 2003aa4:	18000326 	beq	r3,zero,2003ab4 <___vfprintf_internal_r+0x7a8>
 2003aa8:	d8c02917 	ldw	r3,164(sp)
 2003aac:	18c00084 	addi	r3,r3,2
 2003ab0:	d8c02915 	stw	r3,164(sp)
 2003ab4:	90c0210c 	andi	r3,r18,132
 2003ab8:	d8c03015 	stw	r3,192(sp)
 2003abc:	1801c51e 	bne	r3,zero,20041d4 <___vfprintf_internal_r+0xec8>
 2003ac0:	d9003117 	ldw	r4,196(sp)
 2003ac4:	d8c02917 	ldw	r3,164(sp)
 2003ac8:	20e7c83a 	sub	r19,r4,r3
 2003acc:	04c1c10e 	bge	zero,r19,20041d4 <___vfprintf_internal_r+0xec8>
 2003ad0:	02400404 	movi	r9,16
 2003ad4:	d8c02017 	ldw	r3,128(sp)
 2003ad8:	d8801f17 	ldw	r2,124(sp)
 2003adc:	4cc52f0e 	bge	r9,r19,2004f9c <___vfprintf_internal_r+0x1c90>
 2003ae0:	01408074 	movhi	r5,513
 2003ae4:	29457184 	addi	r5,r5,5574
 2003ae8:	dc403b15 	stw	r17,236(sp)
 2003aec:	d9403515 	stw	r5,212(sp)
 2003af0:	9823883a 	mov	r17,r19
 2003af4:	482d883a 	mov	r22,r9
 2003af8:	9027883a 	mov	r19,r18
 2003afc:	070001c4 	movi	fp,7
 2003b00:	8025883a 	mov	r18,r16
 2003b04:	dc002d17 	ldw	r16,180(sp)
 2003b08:	00000306 	br	2003b18 <___vfprintf_internal_r+0x80c>
 2003b0c:	8c7ffc04 	addi	r17,r17,-16
 2003b10:	42000204 	addi	r8,r8,8
 2003b14:	b440130e 	bge	r22,r17,2003b64 <___vfprintf_internal_r+0x858>
 2003b18:	01008074 	movhi	r4,513
 2003b1c:	18c00404 	addi	r3,r3,16
 2003b20:	10800044 	addi	r2,r2,1
 2003b24:	21057184 	addi	r4,r4,5574
 2003b28:	41000015 	stw	r4,0(r8)
 2003b2c:	45800115 	stw	r22,4(r8)
 2003b30:	d8c02015 	stw	r3,128(sp)
 2003b34:	d8801f15 	stw	r2,124(sp)
 2003b38:	e0bff40e 	bge	fp,r2,2003b0c <__alt_data_end+0xfe003b0c>
 2003b3c:	d9801e04 	addi	r6,sp,120
 2003b40:	b80b883a 	mov	r5,r23
 2003b44:	8009883a 	mov	r4,r16
 2003b48:	20093840 	call	2009384 <__sprint_r>
 2003b4c:	103ef31e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2003b50:	8c7ffc04 	addi	r17,r17,-16
 2003b54:	d8c02017 	ldw	r3,128(sp)
 2003b58:	d8801f17 	ldw	r2,124(sp)
 2003b5c:	da000404 	addi	r8,sp,16
 2003b60:	b47fed16 	blt	r22,r17,2003b18 <__alt_data_end+0xfe003b18>
 2003b64:	9021883a 	mov	r16,r18
 2003b68:	9825883a 	mov	r18,r19
 2003b6c:	8827883a 	mov	r19,r17
 2003b70:	dc403b17 	ldw	r17,236(sp)
 2003b74:	d9403517 	ldw	r5,212(sp)
 2003b78:	98c7883a 	add	r3,r19,r3
 2003b7c:	10800044 	addi	r2,r2,1
 2003b80:	41400015 	stw	r5,0(r8)
 2003b84:	44c00115 	stw	r19,4(r8)
 2003b88:	d8c02015 	stw	r3,128(sp)
 2003b8c:	d8801f15 	stw	r2,124(sp)
 2003b90:	010001c4 	movi	r4,7
 2003b94:	2082c516 	blt	r4,r2,20046ac <___vfprintf_internal_r+0x13a0>
 2003b98:	df002787 	ldb	fp,158(sp)
 2003b9c:	42000204 	addi	r8,r8,8
 2003ba0:	e0000c26 	beq	fp,zero,2003bd4 <___vfprintf_internal_r+0x8c8>
 2003ba4:	d8801f17 	ldw	r2,124(sp)
 2003ba8:	d9002784 	addi	r4,sp,158
 2003bac:	18c00044 	addi	r3,r3,1
 2003bb0:	10800044 	addi	r2,r2,1
 2003bb4:	41000015 	stw	r4,0(r8)
 2003bb8:	01000044 	movi	r4,1
 2003bbc:	41000115 	stw	r4,4(r8)
 2003bc0:	d8c02015 	stw	r3,128(sp)
 2003bc4:	d8801f15 	stw	r2,124(sp)
 2003bc8:	010001c4 	movi	r4,7
 2003bcc:	20825e16 	blt	r4,r2,2004548 <___vfprintf_internal_r+0x123c>
 2003bd0:	42000204 	addi	r8,r8,8
 2003bd4:	d8802c17 	ldw	r2,176(sp)
 2003bd8:	10000c26 	beq	r2,zero,2003c0c <___vfprintf_internal_r+0x900>
 2003bdc:	d8801f17 	ldw	r2,124(sp)
 2003be0:	d9002704 	addi	r4,sp,156
 2003be4:	18c00084 	addi	r3,r3,2
 2003be8:	10800044 	addi	r2,r2,1
 2003bec:	41000015 	stw	r4,0(r8)
 2003bf0:	01000084 	movi	r4,2
 2003bf4:	41000115 	stw	r4,4(r8)
 2003bf8:	d8c02015 	stw	r3,128(sp)
 2003bfc:	d8801f15 	stw	r2,124(sp)
 2003c00:	010001c4 	movi	r4,7
 2003c04:	20825816 	blt	r4,r2,2004568 <___vfprintf_internal_r+0x125c>
 2003c08:	42000204 	addi	r8,r8,8
 2003c0c:	d9003017 	ldw	r4,192(sp)
 2003c10:	00802004 	movi	r2,128
 2003c14:	2081bb26 	beq	r4,r2,2004304 <___vfprintf_internal_r+0xff8>
 2003c18:	d9402a17 	ldw	r5,168(sp)
 2003c1c:	d8802b17 	ldw	r2,172(sp)
 2003c20:	28adc83a 	sub	r22,r5,r2
 2003c24:	0580310e 	bge	zero,r22,2003cec <___vfprintf_internal_r+0x9e0>
 2003c28:	07000404 	movi	fp,16
 2003c2c:	d8801f17 	ldw	r2,124(sp)
 2003c30:	e584360e 	bge	fp,r22,2004d0c <___vfprintf_internal_r+0x1a00>
 2003c34:	01408074 	movhi	r5,513
 2003c38:	29456d84 	addi	r5,r5,5558
 2003c3c:	dc402a15 	stw	r17,168(sp)
 2003c40:	d9402c15 	stw	r5,176(sp)
 2003c44:	b023883a 	mov	r17,r22
 2003c48:	04c001c4 	movi	r19,7
 2003c4c:	a82d883a 	mov	r22,r21
 2003c50:	902b883a 	mov	r21,r18
 2003c54:	8025883a 	mov	r18,r16
 2003c58:	dc002d17 	ldw	r16,180(sp)
 2003c5c:	00000306 	br	2003c6c <___vfprintf_internal_r+0x960>
 2003c60:	8c7ffc04 	addi	r17,r17,-16
 2003c64:	42000204 	addi	r8,r8,8
 2003c68:	e440110e 	bge	fp,r17,2003cb0 <___vfprintf_internal_r+0x9a4>
 2003c6c:	18c00404 	addi	r3,r3,16
 2003c70:	10800044 	addi	r2,r2,1
 2003c74:	45000015 	stw	r20,0(r8)
 2003c78:	47000115 	stw	fp,4(r8)
 2003c7c:	d8c02015 	stw	r3,128(sp)
 2003c80:	d8801f15 	stw	r2,124(sp)
 2003c84:	98bff60e 	bge	r19,r2,2003c60 <__alt_data_end+0xfe003c60>
 2003c88:	d9801e04 	addi	r6,sp,120
 2003c8c:	b80b883a 	mov	r5,r23
 2003c90:	8009883a 	mov	r4,r16
 2003c94:	20093840 	call	2009384 <__sprint_r>
 2003c98:	103ea01e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2003c9c:	8c7ffc04 	addi	r17,r17,-16
 2003ca0:	d8c02017 	ldw	r3,128(sp)
 2003ca4:	d8801f17 	ldw	r2,124(sp)
 2003ca8:	da000404 	addi	r8,sp,16
 2003cac:	e47fef16 	blt	fp,r17,2003c6c <__alt_data_end+0xfe003c6c>
 2003cb0:	9021883a 	mov	r16,r18
 2003cb4:	a825883a 	mov	r18,r21
 2003cb8:	b02b883a 	mov	r21,r22
 2003cbc:	882d883a 	mov	r22,r17
 2003cc0:	dc402a17 	ldw	r17,168(sp)
 2003cc4:	d9002c17 	ldw	r4,176(sp)
 2003cc8:	1d87883a 	add	r3,r3,r22
 2003ccc:	10800044 	addi	r2,r2,1
 2003cd0:	41000015 	stw	r4,0(r8)
 2003cd4:	45800115 	stw	r22,4(r8)
 2003cd8:	d8c02015 	stw	r3,128(sp)
 2003cdc:	d8801f15 	stw	r2,124(sp)
 2003ce0:	010001c4 	movi	r4,7
 2003ce4:	20821016 	blt	r4,r2,2004528 <___vfprintf_internal_r+0x121c>
 2003ce8:	42000204 	addi	r8,r8,8
 2003cec:	9080400c 	andi	r2,r18,256
 2003cf0:	10013a1e 	bne	r2,zero,20041dc <___vfprintf_internal_r+0xed0>
 2003cf4:	d9402b17 	ldw	r5,172(sp)
 2003cf8:	d8801f17 	ldw	r2,124(sp)
 2003cfc:	44000015 	stw	r16,0(r8)
 2003d00:	1947883a 	add	r3,r3,r5
 2003d04:	10800044 	addi	r2,r2,1
 2003d08:	41400115 	stw	r5,4(r8)
 2003d0c:	d8c02015 	stw	r3,128(sp)
 2003d10:	d8801f15 	stw	r2,124(sp)
 2003d14:	010001c4 	movi	r4,7
 2003d18:	2081f516 	blt	r4,r2,20044f0 <___vfprintf_internal_r+0x11e4>
 2003d1c:	42000204 	addi	r8,r8,8
 2003d20:	9480010c 	andi	r18,r18,4
 2003d24:	90003226 	beq	r18,zero,2003df0 <___vfprintf_internal_r+0xae4>
 2003d28:	d9403117 	ldw	r5,196(sp)
 2003d2c:	d8802917 	ldw	r2,164(sp)
 2003d30:	28a1c83a 	sub	r16,r5,r2
 2003d34:	04002e0e 	bge	zero,r16,2003df0 <___vfprintf_internal_r+0xae4>
 2003d38:	04400404 	movi	r17,16
 2003d3c:	d8801f17 	ldw	r2,124(sp)
 2003d40:	8c04c40e 	bge	r17,r16,2005054 <___vfprintf_internal_r+0x1d48>
 2003d44:	01408074 	movhi	r5,513
 2003d48:	29457184 	addi	r5,r5,5574
 2003d4c:	d9403515 	stw	r5,212(sp)
 2003d50:	048001c4 	movi	r18,7
 2003d54:	dcc02d17 	ldw	r19,180(sp)
 2003d58:	00000306 	br	2003d68 <___vfprintf_internal_r+0xa5c>
 2003d5c:	843ffc04 	addi	r16,r16,-16
 2003d60:	42000204 	addi	r8,r8,8
 2003d64:	8c00130e 	bge	r17,r16,2003db4 <___vfprintf_internal_r+0xaa8>
 2003d68:	01008074 	movhi	r4,513
 2003d6c:	18c00404 	addi	r3,r3,16
 2003d70:	10800044 	addi	r2,r2,1
 2003d74:	21057184 	addi	r4,r4,5574
 2003d78:	41000015 	stw	r4,0(r8)
 2003d7c:	44400115 	stw	r17,4(r8)
 2003d80:	d8c02015 	stw	r3,128(sp)
 2003d84:	d8801f15 	stw	r2,124(sp)
 2003d88:	90bff40e 	bge	r18,r2,2003d5c <__alt_data_end+0xfe003d5c>
 2003d8c:	d9801e04 	addi	r6,sp,120
 2003d90:	b80b883a 	mov	r5,r23
 2003d94:	9809883a 	mov	r4,r19
 2003d98:	20093840 	call	2009384 <__sprint_r>
 2003d9c:	103e5f1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2003da0:	843ffc04 	addi	r16,r16,-16
 2003da4:	d8c02017 	ldw	r3,128(sp)
 2003da8:	d8801f17 	ldw	r2,124(sp)
 2003dac:	da000404 	addi	r8,sp,16
 2003db0:	8c3fed16 	blt	r17,r16,2003d68 <__alt_data_end+0xfe003d68>
 2003db4:	d9403517 	ldw	r5,212(sp)
 2003db8:	1c07883a 	add	r3,r3,r16
 2003dbc:	10800044 	addi	r2,r2,1
 2003dc0:	41400015 	stw	r5,0(r8)
 2003dc4:	44000115 	stw	r16,4(r8)
 2003dc8:	d8c02015 	stw	r3,128(sp)
 2003dcc:	d8801f15 	stw	r2,124(sp)
 2003dd0:	010001c4 	movi	r4,7
 2003dd4:	2080060e 	bge	r4,r2,2003df0 <___vfprintf_internal_r+0xae4>
 2003dd8:	d9002d17 	ldw	r4,180(sp)
 2003ddc:	d9801e04 	addi	r6,sp,120
 2003de0:	b80b883a 	mov	r5,r23
 2003de4:	20093840 	call	2009384 <__sprint_r>
 2003de8:	103e4c1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2003dec:	d8c02017 	ldw	r3,128(sp)
 2003df0:	d8803117 	ldw	r2,196(sp)
 2003df4:	d9002917 	ldw	r4,164(sp)
 2003df8:	1100010e 	bge	r2,r4,2003e00 <___vfprintf_internal_r+0xaf4>
 2003dfc:	2005883a 	mov	r2,r4
 2003e00:	d9402f17 	ldw	r5,188(sp)
 2003e04:	288b883a 	add	r5,r5,r2
 2003e08:	d9402f15 	stw	r5,188(sp)
 2003e0c:	1801c01e 	bne	r3,zero,2004510 <___vfprintf_internal_r+0x1204>
 2003e10:	a8800007 	ldb	r2,0(r21)
 2003e14:	d8001f15 	stw	zero,124(sp)
 2003e18:	da000404 	addi	r8,sp,16
 2003e1c:	103d751e 	bne	r2,zero,20033f4 <__alt_data_end+0xfe0033f4>
 2003e20:	a823883a 	mov	r17,r21
 2003e24:	003d8b06 	br	2003454 <__alt_data_end+0xfe003454>
 2003e28:	8025883a 	mov	r18,r16
 2003e2c:	dc002903 	ldbu	r16,164(sp)
 2003e30:	e011883a 	mov	r8,fp
 2003e34:	84003fcc 	andi	r16,r16,255
 2003e38:	8005e51e 	bne	r16,zero,20055d0 <___vfprintf_internal_r+0x22c4>
 2003e3c:	94800414 	ori	r18,r18,16
 2003e40:	9080080c 	andi	r2,r18,32
 2003e44:	10022b26 	beq	r2,zero,20046f4 <___vfprintf_internal_r+0x13e8>
 2003e48:	d9002e17 	ldw	r4,184(sp)
 2003e4c:	d9402a17 	ldw	r5,168(sp)
 2003e50:	d8002785 	stb	zero,158(sp)
 2003e54:	20c00204 	addi	r3,r4,8
 2003e58:	24c00017 	ldw	r19,0(r4)
 2003e5c:	25800117 	ldw	r22,4(r4)
 2003e60:	28042e16 	blt	r5,zero,2004f1c <___vfprintf_internal_r+0x1c10>
 2003e64:	013fdfc4 	movi	r4,-129
 2003e68:	9d84b03a 	or	r2,r19,r22
 2003e6c:	d8c02e15 	stw	r3,184(sp)
 2003e70:	9124703a 	and	r18,r18,r4
 2003e74:	0039883a 	mov	fp,zero
 2003e78:	103e801e 	bne	r2,zero,200387c <__alt_data_end+0xfe00387c>
 2003e7c:	d9002a17 	ldw	r4,168(sp)
 2003e80:	2002e01e 	bne	r4,zero,2004a04 <___vfprintf_internal_r+0x16f8>
 2003e84:	d8002a15 	stw	zero,168(sp)
 2003e88:	d8002b15 	stw	zero,172(sp)
 2003e8c:	dc001e04 	addi	r16,sp,120
 2003e90:	003ef506 	br	2003a68 <__alt_data_end+0xfe003a68>
 2003e94:	8025883a 	mov	r18,r16
 2003e98:	dc002903 	ldbu	r16,164(sp)
 2003e9c:	e011883a 	mov	r8,fp
 2003ea0:	84003fcc 	andi	r16,r16,255
 2003ea4:	8005ba1e 	bne	r16,zero,2005590 <___vfprintf_internal_r+0x2284>
 2003ea8:	01008074 	movhi	r4,513
 2003eac:	21056104 	addi	r4,r4,5508
 2003eb0:	d9003915 	stw	r4,228(sp)
 2003eb4:	9080080c 	andi	r2,r18,32
 2003eb8:	10006126 	beq	r2,zero,2004040 <___vfprintf_internal_r+0xd34>
 2003ebc:	d9402e17 	ldw	r5,184(sp)
 2003ec0:	2cc00017 	ldw	r19,0(r5)
 2003ec4:	2d800117 	ldw	r22,4(r5)
 2003ec8:	29400204 	addi	r5,r5,8
 2003ecc:	d9402e15 	stw	r5,184(sp)
 2003ed0:	9080004c 	andi	r2,r18,1
 2003ed4:	1001ac26 	beq	r2,zero,2004588 <___vfprintf_internal_r+0x127c>
 2003ed8:	9d84b03a 	or	r2,r19,r22
 2003edc:	10038526 	beq	r2,zero,2004cf4 <___vfprintf_internal_r+0x19e8>
 2003ee0:	d8c02a17 	ldw	r3,168(sp)
 2003ee4:	00800c04 	movi	r2,48
 2003ee8:	d8802705 	stb	r2,156(sp)
 2003eec:	dc402745 	stb	r17,157(sp)
 2003ef0:	d8002785 	stb	zero,158(sp)
 2003ef4:	90800094 	ori	r2,r18,2
 2003ef8:	18047916 	blt	r3,zero,20050e0 <___vfprintf_internal_r+0x1dd4>
 2003efc:	00bfdfc4 	movi	r2,-129
 2003f00:	90a4703a 	and	r18,r18,r2
 2003f04:	94800094 	ori	r18,r18,2
 2003f08:	0039883a 	mov	fp,zero
 2003f0c:	d9003917 	ldw	r4,228(sp)
 2003f10:	dc001e04 	addi	r16,sp,120
 2003f14:	988003cc 	andi	r2,r19,15
 2003f18:	b006973a 	slli	r3,r22,28
 2003f1c:	2085883a 	add	r2,r4,r2
 2003f20:	9826d13a 	srli	r19,r19,4
 2003f24:	10800003 	ldbu	r2,0(r2)
 2003f28:	b02cd13a 	srli	r22,r22,4
 2003f2c:	843fffc4 	addi	r16,r16,-1
 2003f30:	1ce6b03a 	or	r19,r3,r19
 2003f34:	80800005 	stb	r2,0(r16)
 2003f38:	9d84b03a 	or	r2,r19,r22
 2003f3c:	103ff51e 	bne	r2,zero,2003f14 <__alt_data_end+0xfe003f14>
 2003f40:	d8c02817 	ldw	r3,160(sp)
 2003f44:	1c07c83a 	sub	r3,r3,r16
 2003f48:	d8c02b15 	stw	r3,172(sp)
 2003f4c:	003ec606 	br	2003a68 <__alt_data_end+0xfe003a68>
 2003f50:	8025883a 	mov	r18,r16
 2003f54:	dc002903 	ldbu	r16,164(sp)
 2003f58:	e011883a 	mov	r8,fp
 2003f5c:	84003fcc 	andi	r16,r16,255
 2003f60:	803e9626 	beq	r16,zero,20039bc <__alt_data_end+0xfe0039bc>
 2003f64:	d8c02b03 	ldbu	r3,172(sp)
 2003f68:	d8c02785 	stb	r3,158(sp)
 2003f6c:	003e9306 	br	20039bc <__alt_data_end+0xfe0039bc>
 2003f70:	00c00044 	movi	r3,1
 2003f74:	d8c02905 	stb	r3,164(sp)
 2003f78:	00c00ac4 	movi	r3,43
 2003f7c:	d8c02b05 	stb	r3,172(sp)
 2003f80:	ac400007 	ldb	r17,0(r21)
 2003f84:	003d4306 	br	2003494 <__alt_data_end+0xfe003494>
 2003f88:	84000814 	ori	r16,r16,32
 2003f8c:	ac400007 	ldb	r17,0(r21)
 2003f90:	003d4006 	br	2003494 <__alt_data_end+0xfe003494>
 2003f94:	d8802e17 	ldw	r2,184(sp)
 2003f98:	8025883a 	mov	r18,r16
 2003f9c:	d8002785 	stb	zero,158(sp)
 2003fa0:	14000017 	ldw	r16,0(r2)
 2003fa4:	e011883a 	mov	r8,fp
 2003fa8:	14c00104 	addi	r19,r2,4
 2003fac:	80042d26 	beq	r16,zero,2005064 <___vfprintf_internal_r+0x1d58>
 2003fb0:	d8c02a17 	ldw	r3,168(sp)
 2003fb4:	1803e416 	blt	r3,zero,2004f48 <___vfprintf_internal_r+0x1c3c>
 2003fb8:	180d883a 	mov	r6,r3
 2003fbc:	000b883a 	mov	r5,zero
 2003fc0:	8009883a 	mov	r4,r16
 2003fc4:	df003d15 	stw	fp,244(sp)
 2003fc8:	200787c0 	call	200787c <memchr>
 2003fcc:	da003d17 	ldw	r8,244(sp)
 2003fd0:	10046826 	beq	r2,zero,2005174 <___vfprintf_internal_r+0x1e68>
 2003fd4:	1405c83a 	sub	r2,r2,r16
 2003fd8:	d8802b15 	stw	r2,172(sp)
 2003fdc:	1003e016 	blt	r2,zero,2004f60 <___vfprintf_internal_r+0x1c54>
 2003fe0:	df002783 	ldbu	fp,158(sp)
 2003fe4:	d8802915 	stw	r2,164(sp)
 2003fe8:	dcc02e15 	stw	r19,184(sp)
 2003fec:	d8002a15 	stw	zero,168(sp)
 2003ff0:	d8003215 	stw	zero,200(sp)
 2003ff4:	003ea206 	br	2003a80 <__alt_data_end+0xfe003a80>
 2003ff8:	8025883a 	mov	r18,r16
 2003ffc:	dc002903 	ldbu	r16,164(sp)
 2004000:	e011883a 	mov	r8,fp
 2004004:	84003fcc 	andi	r16,r16,255
 2004008:	803f8d26 	beq	r16,zero,2003e40 <__alt_data_end+0xfe003e40>
 200400c:	d8c02b03 	ldbu	r3,172(sp)
 2004010:	d8c02785 	stb	r3,158(sp)
 2004014:	003f8a06 	br	2003e40 <__alt_data_end+0xfe003e40>
 2004018:	8025883a 	mov	r18,r16
 200401c:	dc002903 	ldbu	r16,164(sp)
 2004020:	e011883a 	mov	r8,fp
 2004024:	84003fcc 	andi	r16,r16,255
 2004028:	8005661e 	bne	r16,zero,20055c4 <___vfprintf_internal_r+0x22b8>
 200402c:	01008074 	movhi	r4,513
 2004030:	21056604 	addi	r4,r4,5528
 2004034:	d9003915 	stw	r4,228(sp)
 2004038:	9080080c 	andi	r2,r18,32
 200403c:	103f9f1e 	bne	r2,zero,2003ebc <__alt_data_end+0xfe003ebc>
 2004040:	9080040c 	andi	r2,r18,16
 2004044:	1002eb26 	beq	r2,zero,2004bf4 <___vfprintf_internal_r+0x18e8>
 2004048:	d8802e17 	ldw	r2,184(sp)
 200404c:	002d883a 	mov	r22,zero
 2004050:	14c00017 	ldw	r19,0(r2)
 2004054:	10800104 	addi	r2,r2,4
 2004058:	d8802e15 	stw	r2,184(sp)
 200405c:	003f9c06 	br	2003ed0 <__alt_data_end+0xfe003ed0>
 2004060:	d8802b07 	ldb	r2,172(sp)
 2004064:	1002e11e 	bne	r2,zero,2004bec <___vfprintf_internal_r+0x18e0>
 2004068:	00c00044 	movi	r3,1
 200406c:	d8c02905 	stb	r3,164(sp)
 2004070:	00c00804 	movi	r3,32
 2004074:	d8c02b05 	stb	r3,172(sp)
 2004078:	ac400007 	ldb	r17,0(r21)
 200407c:	003d0506 	br	2003494 <__alt_data_end+0xfe003494>
 2004080:	84000054 	ori	r16,r16,1
 2004084:	ac400007 	ldb	r17,0(r21)
 2004088:	003d0206 	br	2003494 <__alt_data_end+0xfe003494>
 200408c:	8025883a 	mov	r18,r16
 2004090:	dc002903 	ldbu	r16,164(sp)
 2004094:	e011883a 	mov	r8,fp
 2004098:	84003fcc 	andi	r16,r16,255
 200409c:	803de726 	beq	r16,zero,200383c <__alt_data_end+0xfe00383c>
 20040a0:	d8c02b03 	ldbu	r3,172(sp)
 20040a4:	d8c02785 	stb	r3,158(sp)
 20040a8:	003de406 	br	200383c <__alt_data_end+0xfe00383c>
 20040ac:	84001014 	ori	r16,r16,64
 20040b0:	ac400007 	ldb	r17,0(r21)
 20040b4:	003cf706 	br	2003494 <__alt_data_end+0xfe003494>
 20040b8:	ac400007 	ldb	r17,0(r21)
 20040bc:	00801b04 	movi	r2,108
 20040c0:	88838f26 	beq	r17,r2,2004f00 <___vfprintf_internal_r+0x1bf4>
 20040c4:	84000414 	ori	r16,r16,16
 20040c8:	003cf206 	br	2003494 <__alt_data_end+0xfe003494>
 20040cc:	8025883a 	mov	r18,r16
 20040d0:	dc002903 	ldbu	r16,164(sp)
 20040d4:	e011883a 	mov	r8,fp
 20040d8:	84003fcc 	andi	r16,r16,255
 20040dc:	80053f1e 	bne	r16,zero,20055dc <___vfprintf_internal_r+0x22d0>
 20040e0:	9080080c 	andi	r2,r18,32
 20040e4:	1002d226 	beq	r2,zero,2004c30 <___vfprintf_internal_r+0x1924>
 20040e8:	d9002e17 	ldw	r4,184(sp)
 20040ec:	d9402f17 	ldw	r5,188(sp)
 20040f0:	20800017 	ldw	r2,0(r4)
 20040f4:	2807d7fa 	srai	r3,r5,31
 20040f8:	21000104 	addi	r4,r4,4
 20040fc:	d9002e15 	stw	r4,184(sp)
 2004100:	11400015 	stw	r5,0(r2)
 2004104:	10c00115 	stw	r3,4(r2)
 2004108:	003cb806 	br	20033ec <__alt_data_end+0xfe0033ec>
 200410c:	d8c02e17 	ldw	r3,184(sp)
 2004110:	d9002e17 	ldw	r4,184(sp)
 2004114:	8025883a 	mov	r18,r16
 2004118:	18800017 	ldw	r2,0(r3)
 200411c:	21000104 	addi	r4,r4,4
 2004120:	00c00044 	movi	r3,1
 2004124:	e011883a 	mov	r8,fp
 2004128:	d8c02915 	stw	r3,164(sp)
 200412c:	d8002785 	stb	zero,158(sp)
 2004130:	d8801405 	stb	r2,80(sp)
 2004134:	d9002e15 	stw	r4,184(sp)
 2004138:	d8c02b15 	stw	r3,172(sp)
 200413c:	d8002a15 	stw	zero,168(sp)
 2004140:	d8003215 	stw	zero,200(sp)
 2004144:	dc001404 	addi	r16,sp,80
 2004148:	0039883a 	mov	fp,zero
 200414c:	003e5306 	br	2003a9c <__alt_data_end+0xfe003a9c>
 2004150:	01008074 	movhi	r4,513
 2004154:	21056604 	addi	r4,r4,5528
 2004158:	0039883a 	mov	fp,zero
 200415c:	d9003915 	stw	r4,228(sp)
 2004160:	04401e04 	movi	r17,120
 2004164:	003f6906 	br	2003f0c <__alt_data_end+0xfe003f0c>
 2004168:	8025883a 	mov	r18,r16
 200416c:	dc002903 	ldbu	r16,164(sp)
 2004170:	e011883a 	mov	r8,fp
 2004174:	84003fcc 	andi	r16,r16,255
 2004178:	8005081e 	bne	r16,zero,200559c <___vfprintf_internal_r+0x2290>
 200417c:	883d6126 	beq	r17,zero,2003704 <__alt_data_end+0xfe003704>
 2004180:	00c00044 	movi	r3,1
 2004184:	d8c02915 	stw	r3,164(sp)
 2004188:	dc401405 	stb	r17,80(sp)
 200418c:	d8002785 	stb	zero,158(sp)
 2004190:	003fe906 	br	2004138 <__alt_data_end+0xfe004138>
 2004194:	01408074 	movhi	r5,513
 2004198:	29456604 	addi	r5,r5,5528
 200419c:	d9403915 	stw	r5,228(sp)
 20041a0:	d8c02e15 	stw	r3,184(sp)
 20041a4:	1025883a 	mov	r18,r2
 20041a8:	04401e04 	movi	r17,120
 20041ac:	9d84b03a 	or	r2,r19,r22
 20041b0:	1000fc1e 	bne	r2,zero,20045a4 <___vfprintf_internal_r+0x1298>
 20041b4:	0039883a 	mov	fp,zero
 20041b8:	00800084 	movi	r2,2
 20041bc:	10803fcc 	andi	r2,r2,255
 20041c0:	00c00044 	movi	r3,1
 20041c4:	10c20f26 	beq	r2,r3,2004a04 <___vfprintf_internal_r+0x16f8>
 20041c8:	00c00084 	movi	r3,2
 20041cc:	10fd3326 	beq	r2,r3,200369c <__alt_data_end+0xfe00369c>
 20041d0:	003e0b06 	br	2003a00 <__alt_data_end+0xfe003a00>
 20041d4:	d8c02017 	ldw	r3,128(sp)
 20041d8:	003e7106 	br	2003ba0 <__alt_data_end+0xfe003ba0>
 20041dc:	00801944 	movi	r2,101
 20041e0:	14407e0e 	bge	r2,r17,20043dc <___vfprintf_internal_r+0x10d0>
 20041e4:	d9003617 	ldw	r4,216(sp)
 20041e8:	d9403817 	ldw	r5,224(sp)
 20041ec:	000d883a 	mov	r6,zero
 20041f0:	000f883a 	mov	r7,zero
 20041f4:	d8c03c15 	stw	r3,240(sp)
 20041f8:	da003d15 	stw	r8,244(sp)
 20041fc:	200cde00 	call	200cde0 <__eqdf2>
 2004200:	d8c03c17 	ldw	r3,240(sp)
 2004204:	da003d17 	ldw	r8,244(sp)
 2004208:	1000f71e 	bne	r2,zero,20045e8 <___vfprintf_internal_r+0x12dc>
 200420c:	d8801f17 	ldw	r2,124(sp)
 2004210:	01008074 	movhi	r4,513
 2004214:	21056d04 	addi	r4,r4,5556
 2004218:	18c00044 	addi	r3,r3,1
 200421c:	10800044 	addi	r2,r2,1
 2004220:	41000015 	stw	r4,0(r8)
 2004224:	01000044 	movi	r4,1
 2004228:	41000115 	stw	r4,4(r8)
 200422c:	d8c02015 	stw	r3,128(sp)
 2004230:	d8801f15 	stw	r2,124(sp)
 2004234:	010001c4 	movi	r4,7
 2004238:	2082b816 	blt	r4,r2,2004d1c <___vfprintf_internal_r+0x1a10>
 200423c:	42000204 	addi	r8,r8,8
 2004240:	d8802617 	ldw	r2,152(sp)
 2004244:	d9403317 	ldw	r5,204(sp)
 2004248:	11400216 	blt	r2,r5,2004254 <___vfprintf_internal_r+0xf48>
 200424c:	9080004c 	andi	r2,r18,1
 2004250:	103eb326 	beq	r2,zero,2003d20 <__alt_data_end+0xfe003d20>
 2004254:	d8803717 	ldw	r2,220(sp)
 2004258:	d9003417 	ldw	r4,208(sp)
 200425c:	d9403717 	ldw	r5,220(sp)
 2004260:	1887883a 	add	r3,r3,r2
 2004264:	d8801f17 	ldw	r2,124(sp)
 2004268:	41000015 	stw	r4,0(r8)
 200426c:	41400115 	stw	r5,4(r8)
 2004270:	10800044 	addi	r2,r2,1
 2004274:	d8c02015 	stw	r3,128(sp)
 2004278:	d8801f15 	stw	r2,124(sp)
 200427c:	010001c4 	movi	r4,7
 2004280:	20832916 	blt	r4,r2,2004f28 <___vfprintf_internal_r+0x1c1c>
 2004284:	42000204 	addi	r8,r8,8
 2004288:	d8803317 	ldw	r2,204(sp)
 200428c:	143fffc4 	addi	r16,r2,-1
 2004290:	043ea30e 	bge	zero,r16,2003d20 <__alt_data_end+0xfe003d20>
 2004294:	04400404 	movi	r17,16
 2004298:	d8801f17 	ldw	r2,124(sp)
 200429c:	8c00880e 	bge	r17,r16,20044c0 <___vfprintf_internal_r+0x11b4>
 20042a0:	01408074 	movhi	r5,513
 20042a4:	29456d84 	addi	r5,r5,5558
 20042a8:	d9402c15 	stw	r5,176(sp)
 20042ac:	058001c4 	movi	r22,7
 20042b0:	dcc02d17 	ldw	r19,180(sp)
 20042b4:	00000306 	br	20042c4 <___vfprintf_internal_r+0xfb8>
 20042b8:	42000204 	addi	r8,r8,8
 20042bc:	843ffc04 	addi	r16,r16,-16
 20042c0:	8c00820e 	bge	r17,r16,20044cc <___vfprintf_internal_r+0x11c0>
 20042c4:	18c00404 	addi	r3,r3,16
 20042c8:	10800044 	addi	r2,r2,1
 20042cc:	45000015 	stw	r20,0(r8)
 20042d0:	44400115 	stw	r17,4(r8)
 20042d4:	d8c02015 	stw	r3,128(sp)
 20042d8:	d8801f15 	stw	r2,124(sp)
 20042dc:	b0bff60e 	bge	r22,r2,20042b8 <__alt_data_end+0xfe0042b8>
 20042e0:	d9801e04 	addi	r6,sp,120
 20042e4:	b80b883a 	mov	r5,r23
 20042e8:	9809883a 	mov	r4,r19
 20042ec:	20093840 	call	2009384 <__sprint_r>
 20042f0:	103d0a1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 20042f4:	d8c02017 	ldw	r3,128(sp)
 20042f8:	d8801f17 	ldw	r2,124(sp)
 20042fc:	da000404 	addi	r8,sp,16
 2004300:	003fee06 	br	20042bc <__alt_data_end+0xfe0042bc>
 2004304:	d9403117 	ldw	r5,196(sp)
 2004308:	d8802917 	ldw	r2,164(sp)
 200430c:	28adc83a 	sub	r22,r5,r2
 2004310:	05be410e 	bge	zero,r22,2003c18 <__alt_data_end+0xfe003c18>
 2004314:	07000404 	movi	fp,16
 2004318:	d8801f17 	ldw	r2,124(sp)
 200431c:	e5838f0e 	bge	fp,r22,200515c <___vfprintf_internal_r+0x1e50>
 2004320:	01408074 	movhi	r5,513
 2004324:	29456d84 	addi	r5,r5,5558
 2004328:	dc403015 	stw	r17,192(sp)
 200432c:	d9402c15 	stw	r5,176(sp)
 2004330:	b023883a 	mov	r17,r22
 2004334:	04c001c4 	movi	r19,7
 2004338:	a82d883a 	mov	r22,r21
 200433c:	902b883a 	mov	r21,r18
 2004340:	8025883a 	mov	r18,r16
 2004344:	dc002d17 	ldw	r16,180(sp)
 2004348:	00000306 	br	2004358 <___vfprintf_internal_r+0x104c>
 200434c:	8c7ffc04 	addi	r17,r17,-16
 2004350:	42000204 	addi	r8,r8,8
 2004354:	e440110e 	bge	fp,r17,200439c <___vfprintf_internal_r+0x1090>
 2004358:	18c00404 	addi	r3,r3,16
 200435c:	10800044 	addi	r2,r2,1
 2004360:	45000015 	stw	r20,0(r8)
 2004364:	47000115 	stw	fp,4(r8)
 2004368:	d8c02015 	stw	r3,128(sp)
 200436c:	d8801f15 	stw	r2,124(sp)
 2004370:	98bff60e 	bge	r19,r2,200434c <__alt_data_end+0xfe00434c>
 2004374:	d9801e04 	addi	r6,sp,120
 2004378:	b80b883a 	mov	r5,r23
 200437c:	8009883a 	mov	r4,r16
 2004380:	20093840 	call	2009384 <__sprint_r>
 2004384:	103ce51e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004388:	8c7ffc04 	addi	r17,r17,-16
 200438c:	d8c02017 	ldw	r3,128(sp)
 2004390:	d8801f17 	ldw	r2,124(sp)
 2004394:	da000404 	addi	r8,sp,16
 2004398:	e47fef16 	blt	fp,r17,2004358 <__alt_data_end+0xfe004358>
 200439c:	9021883a 	mov	r16,r18
 20043a0:	a825883a 	mov	r18,r21
 20043a4:	b02b883a 	mov	r21,r22
 20043a8:	882d883a 	mov	r22,r17
 20043ac:	dc403017 	ldw	r17,192(sp)
 20043b0:	d9002c17 	ldw	r4,176(sp)
 20043b4:	1d87883a 	add	r3,r3,r22
 20043b8:	10800044 	addi	r2,r2,1
 20043bc:	41000015 	stw	r4,0(r8)
 20043c0:	45800115 	stw	r22,4(r8)
 20043c4:	d8c02015 	stw	r3,128(sp)
 20043c8:	d8801f15 	stw	r2,124(sp)
 20043cc:	010001c4 	movi	r4,7
 20043d0:	20818e16 	blt	r4,r2,2004a0c <___vfprintf_internal_r+0x1700>
 20043d4:	42000204 	addi	r8,r8,8
 20043d8:	003e0f06 	br	2003c18 <__alt_data_end+0xfe003c18>
 20043dc:	d9403317 	ldw	r5,204(sp)
 20043e0:	00800044 	movi	r2,1
 20043e4:	18c00044 	addi	r3,r3,1
 20043e8:	1141530e 	bge	r2,r5,2004938 <___vfprintf_internal_r+0x162c>
 20043ec:	dc401f17 	ldw	r17,124(sp)
 20043f0:	00800044 	movi	r2,1
 20043f4:	40800115 	stw	r2,4(r8)
 20043f8:	8c400044 	addi	r17,r17,1
 20043fc:	44000015 	stw	r16,0(r8)
 2004400:	d8c02015 	stw	r3,128(sp)
 2004404:	dc401f15 	stw	r17,124(sp)
 2004408:	008001c4 	movi	r2,7
 200440c:	14416b16 	blt	r2,r17,20049bc <___vfprintf_internal_r+0x16b0>
 2004410:	42000204 	addi	r8,r8,8
 2004414:	d8803717 	ldw	r2,220(sp)
 2004418:	d9003417 	ldw	r4,208(sp)
 200441c:	8c400044 	addi	r17,r17,1
 2004420:	10c7883a 	add	r3,r2,r3
 2004424:	40800115 	stw	r2,4(r8)
 2004428:	41000015 	stw	r4,0(r8)
 200442c:	d8c02015 	stw	r3,128(sp)
 2004430:	dc401f15 	stw	r17,124(sp)
 2004434:	008001c4 	movi	r2,7
 2004438:	14416916 	blt	r2,r17,20049e0 <___vfprintf_internal_r+0x16d4>
 200443c:	45800204 	addi	r22,r8,8
 2004440:	d9003617 	ldw	r4,216(sp)
 2004444:	d9403817 	ldw	r5,224(sp)
 2004448:	000d883a 	mov	r6,zero
 200444c:	000f883a 	mov	r7,zero
 2004450:	d8c03c15 	stw	r3,240(sp)
 2004454:	200cde00 	call	200cde0 <__eqdf2>
 2004458:	d8c03c17 	ldw	r3,240(sp)
 200445c:	1000bc26 	beq	r2,zero,2004750 <___vfprintf_internal_r+0x1444>
 2004460:	d9403317 	ldw	r5,204(sp)
 2004464:	84000044 	addi	r16,r16,1
 2004468:	8c400044 	addi	r17,r17,1
 200446c:	28bfffc4 	addi	r2,r5,-1
 2004470:	1887883a 	add	r3,r3,r2
 2004474:	b0800115 	stw	r2,4(r22)
 2004478:	b4000015 	stw	r16,0(r22)
 200447c:	d8c02015 	stw	r3,128(sp)
 2004480:	dc401f15 	stw	r17,124(sp)
 2004484:	008001c4 	movi	r2,7
 2004488:	14414316 	blt	r2,r17,2004998 <___vfprintf_internal_r+0x168c>
 200448c:	b5800204 	addi	r22,r22,8
 2004490:	d9003a17 	ldw	r4,232(sp)
 2004494:	df0022c4 	addi	fp,sp,139
 2004498:	8c400044 	addi	r17,r17,1
 200449c:	20c7883a 	add	r3,r4,r3
 20044a0:	b7000015 	stw	fp,0(r22)
 20044a4:	b1000115 	stw	r4,4(r22)
 20044a8:	d8c02015 	stw	r3,128(sp)
 20044ac:	dc401f15 	stw	r17,124(sp)
 20044b0:	008001c4 	movi	r2,7
 20044b4:	14400e16 	blt	r2,r17,20044f0 <___vfprintf_internal_r+0x11e4>
 20044b8:	b2000204 	addi	r8,r22,8
 20044bc:	003e1806 	br	2003d20 <__alt_data_end+0xfe003d20>
 20044c0:	01008074 	movhi	r4,513
 20044c4:	21056d84 	addi	r4,r4,5558
 20044c8:	d9002c15 	stw	r4,176(sp)
 20044cc:	d9002c17 	ldw	r4,176(sp)
 20044d0:	1c07883a 	add	r3,r3,r16
 20044d4:	44000115 	stw	r16,4(r8)
 20044d8:	41000015 	stw	r4,0(r8)
 20044dc:	10800044 	addi	r2,r2,1
 20044e0:	d8c02015 	stw	r3,128(sp)
 20044e4:	d8801f15 	stw	r2,124(sp)
 20044e8:	010001c4 	movi	r4,7
 20044ec:	20be0b0e 	bge	r4,r2,2003d1c <__alt_data_end+0xfe003d1c>
 20044f0:	d9002d17 	ldw	r4,180(sp)
 20044f4:	d9801e04 	addi	r6,sp,120
 20044f8:	b80b883a 	mov	r5,r23
 20044fc:	20093840 	call	2009384 <__sprint_r>
 2004500:	103c861e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004504:	d8c02017 	ldw	r3,128(sp)
 2004508:	da000404 	addi	r8,sp,16
 200450c:	003e0406 	br	2003d20 <__alt_data_end+0xfe003d20>
 2004510:	d9002d17 	ldw	r4,180(sp)
 2004514:	d9801e04 	addi	r6,sp,120
 2004518:	b80b883a 	mov	r5,r23
 200451c:	20093840 	call	2009384 <__sprint_r>
 2004520:	103e3b26 	beq	r2,zero,2003e10 <__alt_data_end+0xfe003e10>
 2004524:	003c7d06 	br	200371c <__alt_data_end+0xfe00371c>
 2004528:	d9002d17 	ldw	r4,180(sp)
 200452c:	d9801e04 	addi	r6,sp,120
 2004530:	b80b883a 	mov	r5,r23
 2004534:	20093840 	call	2009384 <__sprint_r>
 2004538:	103c781e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 200453c:	d8c02017 	ldw	r3,128(sp)
 2004540:	da000404 	addi	r8,sp,16
 2004544:	003de906 	br	2003cec <__alt_data_end+0xfe003cec>
 2004548:	d9002d17 	ldw	r4,180(sp)
 200454c:	d9801e04 	addi	r6,sp,120
 2004550:	b80b883a 	mov	r5,r23
 2004554:	20093840 	call	2009384 <__sprint_r>
 2004558:	103c701e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 200455c:	d8c02017 	ldw	r3,128(sp)
 2004560:	da000404 	addi	r8,sp,16
 2004564:	003d9b06 	br	2003bd4 <__alt_data_end+0xfe003bd4>
 2004568:	d9002d17 	ldw	r4,180(sp)
 200456c:	d9801e04 	addi	r6,sp,120
 2004570:	b80b883a 	mov	r5,r23
 2004574:	20093840 	call	2009384 <__sprint_r>
 2004578:	103c681e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 200457c:	d8c02017 	ldw	r3,128(sp)
 2004580:	da000404 	addi	r8,sp,16
 2004584:	003da106 	br	2003c0c <__alt_data_end+0xfe003c0c>
 2004588:	d9402a17 	ldw	r5,168(sp)
 200458c:	d8002785 	stb	zero,158(sp)
 2004590:	283f0616 	blt	r5,zero,20041ac <__alt_data_end+0xfe0041ac>
 2004594:	00ffdfc4 	movi	r3,-129
 2004598:	9d84b03a 	or	r2,r19,r22
 200459c:	90e4703a 	and	r18,r18,r3
 20045a0:	103c3b26 	beq	r2,zero,2003690 <__alt_data_end+0xfe003690>
 20045a4:	0039883a 	mov	fp,zero
 20045a8:	003e5806 	br	2003f0c <__alt_data_end+0xfe003f0c>
 20045ac:	9080040c 	andi	r2,r18,16
 20045b0:	1001b326 	beq	r2,zero,2004c80 <___vfprintf_internal_r+0x1974>
 20045b4:	d8c02e17 	ldw	r3,184(sp)
 20045b8:	d9002a17 	ldw	r4,168(sp)
 20045bc:	d8002785 	stb	zero,158(sp)
 20045c0:	18800104 	addi	r2,r3,4
 20045c4:	1cc00017 	ldw	r19,0(r3)
 20045c8:	002d883a 	mov	r22,zero
 20045cc:	2001b516 	blt	r4,zero,2004ca4 <___vfprintf_internal_r+0x1998>
 20045d0:	00ffdfc4 	movi	r3,-129
 20045d4:	d8802e15 	stw	r2,184(sp)
 20045d8:	90e4703a 	and	r18,r18,r3
 20045dc:	983d0526 	beq	r19,zero,20039f4 <__alt_data_end+0xfe0039f4>
 20045e0:	0039883a 	mov	fp,zero
 20045e4:	003d0806 	br	2003a08 <__alt_data_end+0xfe003a08>
 20045e8:	dc402617 	ldw	r17,152(sp)
 20045ec:	0441d30e 	bge	zero,r17,2004d3c <___vfprintf_internal_r+0x1a30>
 20045f0:	dc403217 	ldw	r17,200(sp)
 20045f4:	d8803317 	ldw	r2,204(sp)
 20045f8:	1440010e 	bge	r2,r17,2004600 <___vfprintf_internal_r+0x12f4>
 20045fc:	1023883a 	mov	r17,r2
 2004600:	04400a0e 	bge	zero,r17,200462c <___vfprintf_internal_r+0x1320>
 2004604:	d8801f17 	ldw	r2,124(sp)
 2004608:	1c47883a 	add	r3,r3,r17
 200460c:	44000015 	stw	r16,0(r8)
 2004610:	10800044 	addi	r2,r2,1
 2004614:	44400115 	stw	r17,4(r8)
 2004618:	d8c02015 	stw	r3,128(sp)
 200461c:	d8801f15 	stw	r2,124(sp)
 2004620:	010001c4 	movi	r4,7
 2004624:	20826516 	blt	r4,r2,2004fbc <___vfprintf_internal_r+0x1cb0>
 2004628:	42000204 	addi	r8,r8,8
 200462c:	88026116 	blt	r17,zero,2004fb4 <___vfprintf_internal_r+0x1ca8>
 2004630:	d9003217 	ldw	r4,200(sp)
 2004634:	2463c83a 	sub	r17,r4,r17
 2004638:	04407b0e 	bge	zero,r17,2004828 <___vfprintf_internal_r+0x151c>
 200463c:	05800404 	movi	r22,16
 2004640:	d8801f17 	ldw	r2,124(sp)
 2004644:	b4419d0e 	bge	r22,r17,2004cbc <___vfprintf_internal_r+0x19b0>
 2004648:	01008074 	movhi	r4,513
 200464c:	21056d84 	addi	r4,r4,5558
 2004650:	d9002c15 	stw	r4,176(sp)
 2004654:	070001c4 	movi	fp,7
 2004658:	dcc02d17 	ldw	r19,180(sp)
 200465c:	00000306 	br	200466c <___vfprintf_internal_r+0x1360>
 2004660:	42000204 	addi	r8,r8,8
 2004664:	8c7ffc04 	addi	r17,r17,-16
 2004668:	b441970e 	bge	r22,r17,2004cc8 <___vfprintf_internal_r+0x19bc>
 200466c:	18c00404 	addi	r3,r3,16
 2004670:	10800044 	addi	r2,r2,1
 2004674:	45000015 	stw	r20,0(r8)
 2004678:	45800115 	stw	r22,4(r8)
 200467c:	d8c02015 	stw	r3,128(sp)
 2004680:	d8801f15 	stw	r2,124(sp)
 2004684:	e0bff60e 	bge	fp,r2,2004660 <__alt_data_end+0xfe004660>
 2004688:	d9801e04 	addi	r6,sp,120
 200468c:	b80b883a 	mov	r5,r23
 2004690:	9809883a 	mov	r4,r19
 2004694:	20093840 	call	2009384 <__sprint_r>
 2004698:	103c201e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 200469c:	d8c02017 	ldw	r3,128(sp)
 20046a0:	d8801f17 	ldw	r2,124(sp)
 20046a4:	da000404 	addi	r8,sp,16
 20046a8:	003fee06 	br	2004664 <__alt_data_end+0xfe004664>
 20046ac:	d9002d17 	ldw	r4,180(sp)
 20046b0:	d9801e04 	addi	r6,sp,120
 20046b4:	b80b883a 	mov	r5,r23
 20046b8:	20093840 	call	2009384 <__sprint_r>
 20046bc:	103c171e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 20046c0:	d8c02017 	ldw	r3,128(sp)
 20046c4:	df002787 	ldb	fp,158(sp)
 20046c8:	da000404 	addi	r8,sp,16
 20046cc:	003d3406 	br	2003ba0 <__alt_data_end+0xfe003ba0>
 20046d0:	9080040c 	andi	r2,r18,16
 20046d4:	10016126 	beq	r2,zero,2004c5c <___vfprintf_internal_r+0x1950>
 20046d8:	d9402e17 	ldw	r5,184(sp)
 20046dc:	2cc00017 	ldw	r19,0(r5)
 20046e0:	29400104 	addi	r5,r5,4
 20046e4:	d9402e15 	stw	r5,184(sp)
 20046e8:	982dd7fa 	srai	r22,r19,31
 20046ec:	b005883a 	mov	r2,r22
 20046f0:	003c5a06 	br	200385c <__alt_data_end+0xfe00385c>
 20046f4:	9080040c 	andi	r2,r18,16
 20046f8:	10003526 	beq	r2,zero,20047d0 <___vfprintf_internal_r+0x14c4>
 20046fc:	d8c02e17 	ldw	r3,184(sp)
 2004700:	d9002a17 	ldw	r4,168(sp)
 2004704:	d8002785 	stb	zero,158(sp)
 2004708:	18800104 	addi	r2,r3,4
 200470c:	1cc00017 	ldw	r19,0(r3)
 2004710:	002d883a 	mov	r22,zero
 2004714:	20003716 	blt	r4,zero,20047f4 <___vfprintf_internal_r+0x14e8>
 2004718:	00ffdfc4 	movi	r3,-129
 200471c:	d8802e15 	stw	r2,184(sp)
 2004720:	90e4703a 	and	r18,r18,r3
 2004724:	0039883a 	mov	fp,zero
 2004728:	983dd426 	beq	r19,zero,2003e7c <__alt_data_end+0xfe003e7c>
 200472c:	00800244 	movi	r2,9
 2004730:	14fc5336 	bltu	r2,r19,2003880 <__alt_data_end+0xfe003880>
 2004734:	d8c02817 	ldw	r3,160(sp)
 2004738:	dc001dc4 	addi	r16,sp,119
 200473c:	9cc00c04 	addi	r19,r19,48
 2004740:	1c07c83a 	sub	r3,r3,r16
 2004744:	dcc01dc5 	stb	r19,119(sp)
 2004748:	d8c02b15 	stw	r3,172(sp)
 200474c:	003cc606 	br	2003a68 <__alt_data_end+0xfe003a68>
 2004750:	d8803317 	ldw	r2,204(sp)
 2004754:	143fffc4 	addi	r16,r2,-1
 2004758:	043f4d0e 	bge	zero,r16,2004490 <__alt_data_end+0xfe004490>
 200475c:	07000404 	movi	fp,16
 2004760:	e400810e 	bge	fp,r16,2004968 <___vfprintf_internal_r+0x165c>
 2004764:	01408074 	movhi	r5,513
 2004768:	29456d84 	addi	r5,r5,5558
 200476c:	d9402c15 	stw	r5,176(sp)
 2004770:	01c001c4 	movi	r7,7
 2004774:	dcc02d17 	ldw	r19,180(sp)
 2004778:	00000306 	br	2004788 <___vfprintf_internal_r+0x147c>
 200477c:	b5800204 	addi	r22,r22,8
 2004780:	843ffc04 	addi	r16,r16,-16
 2004784:	e4007b0e 	bge	fp,r16,2004974 <___vfprintf_internal_r+0x1668>
 2004788:	18c00404 	addi	r3,r3,16
 200478c:	8c400044 	addi	r17,r17,1
 2004790:	b5000015 	stw	r20,0(r22)
 2004794:	b7000115 	stw	fp,4(r22)
 2004798:	d8c02015 	stw	r3,128(sp)
 200479c:	dc401f15 	stw	r17,124(sp)
 20047a0:	3c7ff60e 	bge	r7,r17,200477c <__alt_data_end+0xfe00477c>
 20047a4:	d9801e04 	addi	r6,sp,120
 20047a8:	b80b883a 	mov	r5,r23
 20047ac:	9809883a 	mov	r4,r19
 20047b0:	d9c03c15 	stw	r7,240(sp)
 20047b4:	20093840 	call	2009384 <__sprint_r>
 20047b8:	d9c03c17 	ldw	r7,240(sp)
 20047bc:	103bd71e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 20047c0:	d8c02017 	ldw	r3,128(sp)
 20047c4:	dc401f17 	ldw	r17,124(sp)
 20047c8:	dd800404 	addi	r22,sp,16
 20047cc:	003fec06 	br	2004780 <__alt_data_end+0xfe004780>
 20047d0:	9080100c 	andi	r2,r18,64
 20047d4:	d8002785 	stb	zero,158(sp)
 20047d8:	10010e26 	beq	r2,zero,2004c14 <___vfprintf_internal_r+0x1908>
 20047dc:	d9402e17 	ldw	r5,184(sp)
 20047e0:	d8c02a17 	ldw	r3,168(sp)
 20047e4:	002d883a 	mov	r22,zero
 20047e8:	28800104 	addi	r2,r5,4
 20047ec:	2cc0000b 	ldhu	r19,0(r5)
 20047f0:	183fc90e 	bge	r3,zero,2004718 <__alt_data_end+0xfe004718>
 20047f4:	d8802e15 	stw	r2,184(sp)
 20047f8:	0039883a 	mov	fp,zero
 20047fc:	9d84b03a 	or	r2,r19,r22
 2004800:	103c1e1e 	bne	r2,zero,200387c <__alt_data_end+0xfe00387c>
 2004804:	00800044 	movi	r2,1
 2004808:	003e6c06 	br	20041bc <__alt_data_end+0xfe0041bc>
 200480c:	d9002d17 	ldw	r4,180(sp)
 2004810:	d9801e04 	addi	r6,sp,120
 2004814:	b80b883a 	mov	r5,r23
 2004818:	20093840 	call	2009384 <__sprint_r>
 200481c:	103bbf1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004820:	d8c02017 	ldw	r3,128(sp)
 2004824:	da000404 	addi	r8,sp,16
 2004828:	d9003217 	ldw	r4,200(sp)
 200482c:	d8802617 	ldw	r2,152(sp)
 2004830:	d9403317 	ldw	r5,204(sp)
 2004834:	8123883a 	add	r17,r16,r4
 2004838:	11400216 	blt	r2,r5,2004844 <___vfprintf_internal_r+0x1538>
 200483c:	9100004c 	andi	r4,r18,1
 2004840:	20000d26 	beq	r4,zero,2004878 <___vfprintf_internal_r+0x156c>
 2004844:	d9003717 	ldw	r4,220(sp)
 2004848:	d9403417 	ldw	r5,208(sp)
 200484c:	1907883a 	add	r3,r3,r4
 2004850:	d9001f17 	ldw	r4,124(sp)
 2004854:	41400015 	stw	r5,0(r8)
 2004858:	d9403717 	ldw	r5,220(sp)
 200485c:	21000044 	addi	r4,r4,1
 2004860:	d8c02015 	stw	r3,128(sp)
 2004864:	41400115 	stw	r5,4(r8)
 2004868:	d9001f15 	stw	r4,124(sp)
 200486c:	014001c4 	movi	r5,7
 2004870:	2901e816 	blt	r5,r4,2005014 <___vfprintf_internal_r+0x1d08>
 2004874:	42000204 	addi	r8,r8,8
 2004878:	d9003317 	ldw	r4,204(sp)
 200487c:	8121883a 	add	r16,r16,r4
 2004880:	2085c83a 	sub	r2,r4,r2
 2004884:	8461c83a 	sub	r16,r16,r17
 2004888:	1400010e 	bge	r2,r16,2004890 <___vfprintf_internal_r+0x1584>
 200488c:	1021883a 	mov	r16,r2
 2004890:	04000a0e 	bge	zero,r16,20048bc <___vfprintf_internal_r+0x15b0>
 2004894:	d9001f17 	ldw	r4,124(sp)
 2004898:	1c07883a 	add	r3,r3,r16
 200489c:	44400015 	stw	r17,0(r8)
 20048a0:	21000044 	addi	r4,r4,1
 20048a4:	44000115 	stw	r16,4(r8)
 20048a8:	d8c02015 	stw	r3,128(sp)
 20048ac:	d9001f15 	stw	r4,124(sp)
 20048b0:	014001c4 	movi	r5,7
 20048b4:	2901fb16 	blt	r5,r4,20050a4 <___vfprintf_internal_r+0x1d98>
 20048b8:	42000204 	addi	r8,r8,8
 20048bc:	8001f716 	blt	r16,zero,200509c <___vfprintf_internal_r+0x1d90>
 20048c0:	1421c83a 	sub	r16,r2,r16
 20048c4:	043d160e 	bge	zero,r16,2003d20 <__alt_data_end+0xfe003d20>
 20048c8:	04400404 	movi	r17,16
 20048cc:	d8801f17 	ldw	r2,124(sp)
 20048d0:	8c3efb0e 	bge	r17,r16,20044c0 <__alt_data_end+0xfe0044c0>
 20048d4:	01408074 	movhi	r5,513
 20048d8:	29456d84 	addi	r5,r5,5558
 20048dc:	d9402c15 	stw	r5,176(sp)
 20048e0:	058001c4 	movi	r22,7
 20048e4:	dcc02d17 	ldw	r19,180(sp)
 20048e8:	00000306 	br	20048f8 <___vfprintf_internal_r+0x15ec>
 20048ec:	42000204 	addi	r8,r8,8
 20048f0:	843ffc04 	addi	r16,r16,-16
 20048f4:	8c3ef50e 	bge	r17,r16,20044cc <__alt_data_end+0xfe0044cc>
 20048f8:	18c00404 	addi	r3,r3,16
 20048fc:	10800044 	addi	r2,r2,1
 2004900:	45000015 	stw	r20,0(r8)
 2004904:	44400115 	stw	r17,4(r8)
 2004908:	d8c02015 	stw	r3,128(sp)
 200490c:	d8801f15 	stw	r2,124(sp)
 2004910:	b0bff60e 	bge	r22,r2,20048ec <__alt_data_end+0xfe0048ec>
 2004914:	d9801e04 	addi	r6,sp,120
 2004918:	b80b883a 	mov	r5,r23
 200491c:	9809883a 	mov	r4,r19
 2004920:	20093840 	call	2009384 <__sprint_r>
 2004924:	103b7d1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004928:	d8c02017 	ldw	r3,128(sp)
 200492c:	d8801f17 	ldw	r2,124(sp)
 2004930:	da000404 	addi	r8,sp,16
 2004934:	003fee06 	br	20048f0 <__alt_data_end+0xfe0048f0>
 2004938:	9088703a 	and	r4,r18,r2
 200493c:	203eab1e 	bne	r4,zero,20043ec <__alt_data_end+0xfe0043ec>
 2004940:	dc401f17 	ldw	r17,124(sp)
 2004944:	40800115 	stw	r2,4(r8)
 2004948:	44000015 	stw	r16,0(r8)
 200494c:	8c400044 	addi	r17,r17,1
 2004950:	d8c02015 	stw	r3,128(sp)
 2004954:	dc401f15 	stw	r17,124(sp)
 2004958:	008001c4 	movi	r2,7
 200495c:	14400e16 	blt	r2,r17,2004998 <___vfprintf_internal_r+0x168c>
 2004960:	45800204 	addi	r22,r8,8
 2004964:	003eca06 	br	2004490 <__alt_data_end+0xfe004490>
 2004968:	01008074 	movhi	r4,513
 200496c:	21056d84 	addi	r4,r4,5558
 2004970:	d9002c15 	stw	r4,176(sp)
 2004974:	d8802c17 	ldw	r2,176(sp)
 2004978:	1c07883a 	add	r3,r3,r16
 200497c:	8c400044 	addi	r17,r17,1
 2004980:	b0800015 	stw	r2,0(r22)
 2004984:	b4000115 	stw	r16,4(r22)
 2004988:	d8c02015 	stw	r3,128(sp)
 200498c:	dc401f15 	stw	r17,124(sp)
 2004990:	008001c4 	movi	r2,7
 2004994:	147ebd0e 	bge	r2,r17,200448c <__alt_data_end+0xfe00448c>
 2004998:	d9002d17 	ldw	r4,180(sp)
 200499c:	d9801e04 	addi	r6,sp,120
 20049a0:	b80b883a 	mov	r5,r23
 20049a4:	20093840 	call	2009384 <__sprint_r>
 20049a8:	103b5c1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 20049ac:	d8c02017 	ldw	r3,128(sp)
 20049b0:	dc401f17 	ldw	r17,124(sp)
 20049b4:	dd800404 	addi	r22,sp,16
 20049b8:	003eb506 	br	2004490 <__alt_data_end+0xfe004490>
 20049bc:	d9002d17 	ldw	r4,180(sp)
 20049c0:	d9801e04 	addi	r6,sp,120
 20049c4:	b80b883a 	mov	r5,r23
 20049c8:	20093840 	call	2009384 <__sprint_r>
 20049cc:	103b531e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 20049d0:	d8c02017 	ldw	r3,128(sp)
 20049d4:	dc401f17 	ldw	r17,124(sp)
 20049d8:	da000404 	addi	r8,sp,16
 20049dc:	003e8d06 	br	2004414 <__alt_data_end+0xfe004414>
 20049e0:	d9002d17 	ldw	r4,180(sp)
 20049e4:	d9801e04 	addi	r6,sp,120
 20049e8:	b80b883a 	mov	r5,r23
 20049ec:	20093840 	call	2009384 <__sprint_r>
 20049f0:	103b4a1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 20049f4:	d8c02017 	ldw	r3,128(sp)
 20049f8:	dc401f17 	ldw	r17,124(sp)
 20049fc:	dd800404 	addi	r22,sp,16
 2004a00:	003e8f06 	br	2004440 <__alt_data_end+0xfe004440>
 2004a04:	0027883a 	mov	r19,zero
 2004a08:	003f4a06 	br	2004734 <__alt_data_end+0xfe004734>
 2004a0c:	d9002d17 	ldw	r4,180(sp)
 2004a10:	d9801e04 	addi	r6,sp,120
 2004a14:	b80b883a 	mov	r5,r23
 2004a18:	20093840 	call	2009384 <__sprint_r>
 2004a1c:	103b3f1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004a20:	d8c02017 	ldw	r3,128(sp)
 2004a24:	da000404 	addi	r8,sp,16
 2004a28:	003c7b06 	br	2003c18 <__alt_data_end+0xfe003c18>
 2004a2c:	d9402a17 	ldw	r5,168(sp)
 2004a30:	04e7c83a 	sub	r19,zero,r19
 2004a34:	07000b44 	movi	fp,45
 2004a38:	9804c03a 	cmpne	r2,r19,zero
 2004a3c:	05adc83a 	sub	r22,zero,r22
 2004a40:	df002785 	stb	fp,158(sp)
 2004a44:	b0adc83a 	sub	r22,r22,r2
 2004a48:	28017b16 	blt	r5,zero,2005038 <___vfprintf_internal_r+0x1d2c>
 2004a4c:	00bfdfc4 	movi	r2,-129
 2004a50:	90a4703a 	and	r18,r18,r2
 2004a54:	003b8906 	br	200387c <__alt_data_end+0xfe00387c>
 2004a58:	d9003617 	ldw	r4,216(sp)
 2004a5c:	d9403817 	ldw	r5,224(sp)
 2004a60:	da003d15 	stw	r8,244(sp)
 2004a64:	20091380 	call	2009138 <__fpclassifyd>
 2004a68:	da003d17 	ldw	r8,244(sp)
 2004a6c:	1000f026 	beq	r2,zero,2004e30 <___vfprintf_internal_r+0x1b24>
 2004a70:	d9002a17 	ldw	r4,168(sp)
 2004a74:	05bff7c4 	movi	r22,-33
 2004a78:	00bfffc4 	movi	r2,-1
 2004a7c:	8dac703a 	and	r22,r17,r22
 2004a80:	20820026 	beq	r4,r2,2005284 <___vfprintf_internal_r+0x1f78>
 2004a84:	008011c4 	movi	r2,71
 2004a88:	b081f726 	beq	r22,r2,2005268 <___vfprintf_internal_r+0x1f5c>
 2004a8c:	d9003817 	ldw	r4,224(sp)
 2004a90:	90c04014 	ori	r3,r18,256
 2004a94:	d8c02c15 	stw	r3,176(sp)
 2004a98:	20021516 	blt	r4,zero,20052f0 <___vfprintf_internal_r+0x1fe4>
 2004a9c:	dcc03817 	ldw	r19,224(sp)
 2004aa0:	d8002905 	stb	zero,164(sp)
 2004aa4:	00801984 	movi	r2,102
 2004aa8:	8881f926 	beq	r17,r2,2005290 <___vfprintf_internal_r+0x1f84>
 2004aac:	00801184 	movi	r2,70
 2004ab0:	88821c26 	beq	r17,r2,2005324 <___vfprintf_internal_r+0x2018>
 2004ab4:	00801144 	movi	r2,69
 2004ab8:	b081ef26 	beq	r22,r2,2005278 <___vfprintf_internal_r+0x1f6c>
 2004abc:	d8c02a17 	ldw	r3,168(sp)
 2004ac0:	d8802104 	addi	r2,sp,132
 2004ac4:	d8800315 	stw	r2,12(sp)
 2004ac8:	d9403617 	ldw	r5,216(sp)
 2004acc:	d8802504 	addi	r2,sp,148
 2004ad0:	d9002d17 	ldw	r4,180(sp)
 2004ad4:	d8800215 	stw	r2,8(sp)
 2004ad8:	d8802604 	addi	r2,sp,152
 2004adc:	d8c00015 	stw	r3,0(sp)
 2004ae0:	d8800115 	stw	r2,4(sp)
 2004ae4:	01c00084 	movi	r7,2
 2004ae8:	980d883a 	mov	r6,r19
 2004aec:	d8c03c15 	stw	r3,240(sp)
 2004af0:	da003d15 	stw	r8,244(sp)
 2004af4:	2005af00 	call	2005af0 <_dtoa_r>
 2004af8:	1021883a 	mov	r16,r2
 2004afc:	008019c4 	movi	r2,103
 2004b00:	d8c03c17 	ldw	r3,240(sp)
 2004b04:	da003d17 	ldw	r8,244(sp)
 2004b08:	88817126 	beq	r17,r2,20050d0 <___vfprintf_internal_r+0x1dc4>
 2004b0c:	008011c4 	movi	r2,71
 2004b10:	88829126 	beq	r17,r2,2005558 <___vfprintf_internal_r+0x224c>
 2004b14:	80f9883a 	add	fp,r16,r3
 2004b18:	d9003617 	ldw	r4,216(sp)
 2004b1c:	000d883a 	mov	r6,zero
 2004b20:	000f883a 	mov	r7,zero
 2004b24:	980b883a 	mov	r5,r19
 2004b28:	da003d15 	stw	r8,244(sp)
 2004b2c:	200cde00 	call	200cde0 <__eqdf2>
 2004b30:	da003d17 	ldw	r8,244(sp)
 2004b34:	10018d26 	beq	r2,zero,200516c <___vfprintf_internal_r+0x1e60>
 2004b38:	d8802117 	ldw	r2,132(sp)
 2004b3c:	1700062e 	bgeu	r2,fp,2004b58 <___vfprintf_internal_r+0x184c>
 2004b40:	01000c04 	movi	r4,48
 2004b44:	10c00044 	addi	r3,r2,1
 2004b48:	d8c02115 	stw	r3,132(sp)
 2004b4c:	11000005 	stb	r4,0(r2)
 2004b50:	d8802117 	ldw	r2,132(sp)
 2004b54:	173ffb36 	bltu	r2,fp,2004b44 <__alt_data_end+0xfe004b44>
 2004b58:	1405c83a 	sub	r2,r2,r16
 2004b5c:	d8803315 	stw	r2,204(sp)
 2004b60:	008011c4 	movi	r2,71
 2004b64:	b0817626 	beq	r22,r2,2005140 <___vfprintf_internal_r+0x1e34>
 2004b68:	00801944 	movi	r2,101
 2004b6c:	1442800e 	bge	r2,r17,2005570 <___vfprintf_internal_r+0x2264>
 2004b70:	d8c02617 	ldw	r3,152(sp)
 2004b74:	00801984 	movi	r2,102
 2004b78:	d8c03215 	stw	r3,200(sp)
 2004b7c:	8881fe26 	beq	r17,r2,2005378 <___vfprintf_internal_r+0x206c>
 2004b80:	d8c03217 	ldw	r3,200(sp)
 2004b84:	d9003317 	ldw	r4,204(sp)
 2004b88:	1901dd16 	blt	r3,r4,2005300 <___vfprintf_internal_r+0x1ff4>
 2004b8c:	9480004c 	andi	r18,r18,1
 2004b90:	90022b1e 	bne	r18,zero,2005440 <___vfprintf_internal_r+0x2134>
 2004b94:	1805883a 	mov	r2,r3
 2004b98:	18028316 	blt	r3,zero,20055a8 <___vfprintf_internal_r+0x229c>
 2004b9c:	d8c03217 	ldw	r3,200(sp)
 2004ba0:	044019c4 	movi	r17,103
 2004ba4:	d8c02b15 	stw	r3,172(sp)
 2004ba8:	df002907 	ldb	fp,164(sp)
 2004bac:	e001531e 	bne	fp,zero,20050fc <___vfprintf_internal_r+0x1df0>
 2004bb0:	df002783 	ldbu	fp,158(sp)
 2004bb4:	d8802915 	stw	r2,164(sp)
 2004bb8:	dc802c17 	ldw	r18,176(sp)
 2004bbc:	d8002a15 	stw	zero,168(sp)
 2004bc0:	003baf06 	br	2003a80 <__alt_data_end+0xfe003a80>
 2004bc4:	d8c02e17 	ldw	r3,184(sp)
 2004bc8:	d9002e17 	ldw	r4,184(sp)
 2004bcc:	d9402e17 	ldw	r5,184(sp)
 2004bd0:	18c00017 	ldw	r3,0(r3)
 2004bd4:	21000117 	ldw	r4,4(r4)
 2004bd8:	29400204 	addi	r5,r5,8
 2004bdc:	d8c03615 	stw	r3,216(sp)
 2004be0:	d9003815 	stw	r4,224(sp)
 2004be4:	d9402e15 	stw	r5,184(sp)
 2004be8:	003b5006 	br	200392c <__alt_data_end+0xfe00392c>
 2004bec:	ac400007 	ldb	r17,0(r21)
 2004bf0:	003a2806 	br	2003494 <__alt_data_end+0xfe003494>
 2004bf4:	9080100c 	andi	r2,r18,64
 2004bf8:	1000a826 	beq	r2,zero,2004e9c <___vfprintf_internal_r+0x1b90>
 2004bfc:	d8c02e17 	ldw	r3,184(sp)
 2004c00:	002d883a 	mov	r22,zero
 2004c04:	1cc0000b 	ldhu	r19,0(r3)
 2004c08:	18c00104 	addi	r3,r3,4
 2004c0c:	d8c02e15 	stw	r3,184(sp)
 2004c10:	003caf06 	br	2003ed0 <__alt_data_end+0xfe003ed0>
 2004c14:	d9002e17 	ldw	r4,184(sp)
 2004c18:	d9402a17 	ldw	r5,168(sp)
 2004c1c:	002d883a 	mov	r22,zero
 2004c20:	20800104 	addi	r2,r4,4
 2004c24:	24c00017 	ldw	r19,0(r4)
 2004c28:	283ebb0e 	bge	r5,zero,2004718 <__alt_data_end+0xfe004718>
 2004c2c:	003ef106 	br	20047f4 <__alt_data_end+0xfe0047f4>
 2004c30:	9080040c 	andi	r2,r18,16
 2004c34:	1000921e 	bne	r2,zero,2004e80 <___vfprintf_internal_r+0x1b74>
 2004c38:	9480100c 	andi	r18,r18,64
 2004c3c:	90013926 	beq	r18,zero,2005124 <___vfprintf_internal_r+0x1e18>
 2004c40:	d9402e17 	ldw	r5,184(sp)
 2004c44:	d8c02f17 	ldw	r3,188(sp)
 2004c48:	28800017 	ldw	r2,0(r5)
 2004c4c:	29400104 	addi	r5,r5,4
 2004c50:	d9402e15 	stw	r5,184(sp)
 2004c54:	10c0000d 	sth	r3,0(r2)
 2004c58:	0039e406 	br	20033ec <__alt_data_end+0xfe0033ec>
 2004c5c:	9080100c 	andi	r2,r18,64
 2004c60:	10008026 	beq	r2,zero,2004e64 <___vfprintf_internal_r+0x1b58>
 2004c64:	d8802e17 	ldw	r2,184(sp)
 2004c68:	14c0000f 	ldh	r19,0(r2)
 2004c6c:	10800104 	addi	r2,r2,4
 2004c70:	d8802e15 	stw	r2,184(sp)
 2004c74:	982dd7fa 	srai	r22,r19,31
 2004c78:	b005883a 	mov	r2,r22
 2004c7c:	003af706 	br	200385c <__alt_data_end+0xfe00385c>
 2004c80:	9080100c 	andi	r2,r18,64
 2004c84:	d8002785 	stb	zero,158(sp)
 2004c88:	10008a1e 	bne	r2,zero,2004eb4 <___vfprintf_internal_r+0x1ba8>
 2004c8c:	d9002e17 	ldw	r4,184(sp)
 2004c90:	d9402a17 	ldw	r5,168(sp)
 2004c94:	002d883a 	mov	r22,zero
 2004c98:	20800104 	addi	r2,r4,4
 2004c9c:	24c00017 	ldw	r19,0(r4)
 2004ca0:	283e4b0e 	bge	r5,zero,20045d0 <__alt_data_end+0xfe0045d0>
 2004ca4:	9d86b03a 	or	r3,r19,r22
 2004ca8:	d8802e15 	stw	r2,184(sp)
 2004cac:	183e4c1e 	bne	r3,zero,20045e0 <__alt_data_end+0xfe0045e0>
 2004cb0:	0039883a 	mov	fp,zero
 2004cb4:	0005883a 	mov	r2,zero
 2004cb8:	003d4006 	br	20041bc <__alt_data_end+0xfe0041bc>
 2004cbc:	01408074 	movhi	r5,513
 2004cc0:	29456d84 	addi	r5,r5,5558
 2004cc4:	d9402c15 	stw	r5,176(sp)
 2004cc8:	d9402c17 	ldw	r5,176(sp)
 2004ccc:	1c47883a 	add	r3,r3,r17
 2004cd0:	10800044 	addi	r2,r2,1
 2004cd4:	41400015 	stw	r5,0(r8)
 2004cd8:	44400115 	stw	r17,4(r8)
 2004cdc:	d8c02015 	stw	r3,128(sp)
 2004ce0:	d8801f15 	stw	r2,124(sp)
 2004ce4:	010001c4 	movi	r4,7
 2004ce8:	20bec816 	blt	r4,r2,200480c <__alt_data_end+0xfe00480c>
 2004cec:	42000204 	addi	r8,r8,8
 2004cf0:	003ecd06 	br	2004828 <__alt_data_end+0xfe004828>
 2004cf4:	d9002a17 	ldw	r4,168(sp)
 2004cf8:	d8002785 	stb	zero,158(sp)
 2004cfc:	203d2d16 	blt	r4,zero,20041b4 <__alt_data_end+0xfe0041b4>
 2004d00:	00bfdfc4 	movi	r2,-129
 2004d04:	90a4703a 	and	r18,r18,r2
 2004d08:	003a6106 	br	2003690 <__alt_data_end+0xfe003690>
 2004d0c:	01008074 	movhi	r4,513
 2004d10:	21056d84 	addi	r4,r4,5558
 2004d14:	d9002c15 	stw	r4,176(sp)
 2004d18:	003bea06 	br	2003cc4 <__alt_data_end+0xfe003cc4>
 2004d1c:	d9002d17 	ldw	r4,180(sp)
 2004d20:	d9801e04 	addi	r6,sp,120
 2004d24:	b80b883a 	mov	r5,r23
 2004d28:	20093840 	call	2009384 <__sprint_r>
 2004d2c:	103a7b1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004d30:	d8c02017 	ldw	r3,128(sp)
 2004d34:	da000404 	addi	r8,sp,16
 2004d38:	003d4106 	br	2004240 <__alt_data_end+0xfe004240>
 2004d3c:	d8801f17 	ldw	r2,124(sp)
 2004d40:	01408074 	movhi	r5,513
 2004d44:	01000044 	movi	r4,1
 2004d48:	18c00044 	addi	r3,r3,1
 2004d4c:	10800044 	addi	r2,r2,1
 2004d50:	29456d04 	addi	r5,r5,5556
 2004d54:	41000115 	stw	r4,4(r8)
 2004d58:	41400015 	stw	r5,0(r8)
 2004d5c:	d8c02015 	stw	r3,128(sp)
 2004d60:	d8801f15 	stw	r2,124(sp)
 2004d64:	010001c4 	movi	r4,7
 2004d68:	20805c16 	blt	r4,r2,2004edc <___vfprintf_internal_r+0x1bd0>
 2004d6c:	42000204 	addi	r8,r8,8
 2004d70:	8800041e 	bne	r17,zero,2004d84 <___vfprintf_internal_r+0x1a78>
 2004d74:	d8803317 	ldw	r2,204(sp)
 2004d78:	1000021e 	bne	r2,zero,2004d84 <___vfprintf_internal_r+0x1a78>
 2004d7c:	9080004c 	andi	r2,r18,1
 2004d80:	103be726 	beq	r2,zero,2003d20 <__alt_data_end+0xfe003d20>
 2004d84:	d9003717 	ldw	r4,220(sp)
 2004d88:	d8801f17 	ldw	r2,124(sp)
 2004d8c:	d9403417 	ldw	r5,208(sp)
 2004d90:	20c7883a 	add	r3,r4,r3
 2004d94:	10800044 	addi	r2,r2,1
 2004d98:	41000115 	stw	r4,4(r8)
 2004d9c:	41400015 	stw	r5,0(r8)
 2004da0:	d8c02015 	stw	r3,128(sp)
 2004da4:	d8801f15 	stw	r2,124(sp)
 2004da8:	010001c4 	movi	r4,7
 2004dac:	20812116 	blt	r4,r2,2005234 <___vfprintf_internal_r+0x1f28>
 2004db0:	42000204 	addi	r8,r8,8
 2004db4:	0463c83a 	sub	r17,zero,r17
 2004db8:	0440730e 	bge	zero,r17,2004f88 <___vfprintf_internal_r+0x1c7c>
 2004dbc:	05800404 	movi	r22,16
 2004dc0:	b440860e 	bge	r22,r17,2004fdc <___vfprintf_internal_r+0x1cd0>
 2004dc4:	01408074 	movhi	r5,513
 2004dc8:	29456d84 	addi	r5,r5,5558
 2004dcc:	d9402c15 	stw	r5,176(sp)
 2004dd0:	070001c4 	movi	fp,7
 2004dd4:	dcc02d17 	ldw	r19,180(sp)
 2004dd8:	00000306 	br	2004de8 <___vfprintf_internal_r+0x1adc>
 2004ddc:	42000204 	addi	r8,r8,8
 2004de0:	8c7ffc04 	addi	r17,r17,-16
 2004de4:	b440800e 	bge	r22,r17,2004fe8 <___vfprintf_internal_r+0x1cdc>
 2004de8:	18c00404 	addi	r3,r3,16
 2004dec:	10800044 	addi	r2,r2,1
 2004df0:	45000015 	stw	r20,0(r8)
 2004df4:	45800115 	stw	r22,4(r8)
 2004df8:	d8c02015 	stw	r3,128(sp)
 2004dfc:	d8801f15 	stw	r2,124(sp)
 2004e00:	e0bff60e 	bge	fp,r2,2004ddc <__alt_data_end+0xfe004ddc>
 2004e04:	d9801e04 	addi	r6,sp,120
 2004e08:	b80b883a 	mov	r5,r23
 2004e0c:	9809883a 	mov	r4,r19
 2004e10:	20093840 	call	2009384 <__sprint_r>
 2004e14:	103a411e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004e18:	d8c02017 	ldw	r3,128(sp)
 2004e1c:	d8801f17 	ldw	r2,124(sp)
 2004e20:	da000404 	addi	r8,sp,16
 2004e24:	003fee06 	br	2004de0 <__alt_data_end+0xfe004de0>
 2004e28:	00bfffc4 	movi	r2,-1
 2004e2c:	003a3f06 	br	200372c <__alt_data_end+0xfe00372c>
 2004e30:	008011c4 	movi	r2,71
 2004e34:	1440b816 	blt	r2,r17,2005118 <___vfprintf_internal_r+0x1e0c>
 2004e38:	04008074 	movhi	r16,513
 2004e3c:	84055f04 	addi	r16,r16,5500
 2004e40:	00c000c4 	movi	r3,3
 2004e44:	00bfdfc4 	movi	r2,-129
 2004e48:	d8c02915 	stw	r3,164(sp)
 2004e4c:	90a4703a 	and	r18,r18,r2
 2004e50:	df002783 	ldbu	fp,158(sp)
 2004e54:	d8c02b15 	stw	r3,172(sp)
 2004e58:	d8002a15 	stw	zero,168(sp)
 2004e5c:	d8003215 	stw	zero,200(sp)
 2004e60:	003b0706 	br	2003a80 <__alt_data_end+0xfe003a80>
 2004e64:	d8c02e17 	ldw	r3,184(sp)
 2004e68:	1cc00017 	ldw	r19,0(r3)
 2004e6c:	18c00104 	addi	r3,r3,4
 2004e70:	d8c02e15 	stw	r3,184(sp)
 2004e74:	982dd7fa 	srai	r22,r19,31
 2004e78:	b005883a 	mov	r2,r22
 2004e7c:	003a7706 	br	200385c <__alt_data_end+0xfe00385c>
 2004e80:	d8c02e17 	ldw	r3,184(sp)
 2004e84:	d9002f17 	ldw	r4,188(sp)
 2004e88:	18800017 	ldw	r2,0(r3)
 2004e8c:	18c00104 	addi	r3,r3,4
 2004e90:	d8c02e15 	stw	r3,184(sp)
 2004e94:	11000015 	stw	r4,0(r2)
 2004e98:	00395406 	br	20033ec <__alt_data_end+0xfe0033ec>
 2004e9c:	d9002e17 	ldw	r4,184(sp)
 2004ea0:	002d883a 	mov	r22,zero
 2004ea4:	24c00017 	ldw	r19,0(r4)
 2004ea8:	21000104 	addi	r4,r4,4
 2004eac:	d9002e15 	stw	r4,184(sp)
 2004eb0:	003c0706 	br	2003ed0 <__alt_data_end+0xfe003ed0>
 2004eb4:	d9402e17 	ldw	r5,184(sp)
 2004eb8:	d8c02a17 	ldw	r3,168(sp)
 2004ebc:	002d883a 	mov	r22,zero
 2004ec0:	28800104 	addi	r2,r5,4
 2004ec4:	2cc0000b 	ldhu	r19,0(r5)
 2004ec8:	183dc10e 	bge	r3,zero,20045d0 <__alt_data_end+0xfe0045d0>
 2004ecc:	003f7506 	br	2004ca4 <__alt_data_end+0xfe004ca4>
 2004ed0:	04008074 	movhi	r16,513
 2004ed4:	84055d04 	addi	r16,r16,5492
 2004ed8:	003aa706 	br	2003978 <__alt_data_end+0xfe003978>
 2004edc:	d9002d17 	ldw	r4,180(sp)
 2004ee0:	d9801e04 	addi	r6,sp,120
 2004ee4:	b80b883a 	mov	r5,r23
 2004ee8:	20093840 	call	2009384 <__sprint_r>
 2004eec:	103a0b1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004ef0:	dc402617 	ldw	r17,152(sp)
 2004ef4:	d8c02017 	ldw	r3,128(sp)
 2004ef8:	da000404 	addi	r8,sp,16
 2004efc:	003f9c06 	br	2004d70 <__alt_data_end+0xfe004d70>
 2004f00:	ac400043 	ldbu	r17,1(r21)
 2004f04:	84000814 	ori	r16,r16,32
 2004f08:	ad400044 	addi	r21,r21,1
 2004f0c:	8c403fcc 	andi	r17,r17,255
 2004f10:	8c40201c 	xori	r17,r17,128
 2004f14:	8c7fe004 	addi	r17,r17,-128
 2004f18:	00395e06 	br	2003494 <__alt_data_end+0xfe003494>
 2004f1c:	d8c02e15 	stw	r3,184(sp)
 2004f20:	0039883a 	mov	fp,zero
 2004f24:	003e3506 	br	20047fc <__alt_data_end+0xfe0047fc>
 2004f28:	d9002d17 	ldw	r4,180(sp)
 2004f2c:	d9801e04 	addi	r6,sp,120
 2004f30:	b80b883a 	mov	r5,r23
 2004f34:	20093840 	call	2009384 <__sprint_r>
 2004f38:	1039f81e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004f3c:	d8c02017 	ldw	r3,128(sp)
 2004f40:	da000404 	addi	r8,sp,16
 2004f44:	003cd006 	br	2004288 <__alt_data_end+0xfe004288>
 2004f48:	8009883a 	mov	r4,r16
 2004f4c:	df003d15 	stw	fp,244(sp)
 2004f50:	20032740 	call	2003274 <strlen>
 2004f54:	d8802b15 	stw	r2,172(sp)
 2004f58:	da003d17 	ldw	r8,244(sp)
 2004f5c:	103c200e 	bge	r2,zero,2003fe0 <__alt_data_end+0xfe003fe0>
 2004f60:	0005883a 	mov	r2,zero
 2004f64:	003c1e06 	br	2003fe0 <__alt_data_end+0xfe003fe0>
 2004f68:	d9002d17 	ldw	r4,180(sp)
 2004f6c:	d9801e04 	addi	r6,sp,120
 2004f70:	b80b883a 	mov	r5,r23
 2004f74:	20093840 	call	2009384 <__sprint_r>
 2004f78:	1039e81e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004f7c:	d8c02017 	ldw	r3,128(sp)
 2004f80:	d8801f17 	ldw	r2,124(sp)
 2004f84:	da000404 	addi	r8,sp,16
 2004f88:	d9403317 	ldw	r5,204(sp)
 2004f8c:	10800044 	addi	r2,r2,1
 2004f90:	44000015 	stw	r16,0(r8)
 2004f94:	28c7883a 	add	r3,r5,r3
 2004f98:	003b5b06 	br	2003d08 <__alt_data_end+0xfe003d08>
 2004f9c:	01008074 	movhi	r4,513
 2004fa0:	21057184 	addi	r4,r4,5574
 2004fa4:	d9003515 	stw	r4,212(sp)
 2004fa8:	003af206 	br	2003b74 <__alt_data_end+0xfe003b74>
 2004fac:	013fffc4 	movi	r4,-1
 2004fb0:	003a0806 	br	20037d4 <__alt_data_end+0xfe0037d4>
 2004fb4:	0023883a 	mov	r17,zero
 2004fb8:	003d9d06 	br	2004630 <__alt_data_end+0xfe004630>
 2004fbc:	d9002d17 	ldw	r4,180(sp)
 2004fc0:	d9801e04 	addi	r6,sp,120
 2004fc4:	b80b883a 	mov	r5,r23
 2004fc8:	20093840 	call	2009384 <__sprint_r>
 2004fcc:	1039d31e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2004fd0:	d8c02017 	ldw	r3,128(sp)
 2004fd4:	da000404 	addi	r8,sp,16
 2004fd8:	003d9406 	br	200462c <__alt_data_end+0xfe00462c>
 2004fdc:	01008074 	movhi	r4,513
 2004fe0:	21056d84 	addi	r4,r4,5558
 2004fe4:	d9002c15 	stw	r4,176(sp)
 2004fe8:	d9002c17 	ldw	r4,176(sp)
 2004fec:	1c47883a 	add	r3,r3,r17
 2004ff0:	10800044 	addi	r2,r2,1
 2004ff4:	41000015 	stw	r4,0(r8)
 2004ff8:	44400115 	stw	r17,4(r8)
 2004ffc:	d8c02015 	stw	r3,128(sp)
 2005000:	d8801f15 	stw	r2,124(sp)
 2005004:	010001c4 	movi	r4,7
 2005008:	20bfd716 	blt	r4,r2,2004f68 <__alt_data_end+0xfe004f68>
 200500c:	42000204 	addi	r8,r8,8
 2005010:	003fdd06 	br	2004f88 <__alt_data_end+0xfe004f88>
 2005014:	d9002d17 	ldw	r4,180(sp)
 2005018:	d9801e04 	addi	r6,sp,120
 200501c:	b80b883a 	mov	r5,r23
 2005020:	20093840 	call	2009384 <__sprint_r>
 2005024:	1039bd1e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2005028:	d8802617 	ldw	r2,152(sp)
 200502c:	d8c02017 	ldw	r3,128(sp)
 2005030:	da000404 	addi	r8,sp,16
 2005034:	003e1006 	br	2004878 <__alt_data_end+0xfe004878>
 2005038:	00800044 	movi	r2,1
 200503c:	10803fcc 	andi	r2,r2,255
 2005040:	00c00044 	movi	r3,1
 2005044:	10fa0d26 	beq	r2,r3,200387c <__alt_data_end+0xfe00387c>
 2005048:	00c00084 	movi	r3,2
 200504c:	10fbaf26 	beq	r2,r3,2003f0c <__alt_data_end+0xfe003f0c>
 2005050:	003a6d06 	br	2003a08 <__alt_data_end+0xfe003a08>
 2005054:	01008074 	movhi	r4,513
 2005058:	21057184 	addi	r4,r4,5574
 200505c:	d9003515 	stw	r4,212(sp)
 2005060:	003b5406 	br	2003db4 <__alt_data_end+0xfe003db4>
 2005064:	d8802a17 	ldw	r2,168(sp)
 2005068:	00c00184 	movi	r3,6
 200506c:	1880012e 	bgeu	r3,r2,2005074 <___vfprintf_internal_r+0x1d68>
 2005070:	1805883a 	mov	r2,r3
 2005074:	d8802b15 	stw	r2,172(sp)
 2005078:	1000ef16 	blt	r2,zero,2005438 <___vfprintf_internal_r+0x212c>
 200507c:	04008074 	movhi	r16,513
 2005080:	d8802915 	stw	r2,164(sp)
 2005084:	dcc02e15 	stw	r19,184(sp)
 2005088:	d8002a15 	stw	zero,168(sp)
 200508c:	d8003215 	stw	zero,200(sp)
 2005090:	84056b04 	addi	r16,r16,5548
 2005094:	0039883a 	mov	fp,zero
 2005098:	003a8006 	br	2003a9c <__alt_data_end+0xfe003a9c>
 200509c:	0021883a 	mov	r16,zero
 20050a0:	003e0706 	br	20048c0 <__alt_data_end+0xfe0048c0>
 20050a4:	d9002d17 	ldw	r4,180(sp)
 20050a8:	d9801e04 	addi	r6,sp,120
 20050ac:	b80b883a 	mov	r5,r23
 20050b0:	20093840 	call	2009384 <__sprint_r>
 20050b4:	1039991e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 20050b8:	d8802617 	ldw	r2,152(sp)
 20050bc:	d9403317 	ldw	r5,204(sp)
 20050c0:	d8c02017 	ldw	r3,128(sp)
 20050c4:	da000404 	addi	r8,sp,16
 20050c8:	2885c83a 	sub	r2,r5,r2
 20050cc:	003dfb06 	br	20048bc <__alt_data_end+0xfe0048bc>
 20050d0:	9080004c 	andi	r2,r18,1
 20050d4:	103e8f1e 	bne	r2,zero,2004b14 <__alt_data_end+0xfe004b14>
 20050d8:	d8802117 	ldw	r2,132(sp)
 20050dc:	003e9e06 	br	2004b58 <__alt_data_end+0xfe004b58>
 20050e0:	1025883a 	mov	r18,r2
 20050e4:	0039883a 	mov	fp,zero
 20050e8:	00800084 	movi	r2,2
 20050ec:	003fd306 	br	200503c <__alt_data_end+0xfe00503c>
 20050f0:	07000b44 	movi	fp,45
 20050f4:	df002785 	stb	fp,158(sp)
 20050f8:	003a1b06 	br	2003968 <__alt_data_end+0xfe003968>
 20050fc:	00c00b44 	movi	r3,45
 2005100:	d8c02785 	stb	r3,158(sp)
 2005104:	d8802915 	stw	r2,164(sp)
 2005108:	dc802c17 	ldw	r18,176(sp)
 200510c:	d8002a15 	stw	zero,168(sp)
 2005110:	07000b44 	movi	fp,45
 2005114:	003a5e06 	br	2003a90 <__alt_data_end+0xfe003a90>
 2005118:	04008074 	movhi	r16,513
 200511c:	84056004 	addi	r16,r16,5504
 2005120:	003f4706 	br	2004e40 <__alt_data_end+0xfe004e40>
 2005124:	d9002e17 	ldw	r4,184(sp)
 2005128:	d9402f17 	ldw	r5,188(sp)
 200512c:	20800017 	ldw	r2,0(r4)
 2005130:	21000104 	addi	r4,r4,4
 2005134:	d9002e15 	stw	r4,184(sp)
 2005138:	11400015 	stw	r5,0(r2)
 200513c:	0038ab06 	br	20033ec <__alt_data_end+0xfe0033ec>
 2005140:	dd802617 	ldw	r22,152(sp)
 2005144:	00bfff44 	movi	r2,-3
 2005148:	b0801c16 	blt	r22,r2,20051bc <___vfprintf_internal_r+0x1eb0>
 200514c:	d9402a17 	ldw	r5,168(sp)
 2005150:	2d801a16 	blt	r5,r22,20051bc <___vfprintf_internal_r+0x1eb0>
 2005154:	dd803215 	stw	r22,200(sp)
 2005158:	003e8906 	br	2004b80 <__alt_data_end+0xfe004b80>
 200515c:	01008074 	movhi	r4,513
 2005160:	21056d84 	addi	r4,r4,5558
 2005164:	d9002c15 	stw	r4,176(sp)
 2005168:	003c9106 	br	20043b0 <__alt_data_end+0xfe0043b0>
 200516c:	e005883a 	mov	r2,fp
 2005170:	003e7906 	br	2004b58 <__alt_data_end+0xfe004b58>
 2005174:	d9002a17 	ldw	r4,168(sp)
 2005178:	df002783 	ldbu	fp,158(sp)
 200517c:	dcc02e15 	stw	r19,184(sp)
 2005180:	d9002915 	stw	r4,164(sp)
 2005184:	d9002b15 	stw	r4,172(sp)
 2005188:	d8002a15 	stw	zero,168(sp)
 200518c:	d8003215 	stw	zero,200(sp)
 2005190:	003a3b06 	br	2003a80 <__alt_data_end+0xfe003a80>
 2005194:	9080004c 	andi	r2,r18,1
 2005198:	0039883a 	mov	fp,zero
 200519c:	10000426 	beq	r2,zero,20051b0 <___vfprintf_internal_r+0x1ea4>
 20051a0:	00800c04 	movi	r2,48
 20051a4:	dc001dc4 	addi	r16,sp,119
 20051a8:	d8801dc5 	stb	r2,119(sp)
 20051ac:	003b6406 	br	2003f40 <__alt_data_end+0xfe003f40>
 20051b0:	d8002b15 	stw	zero,172(sp)
 20051b4:	dc001e04 	addi	r16,sp,120
 20051b8:	003a2b06 	br	2003a68 <__alt_data_end+0xfe003a68>
 20051bc:	8c7fff84 	addi	r17,r17,-2
 20051c0:	b5bfffc4 	addi	r22,r22,-1
 20051c4:	dd802615 	stw	r22,152(sp)
 20051c8:	dc4022c5 	stb	r17,139(sp)
 20051cc:	b000bf16 	blt	r22,zero,20054cc <___vfprintf_internal_r+0x21c0>
 20051d0:	00800ac4 	movi	r2,43
 20051d4:	d8802305 	stb	r2,140(sp)
 20051d8:	00800244 	movi	r2,9
 20051dc:	15807016 	blt	r2,r22,20053a0 <___vfprintf_internal_r+0x2094>
 20051e0:	00800c04 	movi	r2,48
 20051e4:	b5800c04 	addi	r22,r22,48
 20051e8:	d8802345 	stb	r2,141(sp)
 20051ec:	dd802385 	stb	r22,142(sp)
 20051f0:	d88023c4 	addi	r2,sp,143
 20051f4:	df0022c4 	addi	fp,sp,139
 20051f8:	d8c03317 	ldw	r3,204(sp)
 20051fc:	1739c83a 	sub	fp,r2,fp
 2005200:	d9003317 	ldw	r4,204(sp)
 2005204:	e0c7883a 	add	r3,fp,r3
 2005208:	df003a15 	stw	fp,232(sp)
 200520c:	d8c02b15 	stw	r3,172(sp)
 2005210:	00800044 	movi	r2,1
 2005214:	1100b30e 	bge	r2,r4,20054e4 <___vfprintf_internal_r+0x21d8>
 2005218:	d8c02b17 	ldw	r3,172(sp)
 200521c:	18c00044 	addi	r3,r3,1
 2005220:	d8c02b15 	stw	r3,172(sp)
 2005224:	1805883a 	mov	r2,r3
 2005228:	1800ac16 	blt	r3,zero,20054dc <___vfprintf_internal_r+0x21d0>
 200522c:	d8003215 	stw	zero,200(sp)
 2005230:	003e5d06 	br	2004ba8 <__alt_data_end+0xfe004ba8>
 2005234:	d9002d17 	ldw	r4,180(sp)
 2005238:	d9801e04 	addi	r6,sp,120
 200523c:	b80b883a 	mov	r5,r23
 2005240:	20093840 	call	2009384 <__sprint_r>
 2005244:	1039351e 	bne	r2,zero,200371c <__alt_data_end+0xfe00371c>
 2005248:	dc402617 	ldw	r17,152(sp)
 200524c:	d8c02017 	ldw	r3,128(sp)
 2005250:	d8801f17 	ldw	r2,124(sp)
 2005254:	da000404 	addi	r8,sp,16
 2005258:	003ed606 	br	2004db4 <__alt_data_end+0xfe004db4>
 200525c:	182b883a 	mov	r21,r3
 2005260:	d8002a15 	stw	zero,168(sp)
 2005264:	00388c06 	br	2003498 <__alt_data_end+0xfe003498>
 2005268:	d8802a17 	ldw	r2,168(sp)
 200526c:	103e071e 	bne	r2,zero,2004a8c <__alt_data_end+0xfe004a8c>
 2005270:	dc002a15 	stw	r16,168(sp)
 2005274:	003e0506 	br	2004a8c <__alt_data_end+0xfe004a8c>
 2005278:	d9002a17 	ldw	r4,168(sp)
 200527c:	20c00044 	addi	r3,r4,1
 2005280:	003e0f06 	br	2004ac0 <__alt_data_end+0xfe004ac0>
 2005284:	01400184 	movi	r5,6
 2005288:	d9402a15 	stw	r5,168(sp)
 200528c:	003dff06 	br	2004a8c <__alt_data_end+0xfe004a8c>
 2005290:	d8802104 	addi	r2,sp,132
 2005294:	d8800315 	stw	r2,12(sp)
 2005298:	d8802504 	addi	r2,sp,148
 200529c:	d8800215 	stw	r2,8(sp)
 20052a0:	d8802604 	addi	r2,sp,152
 20052a4:	d8800115 	stw	r2,4(sp)
 20052a8:	d8802a17 	ldw	r2,168(sp)
 20052ac:	d9403617 	ldw	r5,216(sp)
 20052b0:	d9002d17 	ldw	r4,180(sp)
 20052b4:	d8800015 	stw	r2,0(sp)
 20052b8:	01c000c4 	movi	r7,3
 20052bc:	980d883a 	mov	r6,r19
 20052c0:	da003d15 	stw	r8,244(sp)
 20052c4:	2005af00 	call	2005af0 <_dtoa_r>
 20052c8:	d8c02a17 	ldw	r3,168(sp)
 20052cc:	da003d17 	ldw	r8,244(sp)
 20052d0:	1021883a 	mov	r16,r2
 20052d4:	10f9883a 	add	fp,r2,r3
 20052d8:	81000007 	ldb	r4,0(r16)
 20052dc:	00800c04 	movi	r2,48
 20052e0:	20805e26 	beq	r4,r2,200545c <___vfprintf_internal_r+0x2150>
 20052e4:	d8c02617 	ldw	r3,152(sp)
 20052e8:	e0f9883a 	add	fp,fp,r3
 20052ec:	003e0a06 	br	2004b18 <__alt_data_end+0xfe004b18>
 20052f0:	00c00b44 	movi	r3,45
 20052f4:	24e0003c 	xorhi	r19,r4,32768
 20052f8:	d8c02905 	stb	r3,164(sp)
 20052fc:	003de906 	br	2004aa4 <__alt_data_end+0xfe004aa4>
 2005300:	d8c03217 	ldw	r3,200(sp)
 2005304:	00c07a0e 	bge	zero,r3,20054f0 <___vfprintf_internal_r+0x21e4>
 2005308:	00800044 	movi	r2,1
 200530c:	d9003317 	ldw	r4,204(sp)
 2005310:	1105883a 	add	r2,r2,r4
 2005314:	d8802b15 	stw	r2,172(sp)
 2005318:	10004e16 	blt	r2,zero,2005454 <___vfprintf_internal_r+0x2148>
 200531c:	044019c4 	movi	r17,103
 2005320:	003e2106 	br	2004ba8 <__alt_data_end+0xfe004ba8>
 2005324:	d9002a17 	ldw	r4,168(sp)
 2005328:	d8802104 	addi	r2,sp,132
 200532c:	d8800315 	stw	r2,12(sp)
 2005330:	d9000015 	stw	r4,0(sp)
 2005334:	d8802504 	addi	r2,sp,148
 2005338:	d9403617 	ldw	r5,216(sp)
 200533c:	d9002d17 	ldw	r4,180(sp)
 2005340:	d8800215 	stw	r2,8(sp)
 2005344:	d8802604 	addi	r2,sp,152
 2005348:	d8800115 	stw	r2,4(sp)
 200534c:	01c000c4 	movi	r7,3
 2005350:	980d883a 	mov	r6,r19
 2005354:	da003d15 	stw	r8,244(sp)
 2005358:	2005af00 	call	2005af0 <_dtoa_r>
 200535c:	d8c02a17 	ldw	r3,168(sp)
 2005360:	da003d17 	ldw	r8,244(sp)
 2005364:	1021883a 	mov	r16,r2
 2005368:	00801184 	movi	r2,70
 200536c:	80f9883a 	add	fp,r16,r3
 2005370:	88bfd926 	beq	r17,r2,20052d8 <__alt_data_end+0xfe0052d8>
 2005374:	003de806 	br	2004b18 <__alt_data_end+0xfe004b18>
 2005378:	d9002a17 	ldw	r4,168(sp)
 200537c:	00c04d0e 	bge	zero,r3,20054b4 <___vfprintf_internal_r+0x21a8>
 2005380:	2000441e 	bne	r4,zero,2005494 <___vfprintf_internal_r+0x2188>
 2005384:	9480004c 	andi	r18,r18,1
 2005388:	9000421e 	bne	r18,zero,2005494 <___vfprintf_internal_r+0x2188>
 200538c:	1805883a 	mov	r2,r3
 2005390:	18006f16 	blt	r3,zero,2005550 <___vfprintf_internal_r+0x2244>
 2005394:	d8c03217 	ldw	r3,200(sp)
 2005398:	d8c02b15 	stw	r3,172(sp)
 200539c:	003e0206 	br	2004ba8 <__alt_data_end+0xfe004ba8>
 20053a0:	df0022c4 	addi	fp,sp,139
 20053a4:	dc002a15 	stw	r16,168(sp)
 20053a8:	4027883a 	mov	r19,r8
 20053ac:	e021883a 	mov	r16,fp
 20053b0:	b009883a 	mov	r4,r22
 20053b4:	01400284 	movi	r5,10
 20053b8:	200091c0 	call	200091c <__modsi3>
 20053bc:	10800c04 	addi	r2,r2,48
 20053c0:	843fffc4 	addi	r16,r16,-1
 20053c4:	b009883a 	mov	r4,r22
 20053c8:	01400284 	movi	r5,10
 20053cc:	80800005 	stb	r2,0(r16)
 20053d0:	20008980 	call	2000898 <__divsi3>
 20053d4:	102d883a 	mov	r22,r2
 20053d8:	00800244 	movi	r2,9
 20053dc:	15bff416 	blt	r2,r22,20053b0 <__alt_data_end+0xfe0053b0>
 20053e0:	9811883a 	mov	r8,r19
 20053e4:	b0800c04 	addi	r2,r22,48
 20053e8:	8027883a 	mov	r19,r16
 20053ec:	997fffc4 	addi	r5,r19,-1
 20053f0:	98bfffc5 	stb	r2,-1(r19)
 20053f4:	dc002a17 	ldw	r16,168(sp)
 20053f8:	2f006d2e 	bgeu	r5,fp,20055b0 <___vfprintf_internal_r+0x22a4>
 20053fc:	d9c02384 	addi	r7,sp,142
 2005400:	3ccfc83a 	sub	r7,r7,r19
 2005404:	d9002344 	addi	r4,sp,141
 2005408:	e1cf883a 	add	r7,fp,r7
 200540c:	00000106 	br	2005414 <___vfprintf_internal_r+0x2108>
 2005410:	28800003 	ldbu	r2,0(r5)
 2005414:	20800005 	stb	r2,0(r4)
 2005418:	21000044 	addi	r4,r4,1
 200541c:	29400044 	addi	r5,r5,1
 2005420:	393ffb1e 	bne	r7,r4,2005410 <__alt_data_end+0xfe005410>
 2005424:	d8802304 	addi	r2,sp,140
 2005428:	14c5c83a 	sub	r2,r2,r19
 200542c:	d8c02344 	addi	r3,sp,141
 2005430:	1885883a 	add	r2,r3,r2
 2005434:	003f7006 	br	20051f8 <__alt_data_end+0xfe0051f8>
 2005438:	0005883a 	mov	r2,zero
 200543c:	003f0f06 	br	200507c <__alt_data_end+0xfe00507c>
 2005440:	d8c03217 	ldw	r3,200(sp)
 2005444:	18c00044 	addi	r3,r3,1
 2005448:	d8c02b15 	stw	r3,172(sp)
 200544c:	1805883a 	mov	r2,r3
 2005450:	183fb20e 	bge	r3,zero,200531c <__alt_data_end+0xfe00531c>
 2005454:	0005883a 	mov	r2,zero
 2005458:	003fb006 	br	200531c <__alt_data_end+0xfe00531c>
 200545c:	d9003617 	ldw	r4,216(sp)
 2005460:	000d883a 	mov	r6,zero
 2005464:	000f883a 	mov	r7,zero
 2005468:	980b883a 	mov	r5,r19
 200546c:	d8c03c15 	stw	r3,240(sp)
 2005470:	da003d15 	stw	r8,244(sp)
 2005474:	200cde00 	call	200cde0 <__eqdf2>
 2005478:	d8c03c17 	ldw	r3,240(sp)
 200547c:	da003d17 	ldw	r8,244(sp)
 2005480:	103f9826 	beq	r2,zero,20052e4 <__alt_data_end+0xfe0052e4>
 2005484:	00800044 	movi	r2,1
 2005488:	10c7c83a 	sub	r3,r2,r3
 200548c:	d8c02615 	stw	r3,152(sp)
 2005490:	003f9506 	br	20052e8 <__alt_data_end+0xfe0052e8>
 2005494:	d9002a17 	ldw	r4,168(sp)
 2005498:	d8c03217 	ldw	r3,200(sp)
 200549c:	20800044 	addi	r2,r4,1
 20054a0:	1885883a 	add	r2,r3,r2
 20054a4:	d8802b15 	stw	r2,172(sp)
 20054a8:	103dbf0e 	bge	r2,zero,2004ba8 <__alt_data_end+0xfe004ba8>
 20054ac:	0005883a 	mov	r2,zero
 20054b0:	003dbd06 	br	2004ba8 <__alt_data_end+0xfe004ba8>
 20054b4:	2000201e 	bne	r4,zero,2005538 <___vfprintf_internal_r+0x222c>
 20054b8:	9480004c 	andi	r18,r18,1
 20054bc:	90001e1e 	bne	r18,zero,2005538 <___vfprintf_internal_r+0x222c>
 20054c0:	00800044 	movi	r2,1
 20054c4:	d8802b15 	stw	r2,172(sp)
 20054c8:	003db706 	br	2004ba8 <__alt_data_end+0xfe004ba8>
 20054cc:	00800b44 	movi	r2,45
 20054d0:	05adc83a 	sub	r22,zero,r22
 20054d4:	d8802305 	stb	r2,140(sp)
 20054d8:	003f3f06 	br	20051d8 <__alt_data_end+0xfe0051d8>
 20054dc:	0005883a 	mov	r2,zero
 20054e0:	003f5206 	br	200522c <__alt_data_end+0xfe00522c>
 20054e4:	90a4703a 	and	r18,r18,r2
 20054e8:	903f4e26 	beq	r18,zero,2005224 <__alt_data_end+0xfe005224>
 20054ec:	003f4a06 	br	2005218 <__alt_data_end+0xfe005218>
 20054f0:	00800084 	movi	r2,2
 20054f4:	10c5c83a 	sub	r2,r2,r3
 20054f8:	003f8406 	br	200530c <__alt_data_end+0xfe00530c>
 20054fc:	d9402e17 	ldw	r5,184(sp)
 2005500:	d9002e17 	ldw	r4,184(sp)
 2005504:	ac400043 	ldbu	r17,1(r21)
 2005508:	29400017 	ldw	r5,0(r5)
 200550c:	20800104 	addi	r2,r4,4
 2005510:	d8802e15 	stw	r2,184(sp)
 2005514:	d9402a15 	stw	r5,168(sp)
 2005518:	182b883a 	mov	r21,r3
 200551c:	283e7b0e 	bge	r5,zero,2004f0c <__alt_data_end+0xfe004f0c>
 2005520:	8c403fcc 	andi	r17,r17,255
 2005524:	017fffc4 	movi	r5,-1
 2005528:	8c40201c 	xori	r17,r17,128
 200552c:	d9402a15 	stw	r5,168(sp)
 2005530:	8c7fe004 	addi	r17,r17,-128
 2005534:	0037d706 	br	2003494 <__alt_data_end+0xfe003494>
 2005538:	d8c02a17 	ldw	r3,168(sp)
 200553c:	18c00084 	addi	r3,r3,2
 2005540:	d8c02b15 	stw	r3,172(sp)
 2005544:	1805883a 	mov	r2,r3
 2005548:	183d970e 	bge	r3,zero,2004ba8 <__alt_data_end+0xfe004ba8>
 200554c:	003fd706 	br	20054ac <__alt_data_end+0xfe0054ac>
 2005550:	0005883a 	mov	r2,zero
 2005554:	003f8f06 	br	2005394 <__alt_data_end+0xfe005394>
 2005558:	9080004c 	andi	r2,r18,1
 200555c:	103f821e 	bne	r2,zero,2005368 <__alt_data_end+0xfe005368>
 2005560:	d8802117 	ldw	r2,132(sp)
 2005564:	1405c83a 	sub	r2,r2,r16
 2005568:	d8803315 	stw	r2,204(sp)
 200556c:	b47ef426 	beq	r22,r17,2005140 <__alt_data_end+0xfe005140>
 2005570:	dd802617 	ldw	r22,152(sp)
 2005574:	003f1206 	br	20051c0 <__alt_data_end+0xfe0051c0>
 2005578:	d8c02b03 	ldbu	r3,172(sp)
 200557c:	d8c02785 	stb	r3,158(sp)
 2005580:	0038df06 	br	2003900 <__alt_data_end+0xfe003900>
 2005584:	d8c02b03 	ldbu	r3,172(sp)
 2005588:	d8c02785 	stb	r3,158(sp)
 200558c:	0038aa06 	br	2003838 <__alt_data_end+0xfe003838>
 2005590:	d8c02b03 	ldbu	r3,172(sp)
 2005594:	d8c02785 	stb	r3,158(sp)
 2005598:	003a4306 	br	2003ea8 <__alt_data_end+0xfe003ea8>
 200559c:	d8c02b03 	ldbu	r3,172(sp)
 20055a0:	d8c02785 	stb	r3,158(sp)
 20055a4:	003af506 	br	200417c <__alt_data_end+0xfe00417c>
 20055a8:	0005883a 	mov	r2,zero
 20055ac:	003d7b06 	br	2004b9c <__alt_data_end+0xfe004b9c>
 20055b0:	d8802344 	addi	r2,sp,141
 20055b4:	003f1006 	br	20051f8 <__alt_data_end+0xfe0051f8>
 20055b8:	d8c02b03 	ldbu	r3,172(sp)
 20055bc:	d8c02785 	stb	r3,158(sp)
 20055c0:	0038fd06 	br	20039b8 <__alt_data_end+0xfe0039b8>
 20055c4:	d8c02b03 	ldbu	r3,172(sp)
 20055c8:	d8c02785 	stb	r3,158(sp)
 20055cc:	003a9706 	br	200402c <__alt_data_end+0xfe00402c>
 20055d0:	d8c02b03 	ldbu	r3,172(sp)
 20055d4:	d8c02785 	stb	r3,158(sp)
 20055d8:	003a1806 	br	2003e3c <__alt_data_end+0xfe003e3c>
 20055dc:	d8c02b03 	ldbu	r3,172(sp)
 20055e0:	d8c02785 	stb	r3,158(sp)
 20055e4:	003abe06 	br	20040e0 <__alt_data_end+0xfe0040e0>

020055e8 <__vfprintf_internal>:
 20055e8:	00808074 	movhi	r2,513
 20055ec:	108d1404 	addi	r2,r2,13392
 20055f0:	300f883a 	mov	r7,r6
 20055f4:	280d883a 	mov	r6,r5
 20055f8:	200b883a 	mov	r5,r4
 20055fc:	11000017 	ldw	r4,0(r2)
 2005600:	200330c1 	jmpi	200330c <___vfprintf_internal_r>

02005604 <__sbprintf>:
 2005604:	2880030b 	ldhu	r2,12(r5)
 2005608:	2ac01917 	ldw	r11,100(r5)
 200560c:	2a80038b 	ldhu	r10,14(r5)
 2005610:	2a400717 	ldw	r9,28(r5)
 2005614:	2a000917 	ldw	r8,36(r5)
 2005618:	defee204 	addi	sp,sp,-1144
 200561c:	00c10004 	movi	r3,1024
 2005620:	dc011a15 	stw	r16,1128(sp)
 2005624:	10bfff4c 	andi	r2,r2,65533
 2005628:	2821883a 	mov	r16,r5
 200562c:	d8cb883a 	add	r5,sp,r3
 2005630:	dc811c15 	stw	r18,1136(sp)
 2005634:	dc411b15 	stw	r17,1132(sp)
 2005638:	dfc11d15 	stw	ra,1140(sp)
 200563c:	2025883a 	mov	r18,r4
 2005640:	d881030d 	sth	r2,1036(sp)
 2005644:	dac11915 	stw	r11,1124(sp)
 2005648:	da81038d 	sth	r10,1038(sp)
 200564c:	da410715 	stw	r9,1052(sp)
 2005650:	da010915 	stw	r8,1060(sp)
 2005654:	dec10015 	stw	sp,1024(sp)
 2005658:	dec10415 	stw	sp,1040(sp)
 200565c:	d8c10215 	stw	r3,1032(sp)
 2005660:	d8c10515 	stw	r3,1044(sp)
 2005664:	d8010615 	stw	zero,1048(sp)
 2005668:	200330c0 	call	200330c <___vfprintf_internal_r>
 200566c:	1023883a 	mov	r17,r2
 2005670:	10000416 	blt	r2,zero,2005684 <__sbprintf+0x80>
 2005674:	d9410004 	addi	r5,sp,1024
 2005678:	9009883a 	mov	r4,r18
 200567c:	2000d940 	call	2000d94 <_fflush_r>
 2005680:	10000d1e 	bne	r2,zero,20056b8 <__sbprintf+0xb4>
 2005684:	d881030b 	ldhu	r2,1036(sp)
 2005688:	1080100c 	andi	r2,r2,64
 200568c:	10000326 	beq	r2,zero,200569c <__sbprintf+0x98>
 2005690:	8080030b 	ldhu	r2,12(r16)
 2005694:	10801014 	ori	r2,r2,64
 2005698:	8080030d 	sth	r2,12(r16)
 200569c:	8805883a 	mov	r2,r17
 20056a0:	dfc11d17 	ldw	ra,1140(sp)
 20056a4:	dc811c17 	ldw	r18,1136(sp)
 20056a8:	dc411b17 	ldw	r17,1132(sp)
 20056ac:	dc011a17 	ldw	r16,1128(sp)
 20056b0:	dec11e04 	addi	sp,sp,1144
 20056b4:	f800283a 	ret
 20056b8:	047fffc4 	movi	r17,-1
 20056bc:	003ff106 	br	2005684 <__alt_data_end+0xfe005684>

020056c0 <_write_r>:
 20056c0:	defffd04 	addi	sp,sp,-12
 20056c4:	2805883a 	mov	r2,r5
 20056c8:	dc000015 	stw	r16,0(sp)
 20056cc:	04008074 	movhi	r16,513
 20056d0:	dc400115 	stw	r17,4(sp)
 20056d4:	300b883a 	mov	r5,r6
 20056d8:	84140c04 	addi	r16,r16,20528
 20056dc:	2023883a 	mov	r17,r4
 20056e0:	380d883a 	mov	r6,r7
 20056e4:	1009883a 	mov	r4,r2
 20056e8:	dfc00215 	stw	ra,8(sp)
 20056ec:	80000015 	stw	zero,0(r16)
 20056f0:	200ef200 	call	200ef20 <write>
 20056f4:	00ffffc4 	movi	r3,-1
 20056f8:	10c00526 	beq	r2,r3,2005710 <_write_r+0x50>
 20056fc:	dfc00217 	ldw	ra,8(sp)
 2005700:	dc400117 	ldw	r17,4(sp)
 2005704:	dc000017 	ldw	r16,0(sp)
 2005708:	dec00304 	addi	sp,sp,12
 200570c:	f800283a 	ret
 2005710:	80c00017 	ldw	r3,0(r16)
 2005714:	183ff926 	beq	r3,zero,20056fc <__alt_data_end+0xfe0056fc>
 2005718:	88c00015 	stw	r3,0(r17)
 200571c:	003ff706 	br	20056fc <__alt_data_end+0xfe0056fc>

02005720 <__swsetup_r>:
 2005720:	00808074 	movhi	r2,513
 2005724:	defffd04 	addi	sp,sp,-12
 2005728:	108d1404 	addi	r2,r2,13392
 200572c:	dc400115 	stw	r17,4(sp)
 2005730:	2023883a 	mov	r17,r4
 2005734:	11000017 	ldw	r4,0(r2)
 2005738:	dc000015 	stw	r16,0(sp)
 200573c:	dfc00215 	stw	ra,8(sp)
 2005740:	2821883a 	mov	r16,r5
 2005744:	20000226 	beq	r4,zero,2005750 <__swsetup_r+0x30>
 2005748:	20800e17 	ldw	r2,56(r4)
 200574c:	10003126 	beq	r2,zero,2005814 <__swsetup_r+0xf4>
 2005750:	8080030b 	ldhu	r2,12(r16)
 2005754:	10c0020c 	andi	r3,r2,8
 2005758:	1009883a 	mov	r4,r2
 200575c:	18000f26 	beq	r3,zero,200579c <__swsetup_r+0x7c>
 2005760:	80c00417 	ldw	r3,16(r16)
 2005764:	18001526 	beq	r3,zero,20057bc <__swsetup_r+0x9c>
 2005768:	1100004c 	andi	r4,r2,1
 200576c:	20001c1e 	bne	r4,zero,20057e0 <__swsetup_r+0xc0>
 2005770:	1080008c 	andi	r2,r2,2
 2005774:	1000291e 	bne	r2,zero,200581c <__swsetup_r+0xfc>
 2005778:	80800517 	ldw	r2,20(r16)
 200577c:	80800215 	stw	r2,8(r16)
 2005780:	18001c26 	beq	r3,zero,20057f4 <__swsetup_r+0xd4>
 2005784:	0005883a 	mov	r2,zero
 2005788:	dfc00217 	ldw	ra,8(sp)
 200578c:	dc400117 	ldw	r17,4(sp)
 2005790:	dc000017 	ldw	r16,0(sp)
 2005794:	dec00304 	addi	sp,sp,12
 2005798:	f800283a 	ret
 200579c:	2080040c 	andi	r2,r4,16
 20057a0:	10002e26 	beq	r2,zero,200585c <__swsetup_r+0x13c>
 20057a4:	2080010c 	andi	r2,r4,4
 20057a8:	10001e1e 	bne	r2,zero,2005824 <__swsetup_r+0x104>
 20057ac:	80c00417 	ldw	r3,16(r16)
 20057b0:	20800214 	ori	r2,r4,8
 20057b4:	8080030d 	sth	r2,12(r16)
 20057b8:	183feb1e 	bne	r3,zero,2005768 <__alt_data_end+0xfe005768>
 20057bc:	1100a00c 	andi	r4,r2,640
 20057c0:	01408004 	movi	r5,512
 20057c4:	217fe826 	beq	r4,r5,2005768 <__alt_data_end+0xfe005768>
 20057c8:	800b883a 	mov	r5,r16
 20057cc:	8809883a 	mov	r4,r17
 20057d0:	20020f40 	call	20020f4 <__smakebuf_r>
 20057d4:	8080030b 	ldhu	r2,12(r16)
 20057d8:	80c00417 	ldw	r3,16(r16)
 20057dc:	003fe206 	br	2005768 <__alt_data_end+0xfe005768>
 20057e0:	80800517 	ldw	r2,20(r16)
 20057e4:	80000215 	stw	zero,8(r16)
 20057e8:	0085c83a 	sub	r2,zero,r2
 20057ec:	80800615 	stw	r2,24(r16)
 20057f0:	183fe41e 	bne	r3,zero,2005784 <__alt_data_end+0xfe005784>
 20057f4:	80c0030b 	ldhu	r3,12(r16)
 20057f8:	0005883a 	mov	r2,zero
 20057fc:	1900200c 	andi	r4,r3,128
 2005800:	203fe126 	beq	r4,zero,2005788 <__alt_data_end+0xfe005788>
 2005804:	18c01014 	ori	r3,r3,64
 2005808:	80c0030d 	sth	r3,12(r16)
 200580c:	00bfffc4 	movi	r2,-1
 2005810:	003fdd06 	br	2005788 <__alt_data_end+0xfe005788>
 2005814:	20011800 	call	2001180 <__sinit>
 2005818:	003fcd06 	br	2005750 <__alt_data_end+0xfe005750>
 200581c:	0005883a 	mov	r2,zero
 2005820:	003fd606 	br	200577c <__alt_data_end+0xfe00577c>
 2005824:	81400c17 	ldw	r5,48(r16)
 2005828:	28000626 	beq	r5,zero,2005844 <__swsetup_r+0x124>
 200582c:	80801004 	addi	r2,r16,64
 2005830:	28800326 	beq	r5,r2,2005840 <__swsetup_r+0x120>
 2005834:	8809883a 	mov	r4,r17
 2005838:	20016700 	call	2001670 <_free_r>
 200583c:	8100030b 	ldhu	r4,12(r16)
 2005840:	80000c15 	stw	zero,48(r16)
 2005844:	80c00417 	ldw	r3,16(r16)
 2005848:	00bff6c4 	movi	r2,-37
 200584c:	1108703a 	and	r4,r2,r4
 2005850:	80000115 	stw	zero,4(r16)
 2005854:	80c00015 	stw	r3,0(r16)
 2005858:	003fd506 	br	20057b0 <__alt_data_end+0xfe0057b0>
 200585c:	00800244 	movi	r2,9
 2005860:	88800015 	stw	r2,0(r17)
 2005864:	20801014 	ori	r2,r4,64
 2005868:	8080030d 	sth	r2,12(r16)
 200586c:	00bfffc4 	movi	r2,-1
 2005870:	003fc506 	br	2005788 <__alt_data_end+0xfe005788>

02005874 <_close_r>:
 2005874:	defffd04 	addi	sp,sp,-12
 2005878:	dc000015 	stw	r16,0(sp)
 200587c:	04008074 	movhi	r16,513
 2005880:	dc400115 	stw	r17,4(sp)
 2005884:	84140c04 	addi	r16,r16,20528
 2005888:	2023883a 	mov	r17,r4
 200588c:	2809883a 	mov	r4,r5
 2005890:	dfc00215 	stw	ra,8(sp)
 2005894:	80000015 	stw	zero,0(r16)
 2005898:	200e4440 	call	200e444 <close>
 200589c:	00ffffc4 	movi	r3,-1
 20058a0:	10c00526 	beq	r2,r3,20058b8 <_close_r+0x44>
 20058a4:	dfc00217 	ldw	ra,8(sp)
 20058a8:	dc400117 	ldw	r17,4(sp)
 20058ac:	dc000017 	ldw	r16,0(sp)
 20058b0:	dec00304 	addi	sp,sp,12
 20058b4:	f800283a 	ret
 20058b8:	80c00017 	ldw	r3,0(r16)
 20058bc:	183ff926 	beq	r3,zero,20058a4 <__alt_data_end+0xfe0058a4>
 20058c0:	88c00015 	stw	r3,0(r17)
 20058c4:	003ff706 	br	20058a4 <__alt_data_end+0xfe0058a4>

020058c8 <quorem>:
 20058c8:	defff204 	addi	sp,sp,-56
 20058cc:	ddc00b15 	stw	r23,44(sp)
 20058d0:	20800417 	ldw	r2,16(r4)
 20058d4:	2dc00417 	ldw	r23,16(r5)
 20058d8:	dfc00d15 	stw	ra,52(sp)
 20058dc:	df000c15 	stw	fp,48(sp)
 20058e0:	dd800a15 	stw	r22,40(sp)
 20058e4:	dd400915 	stw	r21,36(sp)
 20058e8:	dd000815 	stw	r20,32(sp)
 20058ec:	dcc00715 	stw	r19,28(sp)
 20058f0:	dc800615 	stw	r18,24(sp)
 20058f4:	dc400515 	stw	r17,20(sp)
 20058f8:	dc000415 	stw	r16,16(sp)
 20058fc:	15c07a16 	blt	r2,r23,2005ae8 <quorem+0x220>
 2005900:	bdffffc4 	addi	r23,r23,-1
 2005904:	bde9883a 	add	r20,r23,r23
 2005908:	28c00504 	addi	r3,r5,20
 200590c:	a529883a 	add	r20,r20,r20
 2005910:	1d39883a 	add	fp,r3,r20
 2005914:	24c00504 	addi	r19,r4,20
 2005918:	d9400215 	stw	r5,8(sp)
 200591c:	9d29883a 	add	r20,r19,r20
 2005920:	e1400017 	ldw	r5,0(fp)
 2005924:	d9000015 	stw	r4,0(sp)
 2005928:	a1000017 	ldw	r4,0(r20)
 200592c:	29400044 	addi	r5,r5,1
 2005930:	d8c00115 	stw	r3,4(sp)
 2005934:	dd000315 	stw	r20,12(sp)
 2005938:	20009900 	call	2000990 <__udivsi3>
 200593c:	1025883a 	mov	r18,r2
 2005940:	10003026 	beq	r2,zero,2005a04 <quorem+0x13c>
 2005944:	dc400117 	ldw	r17,4(sp)
 2005948:	9829883a 	mov	r20,r19
 200594c:	002d883a 	mov	r22,zero
 2005950:	0021883a 	mov	r16,zero
 2005954:	8d400017 	ldw	r21,0(r17)
 2005958:	900b883a 	mov	r5,r18
 200595c:	8c400104 	addi	r17,r17,4
 2005960:	a93fffcc 	andi	r4,r21,65535
 2005964:	2000a4c0 	call	2000a4c <__mulsi3>
 2005968:	a808d43a 	srli	r4,r21,16
 200596c:	900b883a 	mov	r5,r18
 2005970:	15ad883a 	add	r22,r2,r22
 2005974:	2000a4c0 	call	2000a4c <__mulsi3>
 2005978:	a1000017 	ldw	r4,0(r20)
 200597c:	b00cd43a 	srli	r6,r22,16
 2005980:	b0ffffcc 	andi	r3,r22,65535
 2005984:	217fffcc 	andi	r5,r4,65535
 2005988:	2c21883a 	add	r16,r5,r16
 200598c:	80c7c83a 	sub	r3,r16,r3
 2005990:	2008d43a 	srli	r4,r4,16
 2005994:	1185883a 	add	r2,r2,r6
 2005998:	1821d43a 	srai	r16,r3,16
 200599c:	117fffcc 	andi	r5,r2,65535
 20059a0:	2149c83a 	sub	r4,r4,r5
 20059a4:	2421883a 	add	r16,r4,r16
 20059a8:	8008943a 	slli	r4,r16,16
 20059ac:	18ffffcc 	andi	r3,r3,65535
 20059b0:	102cd43a 	srli	r22,r2,16
 20059b4:	20c8b03a 	or	r4,r4,r3
 20059b8:	a1000015 	stw	r4,0(r20)
 20059bc:	8021d43a 	srai	r16,r16,16
 20059c0:	a5000104 	addi	r20,r20,4
 20059c4:	e47fe32e 	bgeu	fp,r17,2005954 <__alt_data_end+0xfe005954>
 20059c8:	d8c00317 	ldw	r3,12(sp)
 20059cc:	18800017 	ldw	r2,0(r3)
 20059d0:	10000c1e 	bne	r2,zero,2005a04 <quorem+0x13c>
 20059d4:	18bfff04 	addi	r2,r3,-4
 20059d8:	9880082e 	bgeu	r19,r2,20059fc <quorem+0x134>
 20059dc:	18ffff17 	ldw	r3,-4(r3)
 20059e0:	18000326 	beq	r3,zero,20059f0 <quorem+0x128>
 20059e4:	00000506 	br	20059fc <quorem+0x134>
 20059e8:	10c00017 	ldw	r3,0(r2)
 20059ec:	1800031e 	bne	r3,zero,20059fc <quorem+0x134>
 20059f0:	10bfff04 	addi	r2,r2,-4
 20059f4:	bdffffc4 	addi	r23,r23,-1
 20059f8:	98bffb36 	bltu	r19,r2,20059e8 <__alt_data_end+0xfe0059e8>
 20059fc:	d8c00017 	ldw	r3,0(sp)
 2005a00:	1dc00415 	stw	r23,16(r3)
 2005a04:	d9400217 	ldw	r5,8(sp)
 2005a08:	d9000017 	ldw	r4,0(sp)
 2005a0c:	20084400 	call	2008440 <__mcmp>
 2005a10:	10002816 	blt	r2,zero,2005ab4 <quorem+0x1ec>
 2005a14:	dc400117 	ldw	r17,4(sp)
 2005a18:	94800044 	addi	r18,r18,1
 2005a1c:	980d883a 	mov	r6,r19
 2005a20:	0007883a 	mov	r3,zero
 2005a24:	31000017 	ldw	r4,0(r6)
 2005a28:	89400017 	ldw	r5,0(r17)
 2005a2c:	31800104 	addi	r6,r6,4
 2005a30:	20bfffcc 	andi	r2,r4,65535
 2005a34:	10c7883a 	add	r3,r2,r3
 2005a38:	28bfffcc 	andi	r2,r5,65535
 2005a3c:	1885c83a 	sub	r2,r3,r2
 2005a40:	280ad43a 	srli	r5,r5,16
 2005a44:	2008d43a 	srli	r4,r4,16
 2005a48:	1007d43a 	srai	r3,r2,16
 2005a4c:	10bfffcc 	andi	r2,r2,65535
 2005a50:	2149c83a 	sub	r4,r4,r5
 2005a54:	20c9883a 	add	r4,r4,r3
 2005a58:	200a943a 	slli	r5,r4,16
 2005a5c:	8c400104 	addi	r17,r17,4
 2005a60:	2007d43a 	srai	r3,r4,16
 2005a64:	2884b03a 	or	r2,r5,r2
 2005a68:	30bfff15 	stw	r2,-4(r6)
 2005a6c:	e47fed2e 	bgeu	fp,r17,2005a24 <__alt_data_end+0xfe005a24>
 2005a70:	bdc5883a 	add	r2,r23,r23
 2005a74:	1085883a 	add	r2,r2,r2
 2005a78:	9887883a 	add	r3,r19,r2
 2005a7c:	18800017 	ldw	r2,0(r3)
 2005a80:	10000c1e 	bne	r2,zero,2005ab4 <quorem+0x1ec>
 2005a84:	18bfff04 	addi	r2,r3,-4
 2005a88:	9880082e 	bgeu	r19,r2,2005aac <quorem+0x1e4>
 2005a8c:	18ffff17 	ldw	r3,-4(r3)
 2005a90:	18000326 	beq	r3,zero,2005aa0 <quorem+0x1d8>
 2005a94:	00000506 	br	2005aac <quorem+0x1e4>
 2005a98:	10c00017 	ldw	r3,0(r2)
 2005a9c:	1800031e 	bne	r3,zero,2005aac <quorem+0x1e4>
 2005aa0:	10bfff04 	addi	r2,r2,-4
 2005aa4:	bdffffc4 	addi	r23,r23,-1
 2005aa8:	98bffb36 	bltu	r19,r2,2005a98 <__alt_data_end+0xfe005a98>
 2005aac:	d8c00017 	ldw	r3,0(sp)
 2005ab0:	1dc00415 	stw	r23,16(r3)
 2005ab4:	9005883a 	mov	r2,r18
 2005ab8:	dfc00d17 	ldw	ra,52(sp)
 2005abc:	df000c17 	ldw	fp,48(sp)
 2005ac0:	ddc00b17 	ldw	r23,44(sp)
 2005ac4:	dd800a17 	ldw	r22,40(sp)
 2005ac8:	dd400917 	ldw	r21,36(sp)
 2005acc:	dd000817 	ldw	r20,32(sp)
 2005ad0:	dcc00717 	ldw	r19,28(sp)
 2005ad4:	dc800617 	ldw	r18,24(sp)
 2005ad8:	dc400517 	ldw	r17,20(sp)
 2005adc:	dc000417 	ldw	r16,16(sp)
 2005ae0:	dec00e04 	addi	sp,sp,56
 2005ae4:	f800283a 	ret
 2005ae8:	0005883a 	mov	r2,zero
 2005aec:	003ff206 	br	2005ab8 <__alt_data_end+0xfe005ab8>

02005af0 <_dtoa_r>:
 2005af0:	20801017 	ldw	r2,64(r4)
 2005af4:	deffde04 	addi	sp,sp,-136
 2005af8:	df002015 	stw	fp,128(sp)
 2005afc:	dcc01b15 	stw	r19,108(sp)
 2005b00:	dc801a15 	stw	r18,104(sp)
 2005b04:	dc401915 	stw	r17,100(sp)
 2005b08:	dc001815 	stw	r16,96(sp)
 2005b0c:	dfc02115 	stw	ra,132(sp)
 2005b10:	ddc01f15 	stw	r23,124(sp)
 2005b14:	dd801e15 	stw	r22,120(sp)
 2005b18:	dd401d15 	stw	r21,116(sp)
 2005b1c:	dd001c15 	stw	r20,112(sp)
 2005b20:	d9c00315 	stw	r7,12(sp)
 2005b24:	2039883a 	mov	fp,r4
 2005b28:	3023883a 	mov	r17,r6
 2005b2c:	2825883a 	mov	r18,r5
 2005b30:	dc002417 	ldw	r16,144(sp)
 2005b34:	3027883a 	mov	r19,r6
 2005b38:	10000826 	beq	r2,zero,2005b5c <_dtoa_r+0x6c>
 2005b3c:	21801117 	ldw	r6,68(r4)
 2005b40:	00c00044 	movi	r3,1
 2005b44:	100b883a 	mov	r5,r2
 2005b48:	1986983a 	sll	r3,r3,r6
 2005b4c:	11800115 	stw	r6,4(r2)
 2005b50:	10c00215 	stw	r3,8(r2)
 2005b54:	2007b640 	call	2007b64 <_Bfree>
 2005b58:	e0001015 	stw	zero,64(fp)
 2005b5c:	88002e16 	blt	r17,zero,2005c18 <_dtoa_r+0x128>
 2005b60:	80000015 	stw	zero,0(r16)
 2005b64:	889ffc2c 	andhi	r2,r17,32752
 2005b68:	00dffc34 	movhi	r3,32752
 2005b6c:	10c01c26 	beq	r2,r3,2005be0 <_dtoa_r+0xf0>
 2005b70:	000d883a 	mov	r6,zero
 2005b74:	000f883a 	mov	r7,zero
 2005b78:	9009883a 	mov	r4,r18
 2005b7c:	980b883a 	mov	r5,r19
 2005b80:	200cde00 	call	200cde0 <__eqdf2>
 2005b84:	10002b1e 	bne	r2,zero,2005c34 <_dtoa_r+0x144>
 2005b88:	d9c02317 	ldw	r7,140(sp)
 2005b8c:	00800044 	movi	r2,1
 2005b90:	38800015 	stw	r2,0(r7)
 2005b94:	d8802517 	ldw	r2,148(sp)
 2005b98:	10019e26 	beq	r2,zero,2006214 <_dtoa_r+0x724>
 2005b9c:	d8c02517 	ldw	r3,148(sp)
 2005ba0:	00808074 	movhi	r2,513
 2005ba4:	10856d44 	addi	r2,r2,5557
 2005ba8:	18800015 	stw	r2,0(r3)
 2005bac:	10bfffc4 	addi	r2,r2,-1
 2005bb0:	dfc02117 	ldw	ra,132(sp)
 2005bb4:	df002017 	ldw	fp,128(sp)
 2005bb8:	ddc01f17 	ldw	r23,124(sp)
 2005bbc:	dd801e17 	ldw	r22,120(sp)
 2005bc0:	dd401d17 	ldw	r21,116(sp)
 2005bc4:	dd001c17 	ldw	r20,112(sp)
 2005bc8:	dcc01b17 	ldw	r19,108(sp)
 2005bcc:	dc801a17 	ldw	r18,104(sp)
 2005bd0:	dc401917 	ldw	r17,100(sp)
 2005bd4:	dc001817 	ldw	r16,96(sp)
 2005bd8:	dec02204 	addi	sp,sp,136
 2005bdc:	f800283a 	ret
 2005be0:	d8c02317 	ldw	r3,140(sp)
 2005be4:	0089c3c4 	movi	r2,9999
 2005be8:	18800015 	stw	r2,0(r3)
 2005bec:	90017726 	beq	r18,zero,20061cc <_dtoa_r+0x6dc>
 2005bf0:	00808074 	movhi	r2,513
 2005bf4:	10857904 	addi	r2,r2,5604
 2005bf8:	d9002517 	ldw	r4,148(sp)
 2005bfc:	203fec26 	beq	r4,zero,2005bb0 <__alt_data_end+0xfe005bb0>
 2005c00:	10c000c7 	ldb	r3,3(r2)
 2005c04:	1801781e 	bne	r3,zero,20061e8 <_dtoa_r+0x6f8>
 2005c08:	10c000c4 	addi	r3,r2,3
 2005c0c:	d9802517 	ldw	r6,148(sp)
 2005c10:	30c00015 	stw	r3,0(r6)
 2005c14:	003fe606 	br	2005bb0 <__alt_data_end+0xfe005bb0>
 2005c18:	04e00034 	movhi	r19,32768
 2005c1c:	9cffffc4 	addi	r19,r19,-1
 2005c20:	00800044 	movi	r2,1
 2005c24:	8ce6703a 	and	r19,r17,r19
 2005c28:	80800015 	stw	r2,0(r16)
 2005c2c:	9823883a 	mov	r17,r19
 2005c30:	003fcc06 	br	2005b64 <__alt_data_end+0xfe005b64>
 2005c34:	d8800204 	addi	r2,sp,8
 2005c38:	d8800015 	stw	r2,0(sp)
 2005c3c:	d9c00104 	addi	r7,sp,4
 2005c40:	900b883a 	mov	r5,r18
 2005c44:	980d883a 	mov	r6,r19
 2005c48:	e009883a 	mov	r4,fp
 2005c4c:	8820d53a 	srli	r16,r17,20
 2005c50:	200880c0 	call	200880c <__d2b>
 2005c54:	d8800915 	stw	r2,36(sp)
 2005c58:	8001651e 	bne	r16,zero,20061f0 <_dtoa_r+0x700>
 2005c5c:	dd800217 	ldw	r22,8(sp)
 2005c60:	dc000117 	ldw	r16,4(sp)
 2005c64:	00800804 	movi	r2,32
 2005c68:	b421883a 	add	r16,r22,r16
 2005c6c:	80c10c84 	addi	r3,r16,1074
 2005c70:	10c2d10e 	bge	r2,r3,20067b8 <_dtoa_r+0xcc8>
 2005c74:	00801004 	movi	r2,64
 2005c78:	81010484 	addi	r4,r16,1042
 2005c7c:	10c7c83a 	sub	r3,r2,r3
 2005c80:	9108d83a 	srl	r4,r18,r4
 2005c84:	88e2983a 	sll	r17,r17,r3
 2005c88:	2448b03a 	or	r4,r4,r17
 2005c8c:	200e2fc0 	call	200e2fc <__floatunsidf>
 2005c90:	017f8434 	movhi	r5,65040
 2005c94:	01800044 	movi	r6,1
 2005c98:	1009883a 	mov	r4,r2
 2005c9c:	194b883a 	add	r5,r3,r5
 2005ca0:	843fffc4 	addi	r16,r16,-1
 2005ca4:	d9801115 	stw	r6,68(sp)
 2005ca8:	000d883a 	mov	r6,zero
 2005cac:	01cffe34 	movhi	r7,16376
 2005cb0:	200d8a40 	call	200d8a4 <__subdf3>
 2005cb4:	0198dbf4 	movhi	r6,25455
 2005cb8:	01cff4f4 	movhi	r7,16339
 2005cbc:	3190d844 	addi	r6,r6,17249
 2005cc0:	39e1e9c4 	addi	r7,r7,-30809
 2005cc4:	1009883a 	mov	r4,r2
 2005cc8:	180b883a 	mov	r5,r3
 2005ccc:	200d0380 	call	200d038 <__muldf3>
 2005cd0:	01a2d874 	movhi	r6,35681
 2005cd4:	01cff1f4 	movhi	r7,16327
 2005cd8:	31b22cc4 	addi	r6,r6,-14157
 2005cdc:	39e28a04 	addi	r7,r7,-30168
 2005ce0:	180b883a 	mov	r5,r3
 2005ce4:	1009883a 	mov	r4,r2
 2005ce8:	200bb640 	call	200bb64 <__adddf3>
 2005cec:	8009883a 	mov	r4,r16
 2005cf0:	1029883a 	mov	r20,r2
 2005cf4:	1823883a 	mov	r17,r3
 2005cf8:	200e2200 	call	200e220 <__floatsidf>
 2005cfc:	019427f4 	movhi	r6,20639
 2005d00:	01cff4f4 	movhi	r7,16339
 2005d04:	319e7ec4 	addi	r6,r6,31227
 2005d08:	39d104c4 	addi	r7,r7,17427
 2005d0c:	1009883a 	mov	r4,r2
 2005d10:	180b883a 	mov	r5,r3
 2005d14:	200d0380 	call	200d038 <__muldf3>
 2005d18:	100d883a 	mov	r6,r2
 2005d1c:	180f883a 	mov	r7,r3
 2005d20:	a009883a 	mov	r4,r20
 2005d24:	880b883a 	mov	r5,r17
 2005d28:	200bb640 	call	200bb64 <__adddf3>
 2005d2c:	1009883a 	mov	r4,r2
 2005d30:	180b883a 	mov	r5,r3
 2005d34:	1029883a 	mov	r20,r2
 2005d38:	1823883a 	mov	r17,r3
 2005d3c:	200e1a00 	call	200e1a0 <__fixdfsi>
 2005d40:	000d883a 	mov	r6,zero
 2005d44:	000f883a 	mov	r7,zero
 2005d48:	a009883a 	mov	r4,r20
 2005d4c:	880b883a 	mov	r5,r17
 2005d50:	d8800515 	stw	r2,20(sp)
 2005d54:	200cf440 	call	200cf44 <__ledf2>
 2005d58:	10028716 	blt	r2,zero,2006778 <_dtoa_r+0xc88>
 2005d5c:	d8c00517 	ldw	r3,20(sp)
 2005d60:	00800584 	movi	r2,22
 2005d64:	10c27536 	bltu	r2,r3,200673c <_dtoa_r+0xc4c>
 2005d68:	180490fa 	slli	r2,r3,3
 2005d6c:	00c08074 	movhi	r3,513
 2005d70:	18c59404 	addi	r3,r3,5712
 2005d74:	1885883a 	add	r2,r3,r2
 2005d78:	11000017 	ldw	r4,0(r2)
 2005d7c:	11400117 	ldw	r5,4(r2)
 2005d80:	900d883a 	mov	r6,r18
 2005d84:	980f883a 	mov	r7,r19
 2005d88:	200ce680 	call	200ce68 <__gedf2>
 2005d8c:	00828d0e 	bge	zero,r2,20067c4 <_dtoa_r+0xcd4>
 2005d90:	d9000517 	ldw	r4,20(sp)
 2005d94:	d8000e15 	stw	zero,56(sp)
 2005d98:	213fffc4 	addi	r4,r4,-1
 2005d9c:	d9000515 	stw	r4,20(sp)
 2005da0:	b42dc83a 	sub	r22,r22,r16
 2005da4:	b5bfffc4 	addi	r22,r22,-1
 2005da8:	b0026f16 	blt	r22,zero,2006768 <_dtoa_r+0xc78>
 2005dac:	d8000815 	stw	zero,32(sp)
 2005db0:	d9c00517 	ldw	r7,20(sp)
 2005db4:	38026416 	blt	r7,zero,2006748 <_dtoa_r+0xc58>
 2005db8:	b1ed883a 	add	r22,r22,r7
 2005dbc:	d9c00d15 	stw	r7,52(sp)
 2005dc0:	d8000a15 	stw	zero,40(sp)
 2005dc4:	d9800317 	ldw	r6,12(sp)
 2005dc8:	00800244 	movi	r2,9
 2005dcc:	11811436 	bltu	r2,r6,2006220 <_dtoa_r+0x730>
 2005dd0:	00800144 	movi	r2,5
 2005dd4:	1184e10e 	bge	r2,r6,200715c <_dtoa_r+0x166c>
 2005dd8:	31bfff04 	addi	r6,r6,-4
 2005ddc:	d9800315 	stw	r6,12(sp)
 2005de0:	0023883a 	mov	r17,zero
 2005de4:	d9800317 	ldw	r6,12(sp)
 2005de8:	008000c4 	movi	r2,3
 2005dec:	30836726 	beq	r6,r2,2006b8c <_dtoa_r+0x109c>
 2005df0:	1183410e 	bge	r2,r6,2006af8 <_dtoa_r+0x1008>
 2005df4:	d9c00317 	ldw	r7,12(sp)
 2005df8:	00800104 	movi	r2,4
 2005dfc:	38827c26 	beq	r7,r2,20067f0 <_dtoa_r+0xd00>
 2005e00:	00800144 	movi	r2,5
 2005e04:	3884c41e 	bne	r7,r2,2007118 <_dtoa_r+0x1628>
 2005e08:	00800044 	movi	r2,1
 2005e0c:	d8800b15 	stw	r2,44(sp)
 2005e10:	d8c00517 	ldw	r3,20(sp)
 2005e14:	d9002217 	ldw	r4,136(sp)
 2005e18:	1907883a 	add	r3,r3,r4
 2005e1c:	19800044 	addi	r6,r3,1
 2005e20:	d8c00c15 	stw	r3,48(sp)
 2005e24:	d9800615 	stw	r6,24(sp)
 2005e28:	0183a40e 	bge	zero,r6,2006cbc <_dtoa_r+0x11cc>
 2005e2c:	d9800617 	ldw	r6,24(sp)
 2005e30:	3021883a 	mov	r16,r6
 2005e34:	e0001115 	stw	zero,68(fp)
 2005e38:	008005c4 	movi	r2,23
 2005e3c:	1184c92e 	bgeu	r2,r6,2007164 <_dtoa_r+0x1674>
 2005e40:	00c00044 	movi	r3,1
 2005e44:	00800104 	movi	r2,4
 2005e48:	1085883a 	add	r2,r2,r2
 2005e4c:	11000504 	addi	r4,r2,20
 2005e50:	180b883a 	mov	r5,r3
 2005e54:	18c00044 	addi	r3,r3,1
 2005e58:	313ffb2e 	bgeu	r6,r4,2005e48 <__alt_data_end+0xfe005e48>
 2005e5c:	e1401115 	stw	r5,68(fp)
 2005e60:	e009883a 	mov	r4,fp
 2005e64:	2007abc0 	call	2007abc <_Balloc>
 2005e68:	d8800715 	stw	r2,28(sp)
 2005e6c:	e0801015 	stw	r2,64(fp)
 2005e70:	00800384 	movi	r2,14
 2005e74:	1400f736 	bltu	r2,r16,2006254 <_dtoa_r+0x764>
 2005e78:	8800f626 	beq	r17,zero,2006254 <_dtoa_r+0x764>
 2005e7c:	d9c00517 	ldw	r7,20(sp)
 2005e80:	01c39a0e 	bge	zero,r7,2006cec <_dtoa_r+0x11fc>
 2005e84:	388003cc 	andi	r2,r7,15
 2005e88:	100490fa 	slli	r2,r2,3
 2005e8c:	382bd13a 	srai	r21,r7,4
 2005e90:	00c08074 	movhi	r3,513
 2005e94:	18c59404 	addi	r3,r3,5712
 2005e98:	1885883a 	add	r2,r3,r2
 2005e9c:	a8c0040c 	andi	r3,r21,16
 2005ea0:	12400017 	ldw	r9,0(r2)
 2005ea4:	12000117 	ldw	r8,4(r2)
 2005ea8:	18037926 	beq	r3,zero,2006c90 <_dtoa_r+0x11a0>
 2005eac:	00808074 	movhi	r2,513
 2005eb0:	10858a04 	addi	r2,r2,5672
 2005eb4:	11800817 	ldw	r6,32(r2)
 2005eb8:	11c00917 	ldw	r7,36(r2)
 2005ebc:	9009883a 	mov	r4,r18
 2005ec0:	980b883a 	mov	r5,r19
 2005ec4:	da001715 	stw	r8,92(sp)
 2005ec8:	da401615 	stw	r9,88(sp)
 2005ecc:	200c4100 	call	200c410 <__divdf3>
 2005ed0:	da001717 	ldw	r8,92(sp)
 2005ed4:	da401617 	ldw	r9,88(sp)
 2005ed8:	ad4003cc 	andi	r21,r21,15
 2005edc:	040000c4 	movi	r16,3
 2005ee0:	1023883a 	mov	r17,r2
 2005ee4:	1829883a 	mov	r20,r3
 2005ee8:	a8001126 	beq	r21,zero,2005f30 <_dtoa_r+0x440>
 2005eec:	05c08074 	movhi	r23,513
 2005ef0:	bdc58a04 	addi	r23,r23,5672
 2005ef4:	4805883a 	mov	r2,r9
 2005ef8:	4007883a 	mov	r3,r8
 2005efc:	a980004c 	andi	r6,r21,1
 2005f00:	1009883a 	mov	r4,r2
 2005f04:	a82bd07a 	srai	r21,r21,1
 2005f08:	180b883a 	mov	r5,r3
 2005f0c:	30000426 	beq	r6,zero,2005f20 <_dtoa_r+0x430>
 2005f10:	b9800017 	ldw	r6,0(r23)
 2005f14:	b9c00117 	ldw	r7,4(r23)
 2005f18:	84000044 	addi	r16,r16,1
 2005f1c:	200d0380 	call	200d038 <__muldf3>
 2005f20:	bdc00204 	addi	r23,r23,8
 2005f24:	a83ff51e 	bne	r21,zero,2005efc <__alt_data_end+0xfe005efc>
 2005f28:	1013883a 	mov	r9,r2
 2005f2c:	1811883a 	mov	r8,r3
 2005f30:	480d883a 	mov	r6,r9
 2005f34:	400f883a 	mov	r7,r8
 2005f38:	8809883a 	mov	r4,r17
 2005f3c:	a00b883a 	mov	r5,r20
 2005f40:	200c4100 	call	200c410 <__divdf3>
 2005f44:	d8800f15 	stw	r2,60(sp)
 2005f48:	d8c01015 	stw	r3,64(sp)
 2005f4c:	d8c00e17 	ldw	r3,56(sp)
 2005f50:	18000626 	beq	r3,zero,2005f6c <_dtoa_r+0x47c>
 2005f54:	d9000f17 	ldw	r4,60(sp)
 2005f58:	d9401017 	ldw	r5,64(sp)
 2005f5c:	000d883a 	mov	r6,zero
 2005f60:	01cffc34 	movhi	r7,16368
 2005f64:	200cf440 	call	200cf44 <__ledf2>
 2005f68:	10040b16 	blt	r2,zero,2006f98 <_dtoa_r+0x14a8>
 2005f6c:	8009883a 	mov	r4,r16
 2005f70:	200e2200 	call	200e220 <__floatsidf>
 2005f74:	d9800f17 	ldw	r6,60(sp)
 2005f78:	d9c01017 	ldw	r7,64(sp)
 2005f7c:	1009883a 	mov	r4,r2
 2005f80:	180b883a 	mov	r5,r3
 2005f84:	200d0380 	call	200d038 <__muldf3>
 2005f88:	000d883a 	mov	r6,zero
 2005f8c:	01d00734 	movhi	r7,16412
 2005f90:	1009883a 	mov	r4,r2
 2005f94:	180b883a 	mov	r5,r3
 2005f98:	200bb640 	call	200bb64 <__adddf3>
 2005f9c:	1021883a 	mov	r16,r2
 2005fa0:	d8800617 	ldw	r2,24(sp)
 2005fa4:	047f3034 	movhi	r17,64704
 2005fa8:	1c63883a 	add	r17,r3,r17
 2005fac:	10031826 	beq	r2,zero,2006c10 <_dtoa_r+0x1120>
 2005fb0:	d8c00517 	ldw	r3,20(sp)
 2005fb4:	db000617 	ldw	r12,24(sp)
 2005fb8:	d8c01315 	stw	r3,76(sp)
 2005fbc:	d9000b17 	ldw	r4,44(sp)
 2005fc0:	20038f26 	beq	r4,zero,2006e00 <_dtoa_r+0x1310>
 2005fc4:	60bfffc4 	addi	r2,r12,-1
 2005fc8:	100490fa 	slli	r2,r2,3
 2005fcc:	00c08074 	movhi	r3,513
 2005fd0:	18c59404 	addi	r3,r3,5712
 2005fd4:	1885883a 	add	r2,r3,r2
 2005fd8:	11800017 	ldw	r6,0(r2)
 2005fdc:	11c00117 	ldw	r7,4(r2)
 2005fe0:	d8800717 	ldw	r2,28(sp)
 2005fe4:	0009883a 	mov	r4,zero
 2005fe8:	014ff834 	movhi	r5,16352
 2005fec:	db001615 	stw	r12,88(sp)
 2005ff0:	15c00044 	addi	r23,r2,1
 2005ff4:	200c4100 	call	200c410 <__divdf3>
 2005ff8:	800d883a 	mov	r6,r16
 2005ffc:	880f883a 	mov	r7,r17
 2006000:	1009883a 	mov	r4,r2
 2006004:	180b883a 	mov	r5,r3
 2006008:	200d8a40 	call	200d8a4 <__subdf3>
 200600c:	d9401017 	ldw	r5,64(sp)
 2006010:	d9000f17 	ldw	r4,60(sp)
 2006014:	102b883a 	mov	r21,r2
 2006018:	d8c01215 	stw	r3,72(sp)
 200601c:	200e1a00 	call	200e1a0 <__fixdfsi>
 2006020:	1009883a 	mov	r4,r2
 2006024:	1029883a 	mov	r20,r2
 2006028:	200e2200 	call	200e220 <__floatsidf>
 200602c:	d9000f17 	ldw	r4,60(sp)
 2006030:	d9401017 	ldw	r5,64(sp)
 2006034:	100d883a 	mov	r6,r2
 2006038:	180f883a 	mov	r7,r3
 200603c:	200d8a40 	call	200d8a4 <__subdf3>
 2006040:	1823883a 	mov	r17,r3
 2006044:	d8c00717 	ldw	r3,28(sp)
 2006048:	d9401217 	ldw	r5,72(sp)
 200604c:	a2000c04 	addi	r8,r20,48
 2006050:	1021883a 	mov	r16,r2
 2006054:	1a000005 	stb	r8,0(r3)
 2006058:	800d883a 	mov	r6,r16
 200605c:	880f883a 	mov	r7,r17
 2006060:	a809883a 	mov	r4,r21
 2006064:	4029883a 	mov	r20,r8
 2006068:	200ce680 	call	200ce68 <__gedf2>
 200606c:	00841d16 	blt	zero,r2,20070e4 <_dtoa_r+0x15f4>
 2006070:	800d883a 	mov	r6,r16
 2006074:	880f883a 	mov	r7,r17
 2006078:	0009883a 	mov	r4,zero
 200607c:	014ffc34 	movhi	r5,16368
 2006080:	200d8a40 	call	200d8a4 <__subdf3>
 2006084:	d9401217 	ldw	r5,72(sp)
 2006088:	100d883a 	mov	r6,r2
 200608c:	180f883a 	mov	r7,r3
 2006090:	a809883a 	mov	r4,r21
 2006094:	200ce680 	call	200ce68 <__gedf2>
 2006098:	db001617 	ldw	r12,88(sp)
 200609c:	00840e16 	blt	zero,r2,20070d8 <_dtoa_r+0x15e8>
 20060a0:	00800044 	movi	r2,1
 20060a4:	13006b0e 	bge	r2,r12,2006254 <_dtoa_r+0x764>
 20060a8:	d9000717 	ldw	r4,28(sp)
 20060ac:	dd800f15 	stw	r22,60(sp)
 20060b0:	dcc01015 	stw	r19,64(sp)
 20060b4:	2319883a 	add	r12,r4,r12
 20060b8:	dcc01217 	ldw	r19,72(sp)
 20060bc:	602d883a 	mov	r22,r12
 20060c0:	dc801215 	stw	r18,72(sp)
 20060c4:	b825883a 	mov	r18,r23
 20060c8:	00000906 	br	20060f0 <_dtoa_r+0x600>
 20060cc:	200d8a40 	call	200d8a4 <__subdf3>
 20060d0:	a80d883a 	mov	r6,r21
 20060d4:	980f883a 	mov	r7,r19
 20060d8:	1009883a 	mov	r4,r2
 20060dc:	180b883a 	mov	r5,r3
 20060e0:	200cf440 	call	200cf44 <__ledf2>
 20060e4:	1003e816 	blt	r2,zero,2007088 <_dtoa_r+0x1598>
 20060e8:	b825883a 	mov	r18,r23
 20060ec:	bd83e926 	beq	r23,r22,2007094 <_dtoa_r+0x15a4>
 20060f0:	a809883a 	mov	r4,r21
 20060f4:	980b883a 	mov	r5,r19
 20060f8:	000d883a 	mov	r6,zero
 20060fc:	01d00934 	movhi	r7,16420
 2006100:	200d0380 	call	200d038 <__muldf3>
 2006104:	000d883a 	mov	r6,zero
 2006108:	01d00934 	movhi	r7,16420
 200610c:	8009883a 	mov	r4,r16
 2006110:	880b883a 	mov	r5,r17
 2006114:	102b883a 	mov	r21,r2
 2006118:	1827883a 	mov	r19,r3
 200611c:	200d0380 	call	200d038 <__muldf3>
 2006120:	180b883a 	mov	r5,r3
 2006124:	1009883a 	mov	r4,r2
 2006128:	1821883a 	mov	r16,r3
 200612c:	1023883a 	mov	r17,r2
 2006130:	200e1a00 	call	200e1a0 <__fixdfsi>
 2006134:	1009883a 	mov	r4,r2
 2006138:	1029883a 	mov	r20,r2
 200613c:	200e2200 	call	200e220 <__floatsidf>
 2006140:	8809883a 	mov	r4,r17
 2006144:	800b883a 	mov	r5,r16
 2006148:	100d883a 	mov	r6,r2
 200614c:	180f883a 	mov	r7,r3
 2006150:	200d8a40 	call	200d8a4 <__subdf3>
 2006154:	a5000c04 	addi	r20,r20,48
 2006158:	a80d883a 	mov	r6,r21
 200615c:	980f883a 	mov	r7,r19
 2006160:	1009883a 	mov	r4,r2
 2006164:	180b883a 	mov	r5,r3
 2006168:	95000005 	stb	r20,0(r18)
 200616c:	1021883a 	mov	r16,r2
 2006170:	1823883a 	mov	r17,r3
 2006174:	200cf440 	call	200cf44 <__ledf2>
 2006178:	bdc00044 	addi	r23,r23,1
 200617c:	800d883a 	mov	r6,r16
 2006180:	880f883a 	mov	r7,r17
 2006184:	0009883a 	mov	r4,zero
 2006188:	014ffc34 	movhi	r5,16368
 200618c:	103fcf0e 	bge	r2,zero,20060cc <__alt_data_end+0xfe0060cc>
 2006190:	d8c01317 	ldw	r3,76(sp)
 2006194:	d8c00515 	stw	r3,20(sp)
 2006198:	d9400917 	ldw	r5,36(sp)
 200619c:	e009883a 	mov	r4,fp
 20061a0:	2007b640 	call	2007b64 <_Bfree>
 20061a4:	d9000517 	ldw	r4,20(sp)
 20061a8:	d9802317 	ldw	r6,140(sp)
 20061ac:	d9c02517 	ldw	r7,148(sp)
 20061b0:	b8000005 	stb	zero,0(r23)
 20061b4:	20800044 	addi	r2,r4,1
 20061b8:	30800015 	stw	r2,0(r6)
 20061bc:	3802aa26 	beq	r7,zero,2006c68 <_dtoa_r+0x1178>
 20061c0:	3dc00015 	stw	r23,0(r7)
 20061c4:	d8800717 	ldw	r2,28(sp)
 20061c8:	003e7906 	br	2005bb0 <__alt_data_end+0xfe005bb0>
 20061cc:	00800434 	movhi	r2,16
 20061d0:	10bfffc4 	addi	r2,r2,-1
 20061d4:	88a2703a 	and	r17,r17,r2
 20061d8:	883e851e 	bne	r17,zero,2005bf0 <__alt_data_end+0xfe005bf0>
 20061dc:	00808074 	movhi	r2,513
 20061e0:	10857604 	addi	r2,r2,5592
 20061e4:	003e8406 	br	2005bf8 <__alt_data_end+0xfe005bf8>
 20061e8:	10c00204 	addi	r3,r2,8
 20061ec:	003e8706 	br	2005c0c <__alt_data_end+0xfe005c0c>
 20061f0:	01400434 	movhi	r5,16
 20061f4:	297fffc4 	addi	r5,r5,-1
 20061f8:	994a703a 	and	r5,r19,r5
 20061fc:	9009883a 	mov	r4,r18
 2006200:	843f0044 	addi	r16,r16,-1023
 2006204:	294ffc34 	orhi	r5,r5,16368
 2006208:	dd800217 	ldw	r22,8(sp)
 200620c:	d8001115 	stw	zero,68(sp)
 2006210:	003ea506 	br	2005ca8 <__alt_data_end+0xfe005ca8>
 2006214:	00808074 	movhi	r2,513
 2006218:	10856d04 	addi	r2,r2,5556
 200621c:	003e6406 	br	2005bb0 <__alt_data_end+0xfe005bb0>
 2006220:	e0001115 	stw	zero,68(fp)
 2006224:	000b883a 	mov	r5,zero
 2006228:	e009883a 	mov	r4,fp
 200622c:	2007abc0 	call	2007abc <_Balloc>
 2006230:	01bfffc4 	movi	r6,-1
 2006234:	01c00044 	movi	r7,1
 2006238:	d8800715 	stw	r2,28(sp)
 200623c:	d9800c15 	stw	r6,48(sp)
 2006240:	e0801015 	stw	r2,64(fp)
 2006244:	d8000315 	stw	zero,12(sp)
 2006248:	d9c00b15 	stw	r7,44(sp)
 200624c:	d9800615 	stw	r6,24(sp)
 2006250:	d8002215 	stw	zero,136(sp)
 2006254:	d8800117 	ldw	r2,4(sp)
 2006258:	10008916 	blt	r2,zero,2006480 <_dtoa_r+0x990>
 200625c:	d9000517 	ldw	r4,20(sp)
 2006260:	00c00384 	movi	r3,14
 2006264:	19008616 	blt	r3,r4,2006480 <_dtoa_r+0x990>
 2006268:	200490fa 	slli	r2,r4,3
 200626c:	00c08074 	movhi	r3,513
 2006270:	d9802217 	ldw	r6,136(sp)
 2006274:	18c59404 	addi	r3,r3,5712
 2006278:	1885883a 	add	r2,r3,r2
 200627c:	14000017 	ldw	r16,0(r2)
 2006280:	14400117 	ldw	r17,4(r2)
 2006284:	30016316 	blt	r6,zero,2006814 <_dtoa_r+0xd24>
 2006288:	800d883a 	mov	r6,r16
 200628c:	880f883a 	mov	r7,r17
 2006290:	9009883a 	mov	r4,r18
 2006294:	980b883a 	mov	r5,r19
 2006298:	200c4100 	call	200c410 <__divdf3>
 200629c:	180b883a 	mov	r5,r3
 20062a0:	1009883a 	mov	r4,r2
 20062a4:	200e1a00 	call	200e1a0 <__fixdfsi>
 20062a8:	1009883a 	mov	r4,r2
 20062ac:	102b883a 	mov	r21,r2
 20062b0:	200e2200 	call	200e220 <__floatsidf>
 20062b4:	800d883a 	mov	r6,r16
 20062b8:	880f883a 	mov	r7,r17
 20062bc:	1009883a 	mov	r4,r2
 20062c0:	180b883a 	mov	r5,r3
 20062c4:	200d0380 	call	200d038 <__muldf3>
 20062c8:	100d883a 	mov	r6,r2
 20062cc:	180f883a 	mov	r7,r3
 20062d0:	9009883a 	mov	r4,r18
 20062d4:	980b883a 	mov	r5,r19
 20062d8:	200d8a40 	call	200d8a4 <__subdf3>
 20062dc:	d9c00717 	ldw	r7,28(sp)
 20062e0:	1009883a 	mov	r4,r2
 20062e4:	a8800c04 	addi	r2,r21,48
 20062e8:	38800005 	stb	r2,0(r7)
 20062ec:	3dc00044 	addi	r23,r7,1
 20062f0:	d9c00617 	ldw	r7,24(sp)
 20062f4:	01800044 	movi	r6,1
 20062f8:	180b883a 	mov	r5,r3
 20062fc:	2005883a 	mov	r2,r4
 2006300:	39803826 	beq	r7,r6,20063e4 <_dtoa_r+0x8f4>
 2006304:	000d883a 	mov	r6,zero
 2006308:	01d00934 	movhi	r7,16420
 200630c:	200d0380 	call	200d038 <__muldf3>
 2006310:	000d883a 	mov	r6,zero
 2006314:	000f883a 	mov	r7,zero
 2006318:	1009883a 	mov	r4,r2
 200631c:	180b883a 	mov	r5,r3
 2006320:	1025883a 	mov	r18,r2
 2006324:	1827883a 	mov	r19,r3
 2006328:	200cde00 	call	200cde0 <__eqdf2>
 200632c:	103f9a26 	beq	r2,zero,2006198 <__alt_data_end+0xfe006198>
 2006330:	d9c00617 	ldw	r7,24(sp)
 2006334:	d8c00717 	ldw	r3,28(sp)
 2006338:	b829883a 	mov	r20,r23
 200633c:	38bfffc4 	addi	r2,r7,-1
 2006340:	18ad883a 	add	r22,r3,r2
 2006344:	00000a06 	br	2006370 <_dtoa_r+0x880>
 2006348:	200d0380 	call	200d038 <__muldf3>
 200634c:	000d883a 	mov	r6,zero
 2006350:	000f883a 	mov	r7,zero
 2006354:	1009883a 	mov	r4,r2
 2006358:	180b883a 	mov	r5,r3
 200635c:	1025883a 	mov	r18,r2
 2006360:	1827883a 	mov	r19,r3
 2006364:	b829883a 	mov	r20,r23
 2006368:	200cde00 	call	200cde0 <__eqdf2>
 200636c:	103f8a26 	beq	r2,zero,2006198 <__alt_data_end+0xfe006198>
 2006370:	800d883a 	mov	r6,r16
 2006374:	880f883a 	mov	r7,r17
 2006378:	9009883a 	mov	r4,r18
 200637c:	980b883a 	mov	r5,r19
 2006380:	200c4100 	call	200c410 <__divdf3>
 2006384:	180b883a 	mov	r5,r3
 2006388:	1009883a 	mov	r4,r2
 200638c:	200e1a00 	call	200e1a0 <__fixdfsi>
 2006390:	1009883a 	mov	r4,r2
 2006394:	102b883a 	mov	r21,r2
 2006398:	200e2200 	call	200e220 <__floatsidf>
 200639c:	800d883a 	mov	r6,r16
 20063a0:	880f883a 	mov	r7,r17
 20063a4:	1009883a 	mov	r4,r2
 20063a8:	180b883a 	mov	r5,r3
 20063ac:	200d0380 	call	200d038 <__muldf3>
 20063b0:	100d883a 	mov	r6,r2
 20063b4:	180f883a 	mov	r7,r3
 20063b8:	9009883a 	mov	r4,r18
 20063bc:	980b883a 	mov	r5,r19
 20063c0:	200d8a40 	call	200d8a4 <__subdf3>
 20063c4:	aa000c04 	addi	r8,r21,48
 20063c8:	a2000005 	stb	r8,0(r20)
 20063cc:	000d883a 	mov	r6,zero
 20063d0:	01d00934 	movhi	r7,16420
 20063d4:	1009883a 	mov	r4,r2
 20063d8:	180b883a 	mov	r5,r3
 20063dc:	a5c00044 	addi	r23,r20,1
 20063e0:	b53fd91e 	bne	r22,r20,2006348 <__alt_data_end+0xfe006348>
 20063e4:	100d883a 	mov	r6,r2
 20063e8:	180f883a 	mov	r7,r3
 20063ec:	1009883a 	mov	r4,r2
 20063f0:	180b883a 	mov	r5,r3
 20063f4:	200bb640 	call	200bb64 <__adddf3>
 20063f8:	100d883a 	mov	r6,r2
 20063fc:	180f883a 	mov	r7,r3
 2006400:	8009883a 	mov	r4,r16
 2006404:	880b883a 	mov	r5,r17
 2006408:	1027883a 	mov	r19,r2
 200640c:	1825883a 	mov	r18,r3
 2006410:	200cf440 	call	200cf44 <__ledf2>
 2006414:	10000816 	blt	r2,zero,2006438 <_dtoa_r+0x948>
 2006418:	980d883a 	mov	r6,r19
 200641c:	900f883a 	mov	r7,r18
 2006420:	8009883a 	mov	r4,r16
 2006424:	880b883a 	mov	r5,r17
 2006428:	200cde00 	call	200cde0 <__eqdf2>
 200642c:	103f5a1e 	bne	r2,zero,2006198 <__alt_data_end+0xfe006198>
 2006430:	ad40004c 	andi	r21,r21,1
 2006434:	a83f5826 	beq	r21,zero,2006198 <__alt_data_end+0xfe006198>
 2006438:	bd3fffc3 	ldbu	r20,-1(r23)
 200643c:	b8bfffc4 	addi	r2,r23,-1
 2006440:	1007883a 	mov	r3,r2
 2006444:	01400e44 	movi	r5,57
 2006448:	d9800717 	ldw	r6,28(sp)
 200644c:	00000506 	br	2006464 <_dtoa_r+0x974>
 2006450:	18ffffc4 	addi	r3,r3,-1
 2006454:	11824726 	beq	r2,r6,2006d74 <_dtoa_r+0x1284>
 2006458:	1d000003 	ldbu	r20,0(r3)
 200645c:	102f883a 	mov	r23,r2
 2006460:	10bfffc4 	addi	r2,r2,-1
 2006464:	a1003fcc 	andi	r4,r20,255
 2006468:	2100201c 	xori	r4,r4,128
 200646c:	213fe004 	addi	r4,r4,-128
 2006470:	217ff726 	beq	r4,r5,2006450 <__alt_data_end+0xfe006450>
 2006474:	a2000044 	addi	r8,r20,1
 2006478:	12000005 	stb	r8,0(r2)
 200647c:	003f4606 	br	2006198 <__alt_data_end+0xfe006198>
 2006480:	d9000b17 	ldw	r4,44(sp)
 2006484:	2000c826 	beq	r4,zero,20067a8 <_dtoa_r+0xcb8>
 2006488:	d9800317 	ldw	r6,12(sp)
 200648c:	00c00044 	movi	r3,1
 2006490:	1980f90e 	bge	r3,r6,2006878 <_dtoa_r+0xd88>
 2006494:	d8800617 	ldw	r2,24(sp)
 2006498:	d8c00a17 	ldw	r3,40(sp)
 200649c:	157fffc4 	addi	r21,r2,-1
 20064a0:	1d41f316 	blt	r3,r21,2006c70 <_dtoa_r+0x1180>
 20064a4:	1d6bc83a 	sub	r21,r3,r21
 20064a8:	d9c00617 	ldw	r7,24(sp)
 20064ac:	3802aa16 	blt	r7,zero,2006f58 <_dtoa_r+0x1468>
 20064b0:	dd000817 	ldw	r20,32(sp)
 20064b4:	d8800617 	ldw	r2,24(sp)
 20064b8:	d8c00817 	ldw	r3,32(sp)
 20064bc:	01400044 	movi	r5,1
 20064c0:	e009883a 	mov	r4,fp
 20064c4:	1887883a 	add	r3,r3,r2
 20064c8:	d8c00815 	stw	r3,32(sp)
 20064cc:	b0ad883a 	add	r22,r22,r2
 20064d0:	2007ef00 	call	2007ef0 <__i2b>
 20064d4:	1023883a 	mov	r17,r2
 20064d8:	a0000826 	beq	r20,zero,20064fc <_dtoa_r+0xa0c>
 20064dc:	0580070e 	bge	zero,r22,20064fc <_dtoa_r+0xa0c>
 20064e0:	a005883a 	mov	r2,r20
 20064e4:	b500b916 	blt	r22,r20,20067cc <_dtoa_r+0xcdc>
 20064e8:	d9000817 	ldw	r4,32(sp)
 20064ec:	a0a9c83a 	sub	r20,r20,r2
 20064f0:	b0adc83a 	sub	r22,r22,r2
 20064f4:	2089c83a 	sub	r4,r4,r2
 20064f8:	d9000815 	stw	r4,32(sp)
 20064fc:	d9800a17 	ldw	r6,40(sp)
 2006500:	0181810e 	bge	zero,r6,2006b08 <_dtoa_r+0x1018>
 2006504:	d9c00b17 	ldw	r7,44(sp)
 2006508:	3800b326 	beq	r7,zero,20067d8 <_dtoa_r+0xce8>
 200650c:	a800b226 	beq	r21,zero,20067d8 <_dtoa_r+0xce8>
 2006510:	880b883a 	mov	r5,r17
 2006514:	a80d883a 	mov	r6,r21
 2006518:	e009883a 	mov	r4,fp
 200651c:	20081b80 	call	20081b8 <__pow5mult>
 2006520:	d9800917 	ldw	r6,36(sp)
 2006524:	100b883a 	mov	r5,r2
 2006528:	e009883a 	mov	r4,fp
 200652c:	1023883a 	mov	r17,r2
 2006530:	2007f2c0 	call	2007f2c <__multiply>
 2006534:	1021883a 	mov	r16,r2
 2006538:	d8800a17 	ldw	r2,40(sp)
 200653c:	d9400917 	ldw	r5,36(sp)
 2006540:	e009883a 	mov	r4,fp
 2006544:	1545c83a 	sub	r2,r2,r21
 2006548:	d8800a15 	stw	r2,40(sp)
 200654c:	2007b640 	call	2007b64 <_Bfree>
 2006550:	d8c00a17 	ldw	r3,40(sp)
 2006554:	18009f1e 	bne	r3,zero,20067d4 <_dtoa_r+0xce4>
 2006558:	05c00044 	movi	r23,1
 200655c:	e009883a 	mov	r4,fp
 2006560:	b80b883a 	mov	r5,r23
 2006564:	2007ef00 	call	2007ef0 <__i2b>
 2006568:	d9000d17 	ldw	r4,52(sp)
 200656c:	102b883a 	mov	r21,r2
 2006570:	2000ce26 	beq	r4,zero,20068ac <_dtoa_r+0xdbc>
 2006574:	200d883a 	mov	r6,r4
 2006578:	100b883a 	mov	r5,r2
 200657c:	e009883a 	mov	r4,fp
 2006580:	20081b80 	call	20081b8 <__pow5mult>
 2006584:	d9800317 	ldw	r6,12(sp)
 2006588:	102b883a 	mov	r21,r2
 200658c:	b981810e 	bge	r23,r6,2006b94 <_dtoa_r+0x10a4>
 2006590:	0027883a 	mov	r19,zero
 2006594:	a8800417 	ldw	r2,16(r21)
 2006598:	05c00804 	movi	r23,32
 200659c:	10800104 	addi	r2,r2,4
 20065a0:	1085883a 	add	r2,r2,r2
 20065a4:	1085883a 	add	r2,r2,r2
 20065a8:	a885883a 	add	r2,r21,r2
 20065ac:	11000017 	ldw	r4,0(r2)
 20065b0:	2007dd80 	call	2007dd8 <__hi0bits>
 20065b4:	b885c83a 	sub	r2,r23,r2
 20065b8:	1585883a 	add	r2,r2,r22
 20065bc:	108007cc 	andi	r2,r2,31
 20065c0:	1000b326 	beq	r2,zero,2006890 <_dtoa_r+0xda0>
 20065c4:	00c00804 	movi	r3,32
 20065c8:	1887c83a 	sub	r3,r3,r2
 20065cc:	01000104 	movi	r4,4
 20065d0:	20c2cd0e 	bge	r4,r3,2007108 <_dtoa_r+0x1618>
 20065d4:	00c00704 	movi	r3,28
 20065d8:	1885c83a 	sub	r2,r3,r2
 20065dc:	d8c00817 	ldw	r3,32(sp)
 20065e0:	a0a9883a 	add	r20,r20,r2
 20065e4:	b0ad883a 	add	r22,r22,r2
 20065e8:	1887883a 	add	r3,r3,r2
 20065ec:	d8c00815 	stw	r3,32(sp)
 20065f0:	d9800817 	ldw	r6,32(sp)
 20065f4:	0180040e 	bge	zero,r6,2006608 <_dtoa_r+0xb18>
 20065f8:	800b883a 	mov	r5,r16
 20065fc:	e009883a 	mov	r4,fp
 2006600:	20082f80 	call	20082f8 <__lshift>
 2006604:	1021883a 	mov	r16,r2
 2006608:	0580050e 	bge	zero,r22,2006620 <_dtoa_r+0xb30>
 200660c:	a80b883a 	mov	r5,r21
 2006610:	b00d883a 	mov	r6,r22
 2006614:	e009883a 	mov	r4,fp
 2006618:	20082f80 	call	20082f8 <__lshift>
 200661c:	102b883a 	mov	r21,r2
 2006620:	d9c00e17 	ldw	r7,56(sp)
 2006624:	3801211e 	bne	r7,zero,2006aac <_dtoa_r+0xfbc>
 2006628:	d9800617 	ldw	r6,24(sp)
 200662c:	0181380e 	bge	zero,r6,2006b10 <_dtoa_r+0x1020>
 2006630:	d8c00b17 	ldw	r3,44(sp)
 2006634:	1800ab1e 	bne	r3,zero,20068e4 <_dtoa_r+0xdf4>
 2006638:	dc800717 	ldw	r18,28(sp)
 200663c:	dcc00617 	ldw	r19,24(sp)
 2006640:	9029883a 	mov	r20,r18
 2006644:	00000206 	br	2006650 <_dtoa_r+0xb60>
 2006648:	2007b8c0 	call	2007b8c <__multadd>
 200664c:	1021883a 	mov	r16,r2
 2006650:	a80b883a 	mov	r5,r21
 2006654:	8009883a 	mov	r4,r16
 2006658:	20058c80 	call	20058c8 <quorem>
 200665c:	10800c04 	addi	r2,r2,48
 2006660:	90800005 	stb	r2,0(r18)
 2006664:	94800044 	addi	r18,r18,1
 2006668:	9507c83a 	sub	r3,r18,r20
 200666c:	000f883a 	mov	r7,zero
 2006670:	01800284 	movi	r6,10
 2006674:	800b883a 	mov	r5,r16
 2006678:	e009883a 	mov	r4,fp
 200667c:	1cfff216 	blt	r3,r19,2006648 <__alt_data_end+0xfe006648>
 2006680:	1011883a 	mov	r8,r2
 2006684:	d8800617 	ldw	r2,24(sp)
 2006688:	0082370e 	bge	zero,r2,2006f68 <_dtoa_r+0x1478>
 200668c:	d9000717 	ldw	r4,28(sp)
 2006690:	0025883a 	mov	r18,zero
 2006694:	20af883a 	add	r23,r4,r2
 2006698:	01800044 	movi	r6,1
 200669c:	800b883a 	mov	r5,r16
 20066a0:	e009883a 	mov	r4,fp
 20066a4:	da001715 	stw	r8,92(sp)
 20066a8:	20082f80 	call	20082f8 <__lshift>
 20066ac:	a80b883a 	mov	r5,r21
 20066b0:	1009883a 	mov	r4,r2
 20066b4:	d8800915 	stw	r2,36(sp)
 20066b8:	20084400 	call	2008440 <__mcmp>
 20066bc:	da001717 	ldw	r8,92(sp)
 20066c0:	0081800e 	bge	zero,r2,2006cc4 <_dtoa_r+0x11d4>
 20066c4:	b93fffc3 	ldbu	r4,-1(r23)
 20066c8:	b8bfffc4 	addi	r2,r23,-1
 20066cc:	1007883a 	mov	r3,r2
 20066d0:	01800e44 	movi	r6,57
 20066d4:	d9c00717 	ldw	r7,28(sp)
 20066d8:	00000506 	br	20066f0 <_dtoa_r+0xc00>
 20066dc:	18ffffc4 	addi	r3,r3,-1
 20066e0:	11c12326 	beq	r2,r7,2006b70 <_dtoa_r+0x1080>
 20066e4:	19000003 	ldbu	r4,0(r3)
 20066e8:	102f883a 	mov	r23,r2
 20066ec:	10bfffc4 	addi	r2,r2,-1
 20066f0:	21403fcc 	andi	r5,r4,255
 20066f4:	2940201c 	xori	r5,r5,128
 20066f8:	297fe004 	addi	r5,r5,-128
 20066fc:	29bff726 	beq	r5,r6,20066dc <__alt_data_end+0xfe0066dc>
 2006700:	21000044 	addi	r4,r4,1
 2006704:	11000005 	stb	r4,0(r2)
 2006708:	a80b883a 	mov	r5,r21
 200670c:	e009883a 	mov	r4,fp
 2006710:	2007b640 	call	2007b64 <_Bfree>
 2006714:	883ea026 	beq	r17,zero,2006198 <__alt_data_end+0xfe006198>
 2006718:	90000426 	beq	r18,zero,200672c <_dtoa_r+0xc3c>
 200671c:	94400326 	beq	r18,r17,200672c <_dtoa_r+0xc3c>
 2006720:	900b883a 	mov	r5,r18
 2006724:	e009883a 	mov	r4,fp
 2006728:	2007b640 	call	2007b64 <_Bfree>
 200672c:	880b883a 	mov	r5,r17
 2006730:	e009883a 	mov	r4,fp
 2006734:	2007b640 	call	2007b64 <_Bfree>
 2006738:	003e9706 	br	2006198 <__alt_data_end+0xfe006198>
 200673c:	01800044 	movi	r6,1
 2006740:	d9800e15 	stw	r6,56(sp)
 2006744:	003d9606 	br	2005da0 <__alt_data_end+0xfe005da0>
 2006748:	d8800817 	ldw	r2,32(sp)
 200674c:	d8c00517 	ldw	r3,20(sp)
 2006750:	d8000d15 	stw	zero,52(sp)
 2006754:	10c5c83a 	sub	r2,r2,r3
 2006758:	00c9c83a 	sub	r4,zero,r3
 200675c:	d8800815 	stw	r2,32(sp)
 2006760:	d9000a15 	stw	r4,40(sp)
 2006764:	003d9706 	br	2005dc4 <__alt_data_end+0xfe005dc4>
 2006768:	05adc83a 	sub	r22,zero,r22
 200676c:	dd800815 	stw	r22,32(sp)
 2006770:	002d883a 	mov	r22,zero
 2006774:	003d8e06 	br	2005db0 <__alt_data_end+0xfe005db0>
 2006778:	d9000517 	ldw	r4,20(sp)
 200677c:	200e2200 	call	200e220 <__floatsidf>
 2006780:	100d883a 	mov	r6,r2
 2006784:	180f883a 	mov	r7,r3
 2006788:	a009883a 	mov	r4,r20
 200678c:	880b883a 	mov	r5,r17
 2006790:	200cde00 	call	200cde0 <__eqdf2>
 2006794:	103d7126 	beq	r2,zero,2005d5c <__alt_data_end+0xfe005d5c>
 2006798:	d9c00517 	ldw	r7,20(sp)
 200679c:	39ffffc4 	addi	r7,r7,-1
 20067a0:	d9c00515 	stw	r7,20(sp)
 20067a4:	003d6d06 	br	2005d5c <__alt_data_end+0xfe005d5c>
 20067a8:	dd400a17 	ldw	r21,40(sp)
 20067ac:	dd000817 	ldw	r20,32(sp)
 20067b0:	0023883a 	mov	r17,zero
 20067b4:	003f4806 	br	20064d8 <__alt_data_end+0xfe0064d8>
 20067b8:	10e3c83a 	sub	r17,r2,r3
 20067bc:	9448983a 	sll	r4,r18,r17
 20067c0:	003d3206 	br	2005c8c <__alt_data_end+0xfe005c8c>
 20067c4:	d8000e15 	stw	zero,56(sp)
 20067c8:	003d7506 	br	2005da0 <__alt_data_end+0xfe005da0>
 20067cc:	b005883a 	mov	r2,r22
 20067d0:	003f4506 	br	20064e8 <__alt_data_end+0xfe0064e8>
 20067d4:	dc000915 	stw	r16,36(sp)
 20067d8:	d9800a17 	ldw	r6,40(sp)
 20067dc:	d9400917 	ldw	r5,36(sp)
 20067e0:	e009883a 	mov	r4,fp
 20067e4:	20081b80 	call	20081b8 <__pow5mult>
 20067e8:	1021883a 	mov	r16,r2
 20067ec:	003f5a06 	br	2006558 <__alt_data_end+0xfe006558>
 20067f0:	01c00044 	movi	r7,1
 20067f4:	d9c00b15 	stw	r7,44(sp)
 20067f8:	d8802217 	ldw	r2,136(sp)
 20067fc:	0081280e 	bge	zero,r2,2006ca0 <_dtoa_r+0x11b0>
 2006800:	100d883a 	mov	r6,r2
 2006804:	1021883a 	mov	r16,r2
 2006808:	d8800c15 	stw	r2,48(sp)
 200680c:	d8800615 	stw	r2,24(sp)
 2006810:	003d8806 	br	2005e34 <__alt_data_end+0xfe005e34>
 2006814:	d8800617 	ldw	r2,24(sp)
 2006818:	00be9b16 	blt	zero,r2,2006288 <__alt_data_end+0xfe006288>
 200681c:	10010f1e 	bne	r2,zero,2006c5c <_dtoa_r+0x116c>
 2006820:	880b883a 	mov	r5,r17
 2006824:	000d883a 	mov	r6,zero
 2006828:	01d00534 	movhi	r7,16404
 200682c:	8009883a 	mov	r4,r16
 2006830:	200d0380 	call	200d038 <__muldf3>
 2006834:	900d883a 	mov	r6,r18
 2006838:	980f883a 	mov	r7,r19
 200683c:	1009883a 	mov	r4,r2
 2006840:	180b883a 	mov	r5,r3
 2006844:	200ce680 	call	200ce68 <__gedf2>
 2006848:	002b883a 	mov	r21,zero
 200684c:	0023883a 	mov	r17,zero
 2006850:	1000bf16 	blt	r2,zero,2006b50 <_dtoa_r+0x1060>
 2006854:	d9802217 	ldw	r6,136(sp)
 2006858:	ddc00717 	ldw	r23,28(sp)
 200685c:	018c303a 	nor	r6,zero,r6
 2006860:	d9800515 	stw	r6,20(sp)
 2006864:	a80b883a 	mov	r5,r21
 2006868:	e009883a 	mov	r4,fp
 200686c:	2007b640 	call	2007b64 <_Bfree>
 2006870:	883e4926 	beq	r17,zero,2006198 <__alt_data_end+0xfe006198>
 2006874:	003fad06 	br	200672c <__alt_data_end+0xfe00672c>
 2006878:	d9c01117 	ldw	r7,68(sp)
 200687c:	3801bc26 	beq	r7,zero,2006f70 <_dtoa_r+0x1480>
 2006880:	10810cc4 	addi	r2,r2,1075
 2006884:	dd400a17 	ldw	r21,40(sp)
 2006888:	dd000817 	ldw	r20,32(sp)
 200688c:	003f0a06 	br	20064b8 <__alt_data_end+0xfe0064b8>
 2006890:	00800704 	movi	r2,28
 2006894:	d9000817 	ldw	r4,32(sp)
 2006898:	a0a9883a 	add	r20,r20,r2
 200689c:	b0ad883a 	add	r22,r22,r2
 20068a0:	2089883a 	add	r4,r4,r2
 20068a4:	d9000815 	stw	r4,32(sp)
 20068a8:	003f5106 	br	20065f0 <__alt_data_end+0xfe0065f0>
 20068ac:	d8c00317 	ldw	r3,12(sp)
 20068b0:	b8c1fc0e 	bge	r23,r3,20070a4 <_dtoa_r+0x15b4>
 20068b4:	0027883a 	mov	r19,zero
 20068b8:	b805883a 	mov	r2,r23
 20068bc:	003f3e06 	br	20065b8 <__alt_data_end+0xfe0065b8>
 20068c0:	880b883a 	mov	r5,r17
 20068c4:	e009883a 	mov	r4,fp
 20068c8:	000f883a 	mov	r7,zero
 20068cc:	01800284 	movi	r6,10
 20068d0:	2007b8c0 	call	2007b8c <__multadd>
 20068d4:	d9000c17 	ldw	r4,48(sp)
 20068d8:	1023883a 	mov	r17,r2
 20068dc:	0102040e 	bge	zero,r4,20070f0 <_dtoa_r+0x1600>
 20068e0:	d9000615 	stw	r4,24(sp)
 20068e4:	0500050e 	bge	zero,r20,20068fc <_dtoa_r+0xe0c>
 20068e8:	880b883a 	mov	r5,r17
 20068ec:	a00d883a 	mov	r6,r20
 20068f0:	e009883a 	mov	r4,fp
 20068f4:	20082f80 	call	20082f8 <__lshift>
 20068f8:	1023883a 	mov	r17,r2
 20068fc:	9801241e 	bne	r19,zero,2006d90 <_dtoa_r+0x12a0>
 2006900:	8829883a 	mov	r20,r17
 2006904:	d9000617 	ldw	r4,24(sp)
 2006908:	dcc00717 	ldw	r19,28(sp)
 200690c:	9480004c 	andi	r18,r18,1
 2006910:	20bfffc4 	addi	r2,r4,-1
 2006914:	9885883a 	add	r2,r19,r2
 2006918:	d8800415 	stw	r2,16(sp)
 200691c:	dc800615 	stw	r18,24(sp)
 2006920:	a80b883a 	mov	r5,r21
 2006924:	8009883a 	mov	r4,r16
 2006928:	20058c80 	call	20058c8 <quorem>
 200692c:	880b883a 	mov	r5,r17
 2006930:	8009883a 	mov	r4,r16
 2006934:	102f883a 	mov	r23,r2
 2006938:	20084400 	call	2008440 <__mcmp>
 200693c:	a80b883a 	mov	r5,r21
 2006940:	a00d883a 	mov	r6,r20
 2006944:	e009883a 	mov	r4,fp
 2006948:	102d883a 	mov	r22,r2
 200694c:	20084a00 	call	20084a0 <__mdiff>
 2006950:	1007883a 	mov	r3,r2
 2006954:	10800317 	ldw	r2,12(r2)
 2006958:	bc800c04 	addi	r18,r23,48
 200695c:	180b883a 	mov	r5,r3
 2006960:	10004e1e 	bne	r2,zero,2006a9c <_dtoa_r+0xfac>
 2006964:	8009883a 	mov	r4,r16
 2006968:	d8c01615 	stw	r3,88(sp)
 200696c:	20084400 	call	2008440 <__mcmp>
 2006970:	d8c01617 	ldw	r3,88(sp)
 2006974:	e009883a 	mov	r4,fp
 2006978:	d8801615 	stw	r2,88(sp)
 200697c:	180b883a 	mov	r5,r3
 2006980:	2007b640 	call	2007b64 <_Bfree>
 2006984:	d8801617 	ldw	r2,88(sp)
 2006988:	1000041e 	bne	r2,zero,200699c <_dtoa_r+0xeac>
 200698c:	d9800317 	ldw	r6,12(sp)
 2006990:	3000021e 	bne	r6,zero,200699c <_dtoa_r+0xeac>
 2006994:	d8c00617 	ldw	r3,24(sp)
 2006998:	18003726 	beq	r3,zero,2006a78 <_dtoa_r+0xf88>
 200699c:	b0002016 	blt	r22,zero,2006a20 <_dtoa_r+0xf30>
 20069a0:	b000041e 	bne	r22,zero,20069b4 <_dtoa_r+0xec4>
 20069a4:	d9000317 	ldw	r4,12(sp)
 20069a8:	2000021e 	bne	r4,zero,20069b4 <_dtoa_r+0xec4>
 20069ac:	d8c00617 	ldw	r3,24(sp)
 20069b0:	18001b26 	beq	r3,zero,2006a20 <_dtoa_r+0xf30>
 20069b4:	00810716 	blt	zero,r2,2006dd4 <_dtoa_r+0x12e4>
 20069b8:	d8c00417 	ldw	r3,16(sp)
 20069bc:	9d800044 	addi	r22,r19,1
 20069c0:	9c800005 	stb	r18,0(r19)
 20069c4:	b02f883a 	mov	r23,r22
 20069c8:	98c10626 	beq	r19,r3,2006de4 <_dtoa_r+0x12f4>
 20069cc:	800b883a 	mov	r5,r16
 20069d0:	000f883a 	mov	r7,zero
 20069d4:	01800284 	movi	r6,10
 20069d8:	e009883a 	mov	r4,fp
 20069dc:	2007b8c0 	call	2007b8c <__multadd>
 20069e0:	1021883a 	mov	r16,r2
 20069e4:	000f883a 	mov	r7,zero
 20069e8:	01800284 	movi	r6,10
 20069ec:	880b883a 	mov	r5,r17
 20069f0:	e009883a 	mov	r4,fp
 20069f4:	8d002526 	beq	r17,r20,2006a8c <_dtoa_r+0xf9c>
 20069f8:	2007b8c0 	call	2007b8c <__multadd>
 20069fc:	a00b883a 	mov	r5,r20
 2006a00:	000f883a 	mov	r7,zero
 2006a04:	01800284 	movi	r6,10
 2006a08:	e009883a 	mov	r4,fp
 2006a0c:	1023883a 	mov	r17,r2
 2006a10:	2007b8c0 	call	2007b8c <__multadd>
 2006a14:	1029883a 	mov	r20,r2
 2006a18:	b027883a 	mov	r19,r22
 2006a1c:	003fc006 	br	2006920 <__alt_data_end+0xfe006920>
 2006a20:	9011883a 	mov	r8,r18
 2006a24:	00800e0e 	bge	zero,r2,2006a60 <_dtoa_r+0xf70>
 2006a28:	800b883a 	mov	r5,r16
 2006a2c:	01800044 	movi	r6,1
 2006a30:	e009883a 	mov	r4,fp
 2006a34:	da001715 	stw	r8,92(sp)
 2006a38:	20082f80 	call	20082f8 <__lshift>
 2006a3c:	a80b883a 	mov	r5,r21
 2006a40:	1009883a 	mov	r4,r2
 2006a44:	1021883a 	mov	r16,r2
 2006a48:	20084400 	call	2008440 <__mcmp>
 2006a4c:	da001717 	ldw	r8,92(sp)
 2006a50:	0081960e 	bge	zero,r2,20070ac <_dtoa_r+0x15bc>
 2006a54:	00800e44 	movi	r2,57
 2006a58:	40817026 	beq	r8,r2,200701c <_dtoa_r+0x152c>
 2006a5c:	ba000c44 	addi	r8,r23,49
 2006a60:	8825883a 	mov	r18,r17
 2006a64:	9dc00044 	addi	r23,r19,1
 2006a68:	9a000005 	stb	r8,0(r19)
 2006a6c:	a023883a 	mov	r17,r20
 2006a70:	dc000915 	stw	r16,36(sp)
 2006a74:	003f2406 	br	2006708 <__alt_data_end+0xfe006708>
 2006a78:	00800e44 	movi	r2,57
 2006a7c:	9011883a 	mov	r8,r18
 2006a80:	90816626 	beq	r18,r2,200701c <_dtoa_r+0x152c>
 2006a84:	05bff516 	blt	zero,r22,2006a5c <__alt_data_end+0xfe006a5c>
 2006a88:	003ff506 	br	2006a60 <__alt_data_end+0xfe006a60>
 2006a8c:	2007b8c0 	call	2007b8c <__multadd>
 2006a90:	1023883a 	mov	r17,r2
 2006a94:	1029883a 	mov	r20,r2
 2006a98:	003fdf06 	br	2006a18 <__alt_data_end+0xfe006a18>
 2006a9c:	e009883a 	mov	r4,fp
 2006aa0:	2007b640 	call	2007b64 <_Bfree>
 2006aa4:	00800044 	movi	r2,1
 2006aa8:	003fbc06 	br	200699c <__alt_data_end+0xfe00699c>
 2006aac:	a80b883a 	mov	r5,r21
 2006ab0:	8009883a 	mov	r4,r16
 2006ab4:	20084400 	call	2008440 <__mcmp>
 2006ab8:	103edb0e 	bge	r2,zero,2006628 <__alt_data_end+0xfe006628>
 2006abc:	800b883a 	mov	r5,r16
 2006ac0:	000f883a 	mov	r7,zero
 2006ac4:	01800284 	movi	r6,10
 2006ac8:	e009883a 	mov	r4,fp
 2006acc:	2007b8c0 	call	2007b8c <__multadd>
 2006ad0:	1021883a 	mov	r16,r2
 2006ad4:	d8800517 	ldw	r2,20(sp)
 2006ad8:	d8c00b17 	ldw	r3,44(sp)
 2006adc:	10bfffc4 	addi	r2,r2,-1
 2006ae0:	d8800515 	stw	r2,20(sp)
 2006ae4:	183f761e 	bne	r3,zero,20068c0 <__alt_data_end+0xfe0068c0>
 2006ae8:	d9000c17 	ldw	r4,48(sp)
 2006aec:	0101730e 	bge	zero,r4,20070bc <_dtoa_r+0x15cc>
 2006af0:	d9000615 	stw	r4,24(sp)
 2006af4:	003ed006 	br	2006638 <__alt_data_end+0xfe006638>
 2006af8:	00800084 	movi	r2,2
 2006afc:	3081861e 	bne	r6,r2,2007118 <_dtoa_r+0x1628>
 2006b00:	d8000b15 	stw	zero,44(sp)
 2006b04:	003f3c06 	br	20067f8 <__alt_data_end+0xfe0067f8>
 2006b08:	dc000917 	ldw	r16,36(sp)
 2006b0c:	003e9206 	br	2006558 <__alt_data_end+0xfe006558>
 2006b10:	d9c00317 	ldw	r7,12(sp)
 2006b14:	00800084 	movi	r2,2
 2006b18:	11fec50e 	bge	r2,r7,2006630 <__alt_data_end+0xfe006630>
 2006b1c:	d9000617 	ldw	r4,24(sp)
 2006b20:	20013c1e 	bne	r4,zero,2007014 <_dtoa_r+0x1524>
 2006b24:	a80b883a 	mov	r5,r21
 2006b28:	000f883a 	mov	r7,zero
 2006b2c:	01800144 	movi	r6,5
 2006b30:	e009883a 	mov	r4,fp
 2006b34:	2007b8c0 	call	2007b8c <__multadd>
 2006b38:	100b883a 	mov	r5,r2
 2006b3c:	8009883a 	mov	r4,r16
 2006b40:	102b883a 	mov	r21,r2
 2006b44:	20084400 	call	2008440 <__mcmp>
 2006b48:	dc000915 	stw	r16,36(sp)
 2006b4c:	00bf410e 	bge	zero,r2,2006854 <__alt_data_end+0xfe006854>
 2006b50:	d9c00717 	ldw	r7,28(sp)
 2006b54:	00800c44 	movi	r2,49
 2006b58:	38800005 	stb	r2,0(r7)
 2006b5c:	d8800517 	ldw	r2,20(sp)
 2006b60:	3dc00044 	addi	r23,r7,1
 2006b64:	10800044 	addi	r2,r2,1
 2006b68:	d8800515 	stw	r2,20(sp)
 2006b6c:	003f3d06 	br	2006864 <__alt_data_end+0xfe006864>
 2006b70:	d9800517 	ldw	r6,20(sp)
 2006b74:	d9c00717 	ldw	r7,28(sp)
 2006b78:	00800c44 	movi	r2,49
 2006b7c:	31800044 	addi	r6,r6,1
 2006b80:	d9800515 	stw	r6,20(sp)
 2006b84:	38800005 	stb	r2,0(r7)
 2006b88:	003edf06 	br	2006708 <__alt_data_end+0xfe006708>
 2006b8c:	d8000b15 	stw	zero,44(sp)
 2006b90:	003c9f06 	br	2005e10 <__alt_data_end+0xfe005e10>
 2006b94:	903e7e1e 	bne	r18,zero,2006590 <__alt_data_end+0xfe006590>
 2006b98:	00800434 	movhi	r2,16
 2006b9c:	10bfffc4 	addi	r2,r2,-1
 2006ba0:	9884703a 	and	r2,r19,r2
 2006ba4:	1000ea1e 	bne	r2,zero,2006f50 <_dtoa_r+0x1460>
 2006ba8:	9cdffc2c 	andhi	r19,r19,32752
 2006bac:	9800e826 	beq	r19,zero,2006f50 <_dtoa_r+0x1460>
 2006bb0:	d9c00817 	ldw	r7,32(sp)
 2006bb4:	b5800044 	addi	r22,r22,1
 2006bb8:	04c00044 	movi	r19,1
 2006bbc:	39c00044 	addi	r7,r7,1
 2006bc0:	d9c00815 	stw	r7,32(sp)
 2006bc4:	d8800d17 	ldw	r2,52(sp)
 2006bc8:	103e721e 	bne	r2,zero,2006594 <__alt_data_end+0xfe006594>
 2006bcc:	00800044 	movi	r2,1
 2006bd0:	003e7906 	br	20065b8 <__alt_data_end+0xfe0065b8>
 2006bd4:	8009883a 	mov	r4,r16
 2006bd8:	200e2200 	call	200e220 <__floatsidf>
 2006bdc:	d9800f17 	ldw	r6,60(sp)
 2006be0:	d9c01017 	ldw	r7,64(sp)
 2006be4:	1009883a 	mov	r4,r2
 2006be8:	180b883a 	mov	r5,r3
 2006bec:	200d0380 	call	200d038 <__muldf3>
 2006bf0:	000d883a 	mov	r6,zero
 2006bf4:	01d00734 	movhi	r7,16412
 2006bf8:	1009883a 	mov	r4,r2
 2006bfc:	180b883a 	mov	r5,r3
 2006c00:	200bb640 	call	200bb64 <__adddf3>
 2006c04:	047f3034 	movhi	r17,64704
 2006c08:	1021883a 	mov	r16,r2
 2006c0c:	1c63883a 	add	r17,r3,r17
 2006c10:	d9000f17 	ldw	r4,60(sp)
 2006c14:	d9401017 	ldw	r5,64(sp)
 2006c18:	000d883a 	mov	r6,zero
 2006c1c:	01d00534 	movhi	r7,16404
 2006c20:	200d8a40 	call	200d8a4 <__subdf3>
 2006c24:	800d883a 	mov	r6,r16
 2006c28:	880f883a 	mov	r7,r17
 2006c2c:	1009883a 	mov	r4,r2
 2006c30:	180b883a 	mov	r5,r3
 2006c34:	102b883a 	mov	r21,r2
 2006c38:	1829883a 	mov	r20,r3
 2006c3c:	200ce680 	call	200ce68 <__gedf2>
 2006c40:	00806c16 	blt	zero,r2,2006df4 <_dtoa_r+0x1304>
 2006c44:	89e0003c 	xorhi	r7,r17,32768
 2006c48:	800d883a 	mov	r6,r16
 2006c4c:	a809883a 	mov	r4,r21
 2006c50:	a00b883a 	mov	r5,r20
 2006c54:	200cf440 	call	200cf44 <__ledf2>
 2006c58:	103d7e0e 	bge	r2,zero,2006254 <__alt_data_end+0xfe006254>
 2006c5c:	002b883a 	mov	r21,zero
 2006c60:	0023883a 	mov	r17,zero
 2006c64:	003efb06 	br	2006854 <__alt_data_end+0xfe006854>
 2006c68:	d8800717 	ldw	r2,28(sp)
 2006c6c:	003bd006 	br	2005bb0 <__alt_data_end+0xfe005bb0>
 2006c70:	d9000a17 	ldw	r4,40(sp)
 2006c74:	d9800d17 	ldw	r6,52(sp)
 2006c78:	dd400a15 	stw	r21,40(sp)
 2006c7c:	a905c83a 	sub	r2,r21,r4
 2006c80:	308d883a 	add	r6,r6,r2
 2006c84:	d9800d15 	stw	r6,52(sp)
 2006c88:	002b883a 	mov	r21,zero
 2006c8c:	003e0606 	br	20064a8 <__alt_data_end+0xfe0064a8>
 2006c90:	9023883a 	mov	r17,r18
 2006c94:	9829883a 	mov	r20,r19
 2006c98:	04000084 	movi	r16,2
 2006c9c:	003c9206 	br	2005ee8 <__alt_data_end+0xfe005ee8>
 2006ca0:	04000044 	movi	r16,1
 2006ca4:	dc000c15 	stw	r16,48(sp)
 2006ca8:	dc000615 	stw	r16,24(sp)
 2006cac:	dc002215 	stw	r16,136(sp)
 2006cb0:	e0001115 	stw	zero,68(fp)
 2006cb4:	000b883a 	mov	r5,zero
 2006cb8:	003c6906 	br	2005e60 <__alt_data_end+0xfe005e60>
 2006cbc:	3021883a 	mov	r16,r6
 2006cc0:	003ffb06 	br	2006cb0 <__alt_data_end+0xfe006cb0>
 2006cc4:	1000021e 	bne	r2,zero,2006cd0 <_dtoa_r+0x11e0>
 2006cc8:	4200004c 	andi	r8,r8,1
 2006ccc:	403e7d1e 	bne	r8,zero,20066c4 <__alt_data_end+0xfe0066c4>
 2006cd0:	01000c04 	movi	r4,48
 2006cd4:	00000106 	br	2006cdc <_dtoa_r+0x11ec>
 2006cd8:	102f883a 	mov	r23,r2
 2006cdc:	b8bfffc4 	addi	r2,r23,-1
 2006ce0:	10c00007 	ldb	r3,0(r2)
 2006ce4:	193ffc26 	beq	r3,r4,2006cd8 <__alt_data_end+0xfe006cd8>
 2006ce8:	003e8706 	br	2006708 <__alt_data_end+0xfe006708>
 2006cec:	d8800517 	ldw	r2,20(sp)
 2006cf0:	00a3c83a 	sub	r17,zero,r2
 2006cf4:	8800a426 	beq	r17,zero,2006f88 <_dtoa_r+0x1498>
 2006cf8:	888003cc 	andi	r2,r17,15
 2006cfc:	100490fa 	slli	r2,r2,3
 2006d00:	00c08074 	movhi	r3,513
 2006d04:	18c59404 	addi	r3,r3,5712
 2006d08:	1885883a 	add	r2,r3,r2
 2006d0c:	11800017 	ldw	r6,0(r2)
 2006d10:	11c00117 	ldw	r7,4(r2)
 2006d14:	9009883a 	mov	r4,r18
 2006d18:	980b883a 	mov	r5,r19
 2006d1c:	8823d13a 	srai	r17,r17,4
 2006d20:	200d0380 	call	200d038 <__muldf3>
 2006d24:	d8800f15 	stw	r2,60(sp)
 2006d28:	d8c01015 	stw	r3,64(sp)
 2006d2c:	8800e826 	beq	r17,zero,20070d0 <_dtoa_r+0x15e0>
 2006d30:	05008074 	movhi	r20,513
 2006d34:	a5058a04 	addi	r20,r20,5672
 2006d38:	04000084 	movi	r16,2
 2006d3c:	8980004c 	andi	r6,r17,1
 2006d40:	1009883a 	mov	r4,r2
 2006d44:	8823d07a 	srai	r17,r17,1
 2006d48:	180b883a 	mov	r5,r3
 2006d4c:	30000426 	beq	r6,zero,2006d60 <_dtoa_r+0x1270>
 2006d50:	a1800017 	ldw	r6,0(r20)
 2006d54:	a1c00117 	ldw	r7,4(r20)
 2006d58:	84000044 	addi	r16,r16,1
 2006d5c:	200d0380 	call	200d038 <__muldf3>
 2006d60:	a5000204 	addi	r20,r20,8
 2006d64:	883ff51e 	bne	r17,zero,2006d3c <__alt_data_end+0xfe006d3c>
 2006d68:	d8800f15 	stw	r2,60(sp)
 2006d6c:	d8c01015 	stw	r3,64(sp)
 2006d70:	003c7606 	br	2005f4c <__alt_data_end+0xfe005f4c>
 2006d74:	00c00c04 	movi	r3,48
 2006d78:	10c00005 	stb	r3,0(r2)
 2006d7c:	d8c00517 	ldw	r3,20(sp)
 2006d80:	bd3fffc3 	ldbu	r20,-1(r23)
 2006d84:	18c00044 	addi	r3,r3,1
 2006d88:	d8c00515 	stw	r3,20(sp)
 2006d8c:	003db906 	br	2006474 <__alt_data_end+0xfe006474>
 2006d90:	89400117 	ldw	r5,4(r17)
 2006d94:	e009883a 	mov	r4,fp
 2006d98:	2007abc0 	call	2007abc <_Balloc>
 2006d9c:	89800417 	ldw	r6,16(r17)
 2006da0:	89400304 	addi	r5,r17,12
 2006da4:	11000304 	addi	r4,r2,12
 2006da8:	31800084 	addi	r6,r6,2
 2006dac:	318d883a 	add	r6,r6,r6
 2006db0:	318d883a 	add	r6,r6,r6
 2006db4:	1027883a 	mov	r19,r2
 2006db8:	2002ae40 	call	2002ae4 <memcpy>
 2006dbc:	01800044 	movi	r6,1
 2006dc0:	980b883a 	mov	r5,r19
 2006dc4:	e009883a 	mov	r4,fp
 2006dc8:	20082f80 	call	20082f8 <__lshift>
 2006dcc:	1029883a 	mov	r20,r2
 2006dd0:	003ecc06 	br	2006904 <__alt_data_end+0xfe006904>
 2006dd4:	00800e44 	movi	r2,57
 2006dd8:	90809026 	beq	r18,r2,200701c <_dtoa_r+0x152c>
 2006ddc:	92000044 	addi	r8,r18,1
 2006de0:	003f1f06 	br	2006a60 <__alt_data_end+0xfe006a60>
 2006de4:	9011883a 	mov	r8,r18
 2006de8:	8825883a 	mov	r18,r17
 2006dec:	a023883a 	mov	r17,r20
 2006df0:	003e2906 	br	2006698 <__alt_data_end+0xfe006698>
 2006df4:	002b883a 	mov	r21,zero
 2006df8:	0023883a 	mov	r17,zero
 2006dfc:	003f5406 	br	2006b50 <__alt_data_end+0xfe006b50>
 2006e00:	61bfffc4 	addi	r6,r12,-1
 2006e04:	300490fa 	slli	r2,r6,3
 2006e08:	00c08074 	movhi	r3,513
 2006e0c:	18c59404 	addi	r3,r3,5712
 2006e10:	1885883a 	add	r2,r3,r2
 2006e14:	11000017 	ldw	r4,0(r2)
 2006e18:	11400117 	ldw	r5,4(r2)
 2006e1c:	d8800717 	ldw	r2,28(sp)
 2006e20:	880f883a 	mov	r7,r17
 2006e24:	d9801215 	stw	r6,72(sp)
 2006e28:	800d883a 	mov	r6,r16
 2006e2c:	db001615 	stw	r12,88(sp)
 2006e30:	15c00044 	addi	r23,r2,1
 2006e34:	200d0380 	call	200d038 <__muldf3>
 2006e38:	d9401017 	ldw	r5,64(sp)
 2006e3c:	d9000f17 	ldw	r4,60(sp)
 2006e40:	d8c01515 	stw	r3,84(sp)
 2006e44:	d8801415 	stw	r2,80(sp)
 2006e48:	200e1a00 	call	200e1a0 <__fixdfsi>
 2006e4c:	1009883a 	mov	r4,r2
 2006e50:	1021883a 	mov	r16,r2
 2006e54:	200e2200 	call	200e220 <__floatsidf>
 2006e58:	d9000f17 	ldw	r4,60(sp)
 2006e5c:	d9401017 	ldw	r5,64(sp)
 2006e60:	100d883a 	mov	r6,r2
 2006e64:	180f883a 	mov	r7,r3
 2006e68:	200d8a40 	call	200d8a4 <__subdf3>
 2006e6c:	1829883a 	mov	r20,r3
 2006e70:	d8c00717 	ldw	r3,28(sp)
 2006e74:	84000c04 	addi	r16,r16,48
 2006e78:	1023883a 	mov	r17,r2
 2006e7c:	1c000005 	stb	r16,0(r3)
 2006e80:	db001617 	ldw	r12,88(sp)
 2006e84:	00800044 	movi	r2,1
 2006e88:	60802226 	beq	r12,r2,2006f14 <_dtoa_r+0x1424>
 2006e8c:	d9c00717 	ldw	r7,28(sp)
 2006e90:	8805883a 	mov	r2,r17
 2006e94:	b82b883a 	mov	r21,r23
 2006e98:	3b19883a 	add	r12,r7,r12
 2006e9c:	6023883a 	mov	r17,r12
 2006ea0:	a007883a 	mov	r3,r20
 2006ea4:	dc800f15 	stw	r18,60(sp)
 2006ea8:	000d883a 	mov	r6,zero
 2006eac:	01d00934 	movhi	r7,16420
 2006eb0:	1009883a 	mov	r4,r2
 2006eb4:	180b883a 	mov	r5,r3
 2006eb8:	200d0380 	call	200d038 <__muldf3>
 2006ebc:	180b883a 	mov	r5,r3
 2006ec0:	1009883a 	mov	r4,r2
 2006ec4:	1829883a 	mov	r20,r3
 2006ec8:	1025883a 	mov	r18,r2
 2006ecc:	200e1a00 	call	200e1a0 <__fixdfsi>
 2006ed0:	1009883a 	mov	r4,r2
 2006ed4:	1021883a 	mov	r16,r2
 2006ed8:	200e2200 	call	200e220 <__floatsidf>
 2006edc:	100d883a 	mov	r6,r2
 2006ee0:	180f883a 	mov	r7,r3
 2006ee4:	9009883a 	mov	r4,r18
 2006ee8:	a00b883a 	mov	r5,r20
 2006eec:	84000c04 	addi	r16,r16,48
 2006ef0:	200d8a40 	call	200d8a4 <__subdf3>
 2006ef4:	ad400044 	addi	r21,r21,1
 2006ef8:	ac3fffc5 	stb	r16,-1(r21)
 2006efc:	ac7fea1e 	bne	r21,r17,2006ea8 <__alt_data_end+0xfe006ea8>
 2006f00:	1023883a 	mov	r17,r2
 2006f04:	d8801217 	ldw	r2,72(sp)
 2006f08:	dc800f17 	ldw	r18,60(sp)
 2006f0c:	1829883a 	mov	r20,r3
 2006f10:	b8af883a 	add	r23,r23,r2
 2006f14:	d9001417 	ldw	r4,80(sp)
 2006f18:	d9401517 	ldw	r5,84(sp)
 2006f1c:	000d883a 	mov	r6,zero
 2006f20:	01cff834 	movhi	r7,16352
 2006f24:	200bb640 	call	200bb64 <__adddf3>
 2006f28:	880d883a 	mov	r6,r17
 2006f2c:	a00f883a 	mov	r7,r20
 2006f30:	1009883a 	mov	r4,r2
 2006f34:	180b883a 	mov	r5,r3
 2006f38:	200cf440 	call	200cf44 <__ledf2>
 2006f3c:	10003e0e 	bge	r2,zero,2007038 <_dtoa_r+0x1548>
 2006f40:	d9001317 	ldw	r4,76(sp)
 2006f44:	bd3fffc3 	ldbu	r20,-1(r23)
 2006f48:	d9000515 	stw	r4,20(sp)
 2006f4c:	003d3b06 	br	200643c <__alt_data_end+0xfe00643c>
 2006f50:	0027883a 	mov	r19,zero
 2006f54:	003f1b06 	br	2006bc4 <__alt_data_end+0xfe006bc4>
 2006f58:	d8800817 	ldw	r2,32(sp)
 2006f5c:	11e9c83a 	sub	r20,r2,r7
 2006f60:	0005883a 	mov	r2,zero
 2006f64:	003d5406 	br	20064b8 <__alt_data_end+0xfe0064b8>
 2006f68:	00800044 	movi	r2,1
 2006f6c:	003dc706 	br	200668c <__alt_data_end+0xfe00668c>
 2006f70:	d8c00217 	ldw	r3,8(sp)
 2006f74:	00800d84 	movi	r2,54
 2006f78:	dd400a17 	ldw	r21,40(sp)
 2006f7c:	10c5c83a 	sub	r2,r2,r3
 2006f80:	dd000817 	ldw	r20,32(sp)
 2006f84:	003d4c06 	br	20064b8 <__alt_data_end+0xfe0064b8>
 2006f88:	dc800f15 	stw	r18,60(sp)
 2006f8c:	dcc01015 	stw	r19,64(sp)
 2006f90:	04000084 	movi	r16,2
 2006f94:	003bed06 	br	2005f4c <__alt_data_end+0xfe005f4c>
 2006f98:	d9000617 	ldw	r4,24(sp)
 2006f9c:	203f0d26 	beq	r4,zero,2006bd4 <__alt_data_end+0xfe006bd4>
 2006fa0:	d9800c17 	ldw	r6,48(sp)
 2006fa4:	01bcab0e 	bge	zero,r6,2006254 <__alt_data_end+0xfe006254>
 2006fa8:	d9401017 	ldw	r5,64(sp)
 2006fac:	d9000f17 	ldw	r4,60(sp)
 2006fb0:	000d883a 	mov	r6,zero
 2006fb4:	01d00934 	movhi	r7,16420
 2006fb8:	200d0380 	call	200d038 <__muldf3>
 2006fbc:	81000044 	addi	r4,r16,1
 2006fc0:	d8800f15 	stw	r2,60(sp)
 2006fc4:	d8c01015 	stw	r3,64(sp)
 2006fc8:	200e2200 	call	200e220 <__floatsidf>
 2006fcc:	d9800f17 	ldw	r6,60(sp)
 2006fd0:	d9c01017 	ldw	r7,64(sp)
 2006fd4:	1009883a 	mov	r4,r2
 2006fd8:	180b883a 	mov	r5,r3
 2006fdc:	200d0380 	call	200d038 <__muldf3>
 2006fe0:	01d00734 	movhi	r7,16412
 2006fe4:	000d883a 	mov	r6,zero
 2006fe8:	1009883a 	mov	r4,r2
 2006fec:	180b883a 	mov	r5,r3
 2006ff0:	200bb640 	call	200bb64 <__adddf3>
 2006ff4:	d9c00517 	ldw	r7,20(sp)
 2006ff8:	047f3034 	movhi	r17,64704
 2006ffc:	1021883a 	mov	r16,r2
 2007000:	39ffffc4 	addi	r7,r7,-1
 2007004:	d9c01315 	stw	r7,76(sp)
 2007008:	1c63883a 	add	r17,r3,r17
 200700c:	db000c17 	ldw	r12,48(sp)
 2007010:	003bea06 	br	2005fbc <__alt_data_end+0xfe005fbc>
 2007014:	dc000915 	stw	r16,36(sp)
 2007018:	003e0e06 	br	2006854 <__alt_data_end+0xfe006854>
 200701c:	01000e44 	movi	r4,57
 2007020:	8825883a 	mov	r18,r17
 2007024:	9dc00044 	addi	r23,r19,1
 2007028:	99000005 	stb	r4,0(r19)
 200702c:	a023883a 	mov	r17,r20
 2007030:	dc000915 	stw	r16,36(sp)
 2007034:	003da406 	br	20066c8 <__alt_data_end+0xfe0066c8>
 2007038:	d9801417 	ldw	r6,80(sp)
 200703c:	d9c01517 	ldw	r7,84(sp)
 2007040:	0009883a 	mov	r4,zero
 2007044:	014ff834 	movhi	r5,16352
 2007048:	200d8a40 	call	200d8a4 <__subdf3>
 200704c:	880d883a 	mov	r6,r17
 2007050:	a00f883a 	mov	r7,r20
 2007054:	1009883a 	mov	r4,r2
 2007058:	180b883a 	mov	r5,r3
 200705c:	200ce680 	call	200ce68 <__gedf2>
 2007060:	00bc7c0e 	bge	zero,r2,2006254 <__alt_data_end+0xfe006254>
 2007064:	01000c04 	movi	r4,48
 2007068:	00000106 	br	2007070 <_dtoa_r+0x1580>
 200706c:	102f883a 	mov	r23,r2
 2007070:	b8bfffc4 	addi	r2,r23,-1
 2007074:	10c00007 	ldb	r3,0(r2)
 2007078:	193ffc26 	beq	r3,r4,200706c <__alt_data_end+0xfe00706c>
 200707c:	d9801317 	ldw	r6,76(sp)
 2007080:	d9800515 	stw	r6,20(sp)
 2007084:	003c4406 	br	2006198 <__alt_data_end+0xfe006198>
 2007088:	d9801317 	ldw	r6,76(sp)
 200708c:	d9800515 	stw	r6,20(sp)
 2007090:	003cea06 	br	200643c <__alt_data_end+0xfe00643c>
 2007094:	dd800f17 	ldw	r22,60(sp)
 2007098:	dcc01017 	ldw	r19,64(sp)
 200709c:	dc801217 	ldw	r18,72(sp)
 20070a0:	003c6c06 	br	2006254 <__alt_data_end+0xfe006254>
 20070a4:	903e031e 	bne	r18,zero,20068b4 <__alt_data_end+0xfe0068b4>
 20070a8:	003ebb06 	br	2006b98 <__alt_data_end+0xfe006b98>
 20070ac:	103e6c1e 	bne	r2,zero,2006a60 <__alt_data_end+0xfe006a60>
 20070b0:	4080004c 	andi	r2,r8,1
 20070b4:	103e6a26 	beq	r2,zero,2006a60 <__alt_data_end+0xfe006a60>
 20070b8:	003e6606 	br	2006a54 <__alt_data_end+0xfe006a54>
 20070bc:	d8c00317 	ldw	r3,12(sp)
 20070c0:	00800084 	movi	r2,2
 20070c4:	10c02916 	blt	r2,r3,200716c <_dtoa_r+0x167c>
 20070c8:	d9000c17 	ldw	r4,48(sp)
 20070cc:	003e8806 	br	2006af0 <__alt_data_end+0xfe006af0>
 20070d0:	04000084 	movi	r16,2
 20070d4:	003b9d06 	br	2005f4c <__alt_data_end+0xfe005f4c>
 20070d8:	d9001317 	ldw	r4,76(sp)
 20070dc:	d9000515 	stw	r4,20(sp)
 20070e0:	003cd606 	br	200643c <__alt_data_end+0xfe00643c>
 20070e4:	d8801317 	ldw	r2,76(sp)
 20070e8:	d8800515 	stw	r2,20(sp)
 20070ec:	003c2a06 	br	2006198 <__alt_data_end+0xfe006198>
 20070f0:	d9800317 	ldw	r6,12(sp)
 20070f4:	00800084 	movi	r2,2
 20070f8:	11801516 	blt	r2,r6,2007150 <_dtoa_r+0x1660>
 20070fc:	d9c00c17 	ldw	r7,48(sp)
 2007100:	d9c00615 	stw	r7,24(sp)
 2007104:	003df706 	br	20068e4 <__alt_data_end+0xfe0068e4>
 2007108:	193d3926 	beq	r3,r4,20065f0 <__alt_data_end+0xfe0065f0>
 200710c:	00c00f04 	movi	r3,60
 2007110:	1885c83a 	sub	r2,r3,r2
 2007114:	003ddf06 	br	2006894 <__alt_data_end+0xfe006894>
 2007118:	e009883a 	mov	r4,fp
 200711c:	e0001115 	stw	zero,68(fp)
 2007120:	000b883a 	mov	r5,zero
 2007124:	2007abc0 	call	2007abc <_Balloc>
 2007128:	d8800715 	stw	r2,28(sp)
 200712c:	d8c00717 	ldw	r3,28(sp)
 2007130:	00bfffc4 	movi	r2,-1
 2007134:	01000044 	movi	r4,1
 2007138:	d8800c15 	stw	r2,48(sp)
 200713c:	e0c01015 	stw	r3,64(fp)
 2007140:	d9000b15 	stw	r4,44(sp)
 2007144:	d8800615 	stw	r2,24(sp)
 2007148:	d8002215 	stw	zero,136(sp)
 200714c:	003c4106 	br	2006254 <__alt_data_end+0xfe006254>
 2007150:	d8c00c17 	ldw	r3,48(sp)
 2007154:	d8c00615 	stw	r3,24(sp)
 2007158:	003e7006 	br	2006b1c <__alt_data_end+0xfe006b1c>
 200715c:	04400044 	movi	r17,1
 2007160:	003b2006 	br	2005de4 <__alt_data_end+0xfe005de4>
 2007164:	000b883a 	mov	r5,zero
 2007168:	003b3d06 	br	2005e60 <__alt_data_end+0xfe005e60>
 200716c:	d8800c17 	ldw	r2,48(sp)
 2007170:	d8800615 	stw	r2,24(sp)
 2007174:	003e6906 	br	2006b1c <__alt_data_end+0xfe006b1c>

02007178 <__sflags>:
 2007178:	28800007 	ldb	r2,0(r5)
 200717c:	00c01c84 	movi	r3,114
 2007180:	10c02426 	beq	r2,r3,2007214 <__sflags+0x9c>
 2007184:	00c01dc4 	movi	r3,119
 2007188:	10c01e26 	beq	r2,r3,2007204 <__sflags+0x8c>
 200718c:	00c01844 	movi	r3,97
 2007190:	10c00426 	beq	r2,r3,20071a4 <__sflags+0x2c>
 2007194:	00800584 	movi	r2,22
 2007198:	20800015 	stw	r2,0(r4)
 200719c:	0005883a 	mov	r2,zero
 20071a0:	f800283a 	ret
 20071a4:	02c08204 	movi	r11,520
 20071a8:	01000044 	movi	r4,1
 20071ac:	00804204 	movi	r2,264
 20071b0:	01c00ac4 	movi	r7,43
 20071b4:	02bff8c4 	movi	r10,-29
 20071b8:	027fff04 	movi	r9,-4
 20071bc:	02001e04 	movi	r8,120
 20071c0:	29400044 	addi	r5,r5,1
 20071c4:	28c00007 	ldb	r3,0(r5)
 20071c8:	18000626 	beq	r3,zero,20071e4 <__sflags+0x6c>
 20071cc:	19c00826 	beq	r3,r7,20071f0 <__sflags+0x78>
 20071d0:	1a3ffb1e 	bne	r3,r8,20071c0 <__alt_data_end+0xfe0071c0>
 20071d4:	29400044 	addi	r5,r5,1
 20071d8:	28c00007 	ldb	r3,0(r5)
 20071dc:	21020014 	ori	r4,r4,2048
 20071e0:	183ffa1e 	bne	r3,zero,20071cc <__alt_data_end+0xfe0071cc>
 20071e4:	22c8b03a 	or	r4,r4,r11
 20071e8:	31000015 	stw	r4,0(r6)
 20071ec:	f800283a 	ret
 20071f0:	1284703a 	and	r2,r2,r10
 20071f4:	2248703a 	and	r4,r4,r9
 20071f8:	10800414 	ori	r2,r2,16
 20071fc:	21000094 	ori	r4,r4,2
 2007200:	003fef06 	br	20071c0 <__alt_data_end+0xfe0071c0>
 2007204:	02c18004 	movi	r11,1536
 2007208:	01000044 	movi	r4,1
 200720c:	00800204 	movi	r2,8
 2007210:	003fe706 	br	20071b0 <__alt_data_end+0xfe0071b0>
 2007214:	0017883a 	mov	r11,zero
 2007218:	0009883a 	mov	r4,zero
 200721c:	00800104 	movi	r2,4
 2007220:	003fe306 	br	20071b0 <__alt_data_end+0xfe0071b0>

02007224 <__sfvwrite_r>:
 2007224:	30800217 	ldw	r2,8(r6)
 2007228:	10006726 	beq	r2,zero,20073c8 <__sfvwrite_r+0x1a4>
 200722c:	28c0030b 	ldhu	r3,12(r5)
 2007230:	defff404 	addi	sp,sp,-48
 2007234:	dd400715 	stw	r21,28(sp)
 2007238:	dd000615 	stw	r20,24(sp)
 200723c:	dc000215 	stw	r16,8(sp)
 2007240:	dfc00b15 	stw	ra,44(sp)
 2007244:	df000a15 	stw	fp,40(sp)
 2007248:	ddc00915 	stw	r23,36(sp)
 200724c:	dd800815 	stw	r22,32(sp)
 2007250:	dcc00515 	stw	r19,20(sp)
 2007254:	dc800415 	stw	r18,16(sp)
 2007258:	dc400315 	stw	r17,12(sp)
 200725c:	1880020c 	andi	r2,r3,8
 2007260:	2821883a 	mov	r16,r5
 2007264:	202b883a 	mov	r21,r4
 2007268:	3029883a 	mov	r20,r6
 200726c:	10002726 	beq	r2,zero,200730c <__sfvwrite_r+0xe8>
 2007270:	28800417 	ldw	r2,16(r5)
 2007274:	10002526 	beq	r2,zero,200730c <__sfvwrite_r+0xe8>
 2007278:	1880008c 	andi	r2,r3,2
 200727c:	a4400017 	ldw	r17,0(r20)
 2007280:	10002a26 	beq	r2,zero,200732c <__sfvwrite_r+0x108>
 2007284:	05a00034 	movhi	r22,32768
 2007288:	0027883a 	mov	r19,zero
 200728c:	0025883a 	mov	r18,zero
 2007290:	b5bf0004 	addi	r22,r22,-1024
 2007294:	980d883a 	mov	r6,r19
 2007298:	a809883a 	mov	r4,r21
 200729c:	90004626 	beq	r18,zero,20073b8 <__sfvwrite_r+0x194>
 20072a0:	900f883a 	mov	r7,r18
 20072a4:	b480022e 	bgeu	r22,r18,20072b0 <__sfvwrite_r+0x8c>
 20072a8:	01e00034 	movhi	r7,32768
 20072ac:	39ff0004 	addi	r7,r7,-1024
 20072b0:	80800917 	ldw	r2,36(r16)
 20072b4:	81400717 	ldw	r5,28(r16)
 20072b8:	103ee83a 	callr	r2
 20072bc:	00805a0e 	bge	zero,r2,2007428 <__sfvwrite_r+0x204>
 20072c0:	a0c00217 	ldw	r3,8(r20)
 20072c4:	98a7883a 	add	r19,r19,r2
 20072c8:	90a5c83a 	sub	r18,r18,r2
 20072cc:	1885c83a 	sub	r2,r3,r2
 20072d0:	a0800215 	stw	r2,8(r20)
 20072d4:	103fef1e 	bne	r2,zero,2007294 <__alt_data_end+0xfe007294>
 20072d8:	0005883a 	mov	r2,zero
 20072dc:	dfc00b17 	ldw	ra,44(sp)
 20072e0:	df000a17 	ldw	fp,40(sp)
 20072e4:	ddc00917 	ldw	r23,36(sp)
 20072e8:	dd800817 	ldw	r22,32(sp)
 20072ec:	dd400717 	ldw	r21,28(sp)
 20072f0:	dd000617 	ldw	r20,24(sp)
 20072f4:	dcc00517 	ldw	r19,20(sp)
 20072f8:	dc800417 	ldw	r18,16(sp)
 20072fc:	dc400317 	ldw	r17,12(sp)
 2007300:	dc000217 	ldw	r16,8(sp)
 2007304:	dec00c04 	addi	sp,sp,48
 2007308:	f800283a 	ret
 200730c:	800b883a 	mov	r5,r16
 2007310:	a809883a 	mov	r4,r21
 2007314:	20057200 	call	2005720 <__swsetup_r>
 2007318:	1000ee1e 	bne	r2,zero,20076d4 <__sfvwrite_r+0x4b0>
 200731c:	80c0030b 	ldhu	r3,12(r16)
 2007320:	a4400017 	ldw	r17,0(r20)
 2007324:	1880008c 	andi	r2,r3,2
 2007328:	103fd61e 	bne	r2,zero,2007284 <__alt_data_end+0xfe007284>
 200732c:	1880004c 	andi	r2,r3,1
 2007330:	1000421e 	bne	r2,zero,200743c <__sfvwrite_r+0x218>
 2007334:	0039883a 	mov	fp,zero
 2007338:	0025883a 	mov	r18,zero
 200733c:	90001a26 	beq	r18,zero,20073a8 <__sfvwrite_r+0x184>
 2007340:	1880800c 	andi	r2,r3,512
 2007344:	84c00217 	ldw	r19,8(r16)
 2007348:	10002126 	beq	r2,zero,20073d0 <__sfvwrite_r+0x1ac>
 200734c:	982f883a 	mov	r23,r19
 2007350:	94c09636 	bltu	r18,r19,20075ac <__sfvwrite_r+0x388>
 2007354:	1881200c 	andi	r2,r3,1152
 2007358:	1000a11e 	bne	r2,zero,20075e0 <__sfvwrite_r+0x3bc>
 200735c:	81000017 	ldw	r4,0(r16)
 2007360:	b80d883a 	mov	r6,r23
 2007364:	e00b883a 	mov	r5,fp
 2007368:	20079600 	call	2007960 <memmove>
 200736c:	80c00217 	ldw	r3,8(r16)
 2007370:	81000017 	ldw	r4,0(r16)
 2007374:	9005883a 	mov	r2,r18
 2007378:	1ce7c83a 	sub	r19,r3,r19
 200737c:	25cf883a 	add	r7,r4,r23
 2007380:	84c00215 	stw	r19,8(r16)
 2007384:	81c00015 	stw	r7,0(r16)
 2007388:	a0c00217 	ldw	r3,8(r20)
 200738c:	e0b9883a 	add	fp,fp,r2
 2007390:	90a5c83a 	sub	r18,r18,r2
 2007394:	18a7c83a 	sub	r19,r3,r2
 2007398:	a4c00215 	stw	r19,8(r20)
 200739c:	983fce26 	beq	r19,zero,20072d8 <__alt_data_end+0xfe0072d8>
 20073a0:	80c0030b 	ldhu	r3,12(r16)
 20073a4:	903fe61e 	bne	r18,zero,2007340 <__alt_data_end+0xfe007340>
 20073a8:	8f000017 	ldw	fp,0(r17)
 20073ac:	8c800117 	ldw	r18,4(r17)
 20073b0:	8c400204 	addi	r17,r17,8
 20073b4:	003fe106 	br	200733c <__alt_data_end+0xfe00733c>
 20073b8:	8cc00017 	ldw	r19,0(r17)
 20073bc:	8c800117 	ldw	r18,4(r17)
 20073c0:	8c400204 	addi	r17,r17,8
 20073c4:	003fb306 	br	2007294 <__alt_data_end+0xfe007294>
 20073c8:	0005883a 	mov	r2,zero
 20073cc:	f800283a 	ret
 20073d0:	81000017 	ldw	r4,0(r16)
 20073d4:	80800417 	ldw	r2,16(r16)
 20073d8:	11005a36 	bltu	r2,r4,2007544 <__sfvwrite_r+0x320>
 20073dc:	85c00517 	ldw	r23,20(r16)
 20073e0:	95c05836 	bltu	r18,r23,2007544 <__sfvwrite_r+0x320>
 20073e4:	00a00034 	movhi	r2,32768
 20073e8:	10bfffc4 	addi	r2,r2,-1
 20073ec:	9009883a 	mov	r4,r18
 20073f0:	1480012e 	bgeu	r2,r18,20073f8 <__sfvwrite_r+0x1d4>
 20073f4:	1009883a 	mov	r4,r2
 20073f8:	b80b883a 	mov	r5,r23
 20073fc:	20008980 	call	2000898 <__divsi3>
 2007400:	b80b883a 	mov	r5,r23
 2007404:	1009883a 	mov	r4,r2
 2007408:	2000a4c0 	call	2000a4c <__mulsi3>
 200740c:	81400717 	ldw	r5,28(r16)
 2007410:	80c00917 	ldw	r3,36(r16)
 2007414:	100f883a 	mov	r7,r2
 2007418:	e00d883a 	mov	r6,fp
 200741c:	a809883a 	mov	r4,r21
 2007420:	183ee83a 	callr	r3
 2007424:	00bfd816 	blt	zero,r2,2007388 <__alt_data_end+0xfe007388>
 2007428:	8080030b 	ldhu	r2,12(r16)
 200742c:	10801014 	ori	r2,r2,64
 2007430:	8080030d 	sth	r2,12(r16)
 2007434:	00bfffc4 	movi	r2,-1
 2007438:	003fa806 	br	20072dc <__alt_data_end+0xfe0072dc>
 200743c:	0027883a 	mov	r19,zero
 2007440:	0011883a 	mov	r8,zero
 2007444:	0039883a 	mov	fp,zero
 2007448:	0025883a 	mov	r18,zero
 200744c:	90001f26 	beq	r18,zero,20074cc <__sfvwrite_r+0x2a8>
 2007450:	40005a26 	beq	r8,zero,20075bc <__sfvwrite_r+0x398>
 2007454:	982d883a 	mov	r22,r19
 2007458:	94c0012e 	bgeu	r18,r19,2007460 <__sfvwrite_r+0x23c>
 200745c:	902d883a 	mov	r22,r18
 2007460:	81000017 	ldw	r4,0(r16)
 2007464:	80800417 	ldw	r2,16(r16)
 2007468:	b02f883a 	mov	r23,r22
 200746c:	81c00517 	ldw	r7,20(r16)
 2007470:	1100032e 	bgeu	r2,r4,2007480 <__sfvwrite_r+0x25c>
 2007474:	80c00217 	ldw	r3,8(r16)
 2007478:	38c7883a 	add	r3,r7,r3
 200747c:	1d801816 	blt	r3,r22,20074e0 <__sfvwrite_r+0x2bc>
 2007480:	b1c03e16 	blt	r22,r7,200757c <__sfvwrite_r+0x358>
 2007484:	80800917 	ldw	r2,36(r16)
 2007488:	81400717 	ldw	r5,28(r16)
 200748c:	e00d883a 	mov	r6,fp
 2007490:	da000115 	stw	r8,4(sp)
 2007494:	a809883a 	mov	r4,r21
 2007498:	103ee83a 	callr	r2
 200749c:	102f883a 	mov	r23,r2
 20074a0:	da000117 	ldw	r8,4(sp)
 20074a4:	00bfe00e 	bge	zero,r2,2007428 <__alt_data_end+0xfe007428>
 20074a8:	9de7c83a 	sub	r19,r19,r23
 20074ac:	98001f26 	beq	r19,zero,200752c <__sfvwrite_r+0x308>
 20074b0:	a0800217 	ldw	r2,8(r20)
 20074b4:	e5f9883a 	add	fp,fp,r23
 20074b8:	95e5c83a 	sub	r18,r18,r23
 20074bc:	15efc83a 	sub	r23,r2,r23
 20074c0:	a5c00215 	stw	r23,8(r20)
 20074c4:	b83f8426 	beq	r23,zero,20072d8 <__alt_data_end+0xfe0072d8>
 20074c8:	903fe11e 	bne	r18,zero,2007450 <__alt_data_end+0xfe007450>
 20074cc:	8f000017 	ldw	fp,0(r17)
 20074d0:	8c800117 	ldw	r18,4(r17)
 20074d4:	0011883a 	mov	r8,zero
 20074d8:	8c400204 	addi	r17,r17,8
 20074dc:	003fdb06 	br	200744c <__alt_data_end+0xfe00744c>
 20074e0:	180d883a 	mov	r6,r3
 20074e4:	e00b883a 	mov	r5,fp
 20074e8:	da000115 	stw	r8,4(sp)
 20074ec:	d8c00015 	stw	r3,0(sp)
 20074f0:	20079600 	call	2007960 <memmove>
 20074f4:	d8c00017 	ldw	r3,0(sp)
 20074f8:	80800017 	ldw	r2,0(r16)
 20074fc:	800b883a 	mov	r5,r16
 2007500:	a809883a 	mov	r4,r21
 2007504:	10c5883a 	add	r2,r2,r3
 2007508:	80800015 	stw	r2,0(r16)
 200750c:	d8c00015 	stw	r3,0(sp)
 2007510:	2000d940 	call	2000d94 <_fflush_r>
 2007514:	d8c00017 	ldw	r3,0(sp)
 2007518:	da000117 	ldw	r8,4(sp)
 200751c:	103fc21e 	bne	r2,zero,2007428 <__alt_data_end+0xfe007428>
 2007520:	182f883a 	mov	r23,r3
 2007524:	9de7c83a 	sub	r19,r19,r23
 2007528:	983fe11e 	bne	r19,zero,20074b0 <__alt_data_end+0xfe0074b0>
 200752c:	800b883a 	mov	r5,r16
 2007530:	a809883a 	mov	r4,r21
 2007534:	2000d940 	call	2000d94 <_fflush_r>
 2007538:	103fbb1e 	bne	r2,zero,2007428 <__alt_data_end+0xfe007428>
 200753c:	0011883a 	mov	r8,zero
 2007540:	003fdb06 	br	20074b0 <__alt_data_end+0xfe0074b0>
 2007544:	94c0012e 	bgeu	r18,r19,200754c <__sfvwrite_r+0x328>
 2007548:	9027883a 	mov	r19,r18
 200754c:	980d883a 	mov	r6,r19
 2007550:	e00b883a 	mov	r5,fp
 2007554:	20079600 	call	2007960 <memmove>
 2007558:	80800217 	ldw	r2,8(r16)
 200755c:	80c00017 	ldw	r3,0(r16)
 2007560:	14c5c83a 	sub	r2,r2,r19
 2007564:	1cc7883a 	add	r3,r3,r19
 2007568:	80800215 	stw	r2,8(r16)
 200756c:	80c00015 	stw	r3,0(r16)
 2007570:	10004326 	beq	r2,zero,2007680 <__sfvwrite_r+0x45c>
 2007574:	9805883a 	mov	r2,r19
 2007578:	003f8306 	br	2007388 <__alt_data_end+0xfe007388>
 200757c:	b00d883a 	mov	r6,r22
 2007580:	e00b883a 	mov	r5,fp
 2007584:	da000115 	stw	r8,4(sp)
 2007588:	20079600 	call	2007960 <memmove>
 200758c:	80800217 	ldw	r2,8(r16)
 2007590:	80c00017 	ldw	r3,0(r16)
 2007594:	da000117 	ldw	r8,4(sp)
 2007598:	1585c83a 	sub	r2,r2,r22
 200759c:	1dad883a 	add	r22,r3,r22
 20075a0:	80800215 	stw	r2,8(r16)
 20075a4:	85800015 	stw	r22,0(r16)
 20075a8:	003fbf06 	br	20074a8 <__alt_data_end+0xfe0074a8>
 20075ac:	81000017 	ldw	r4,0(r16)
 20075b0:	9027883a 	mov	r19,r18
 20075b4:	902f883a 	mov	r23,r18
 20075b8:	003f6906 	br	2007360 <__alt_data_end+0xfe007360>
 20075bc:	900d883a 	mov	r6,r18
 20075c0:	01400284 	movi	r5,10
 20075c4:	e009883a 	mov	r4,fp
 20075c8:	200787c0 	call	200787c <memchr>
 20075cc:	10003e26 	beq	r2,zero,20076c8 <__sfvwrite_r+0x4a4>
 20075d0:	10800044 	addi	r2,r2,1
 20075d4:	1727c83a 	sub	r19,r2,fp
 20075d8:	02000044 	movi	r8,1
 20075dc:	003f9d06 	br	2007454 <__alt_data_end+0xfe007454>
 20075e0:	80800517 	ldw	r2,20(r16)
 20075e4:	81400417 	ldw	r5,16(r16)
 20075e8:	81c00017 	ldw	r7,0(r16)
 20075ec:	10a7883a 	add	r19,r2,r2
 20075f0:	9885883a 	add	r2,r19,r2
 20075f4:	1026d7fa 	srli	r19,r2,31
 20075f8:	396dc83a 	sub	r22,r7,r5
 20075fc:	b1000044 	addi	r4,r22,1
 2007600:	9885883a 	add	r2,r19,r2
 2007604:	1027d07a 	srai	r19,r2,1
 2007608:	2485883a 	add	r2,r4,r18
 200760c:	980d883a 	mov	r6,r19
 2007610:	9880022e 	bgeu	r19,r2,200761c <__sfvwrite_r+0x3f8>
 2007614:	1027883a 	mov	r19,r2
 2007618:	100d883a 	mov	r6,r2
 200761c:	18c1000c 	andi	r3,r3,1024
 2007620:	18001c26 	beq	r3,zero,2007694 <__sfvwrite_r+0x470>
 2007624:	300b883a 	mov	r5,r6
 2007628:	a809883a 	mov	r4,r21
 200762c:	20022d80 	call	20022d8 <_malloc_r>
 2007630:	102f883a 	mov	r23,r2
 2007634:	10002926 	beq	r2,zero,20076dc <__sfvwrite_r+0x4b8>
 2007638:	81400417 	ldw	r5,16(r16)
 200763c:	b00d883a 	mov	r6,r22
 2007640:	1009883a 	mov	r4,r2
 2007644:	2002ae40 	call	2002ae4 <memcpy>
 2007648:	8080030b 	ldhu	r2,12(r16)
 200764c:	00fedfc4 	movi	r3,-1153
 2007650:	10c4703a 	and	r2,r2,r3
 2007654:	10802014 	ori	r2,r2,128
 2007658:	8080030d 	sth	r2,12(r16)
 200765c:	bd89883a 	add	r4,r23,r22
 2007660:	9d8fc83a 	sub	r7,r19,r22
 2007664:	85c00415 	stw	r23,16(r16)
 2007668:	84c00515 	stw	r19,20(r16)
 200766c:	81000015 	stw	r4,0(r16)
 2007670:	9027883a 	mov	r19,r18
 2007674:	81c00215 	stw	r7,8(r16)
 2007678:	902f883a 	mov	r23,r18
 200767c:	003f3806 	br	2007360 <__alt_data_end+0xfe007360>
 2007680:	800b883a 	mov	r5,r16
 2007684:	a809883a 	mov	r4,r21
 2007688:	2000d940 	call	2000d94 <_fflush_r>
 200768c:	103fb926 	beq	r2,zero,2007574 <__alt_data_end+0xfe007574>
 2007690:	003f6506 	br	2007428 <__alt_data_end+0xfe007428>
 2007694:	a809883a 	mov	r4,r21
 2007698:	2008bd40 	call	2008bd4 <_realloc_r>
 200769c:	102f883a 	mov	r23,r2
 20076a0:	103fee1e 	bne	r2,zero,200765c <__alt_data_end+0xfe00765c>
 20076a4:	81400417 	ldw	r5,16(r16)
 20076a8:	a809883a 	mov	r4,r21
 20076ac:	20016700 	call	2001670 <_free_r>
 20076b0:	8080030b 	ldhu	r2,12(r16)
 20076b4:	00ffdfc4 	movi	r3,-129
 20076b8:	1884703a 	and	r2,r3,r2
 20076bc:	00c00304 	movi	r3,12
 20076c0:	a8c00015 	stw	r3,0(r21)
 20076c4:	003f5906 	br	200742c <__alt_data_end+0xfe00742c>
 20076c8:	94c00044 	addi	r19,r18,1
 20076cc:	02000044 	movi	r8,1
 20076d0:	003f6006 	br	2007454 <__alt_data_end+0xfe007454>
 20076d4:	00bfffc4 	movi	r2,-1
 20076d8:	003f0006 	br	20072dc <__alt_data_end+0xfe0072dc>
 20076dc:	00800304 	movi	r2,12
 20076e0:	a8800015 	stw	r2,0(r21)
 20076e4:	8080030b 	ldhu	r2,12(r16)
 20076e8:	003f5006 	br	200742c <__alt_data_end+0xfe00742c>

020076ec <_isatty_r>:
 20076ec:	defffd04 	addi	sp,sp,-12
 20076f0:	dc000015 	stw	r16,0(sp)
 20076f4:	04008074 	movhi	r16,513
 20076f8:	dc400115 	stw	r17,4(sp)
 20076fc:	84140c04 	addi	r16,r16,20528
 2007700:	2023883a 	mov	r17,r4
 2007704:	2809883a 	mov	r4,r5
 2007708:	dfc00215 	stw	ra,8(sp)
 200770c:	80000015 	stw	zero,0(r16)
 2007710:	200e6780 	call	200e678 <isatty>
 2007714:	00ffffc4 	movi	r3,-1
 2007718:	10c00526 	beq	r2,r3,2007730 <_isatty_r+0x44>
 200771c:	dfc00217 	ldw	ra,8(sp)
 2007720:	dc400117 	ldw	r17,4(sp)
 2007724:	dc000017 	ldw	r16,0(sp)
 2007728:	dec00304 	addi	sp,sp,12
 200772c:	f800283a 	ret
 2007730:	80c00017 	ldw	r3,0(r16)
 2007734:	183ff926 	beq	r3,zero,200771c <__alt_data_end+0xfe00771c>
 2007738:	88c00015 	stw	r3,0(r17)
 200773c:	003ff706 	br	200771c <__alt_data_end+0xfe00771c>

02007740 <_setlocale_r>:
 2007740:	30001b26 	beq	r6,zero,20077b0 <_setlocale_r+0x70>
 2007744:	01408074 	movhi	r5,513
 2007748:	defffe04 	addi	sp,sp,-8
 200774c:	29457a04 	addi	r5,r5,5608
 2007750:	3009883a 	mov	r4,r6
 2007754:	dc000015 	stw	r16,0(sp)
 2007758:	dfc00115 	stw	ra,4(sp)
 200775c:	3021883a 	mov	r16,r6
 2007760:	20091ac0 	call	20091ac <strcmp>
 2007764:	1000061e 	bne	r2,zero,2007780 <_setlocale_r+0x40>
 2007768:	00808074 	movhi	r2,513
 200776c:	10855b04 	addi	r2,r2,5484
 2007770:	dfc00117 	ldw	ra,4(sp)
 2007774:	dc000017 	ldw	r16,0(sp)
 2007778:	dec00204 	addi	sp,sp,8
 200777c:	f800283a 	ret
 2007780:	01408074 	movhi	r5,513
 2007784:	29455b04 	addi	r5,r5,5484
 2007788:	8009883a 	mov	r4,r16
 200778c:	20091ac0 	call	20091ac <strcmp>
 2007790:	103ff526 	beq	r2,zero,2007768 <__alt_data_end+0xfe007768>
 2007794:	01408074 	movhi	r5,513
 2007798:	29456504 	addi	r5,r5,5524
 200779c:	8009883a 	mov	r4,r16
 20077a0:	20091ac0 	call	20091ac <strcmp>
 20077a4:	103ff026 	beq	r2,zero,2007768 <__alt_data_end+0xfe007768>
 20077a8:	0005883a 	mov	r2,zero
 20077ac:	003ff006 	br	2007770 <__alt_data_end+0xfe007770>
 20077b0:	00808074 	movhi	r2,513
 20077b4:	10855b04 	addi	r2,r2,5484
 20077b8:	f800283a 	ret

020077bc <__locale_charset>:
 20077bc:	00808074 	movhi	r2,513
 20077c0:	10887104 	addi	r2,r2,8644
 20077c4:	f800283a 	ret

020077c8 <__locale_mb_cur_max>:
 20077c8:	00808074 	movhi	r2,513
 20077cc:	108d1704 	addi	r2,r2,13404
 20077d0:	10800017 	ldw	r2,0(r2)
 20077d4:	f800283a 	ret

020077d8 <__locale_msgcharset>:
 20077d8:	00808074 	movhi	r2,513
 20077dc:	10886904 	addi	r2,r2,8612
 20077e0:	f800283a 	ret

020077e4 <__locale_cjk_lang>:
 20077e4:	0005883a 	mov	r2,zero
 20077e8:	f800283a 	ret

020077ec <_localeconv_r>:
 20077ec:	00808074 	movhi	r2,513
 20077f0:	10887904 	addi	r2,r2,8676
 20077f4:	f800283a 	ret

020077f8 <setlocale>:
 20077f8:	00808074 	movhi	r2,513
 20077fc:	108d1404 	addi	r2,r2,13392
 2007800:	280d883a 	mov	r6,r5
 2007804:	200b883a 	mov	r5,r4
 2007808:	11000017 	ldw	r4,0(r2)
 200780c:	20077401 	jmpi	2007740 <_setlocale_r>

02007810 <localeconv>:
 2007810:	00808074 	movhi	r2,513
 2007814:	10887904 	addi	r2,r2,8676
 2007818:	f800283a 	ret

0200781c <_lseek_r>:
 200781c:	defffd04 	addi	sp,sp,-12
 2007820:	2805883a 	mov	r2,r5
 2007824:	dc000015 	stw	r16,0(sp)
 2007828:	04008074 	movhi	r16,513
 200782c:	dc400115 	stw	r17,4(sp)
 2007830:	300b883a 	mov	r5,r6
 2007834:	84140c04 	addi	r16,r16,20528
 2007838:	2023883a 	mov	r17,r4
 200783c:	380d883a 	mov	r6,r7
 2007840:	1009883a 	mov	r4,r2
 2007844:	dfc00215 	stw	ra,8(sp)
 2007848:	80000015 	stw	zero,0(r16)
 200784c:	200e84c0 	call	200e84c <lseek>
 2007850:	00ffffc4 	movi	r3,-1
 2007854:	10c00526 	beq	r2,r3,200786c <_lseek_r+0x50>
 2007858:	dfc00217 	ldw	ra,8(sp)
 200785c:	dc400117 	ldw	r17,4(sp)
 2007860:	dc000017 	ldw	r16,0(sp)
 2007864:	dec00304 	addi	sp,sp,12
 2007868:	f800283a 	ret
 200786c:	80c00017 	ldw	r3,0(r16)
 2007870:	183ff926 	beq	r3,zero,2007858 <__alt_data_end+0xfe007858>
 2007874:	88c00015 	stw	r3,0(r17)
 2007878:	003ff706 	br	2007858 <__alt_data_end+0xfe007858>

0200787c <memchr>:
 200787c:	208000cc 	andi	r2,r4,3
 2007880:	280f883a 	mov	r7,r5
 2007884:	10003426 	beq	r2,zero,2007958 <memchr+0xdc>
 2007888:	30bfffc4 	addi	r2,r6,-1
 200788c:	30001a26 	beq	r6,zero,20078f8 <memchr+0x7c>
 2007890:	20c00003 	ldbu	r3,0(r4)
 2007894:	29803fcc 	andi	r6,r5,255
 2007898:	30c0051e 	bne	r6,r3,20078b0 <memchr+0x34>
 200789c:	00001806 	br	2007900 <memchr+0x84>
 20078a0:	10001526 	beq	r2,zero,20078f8 <memchr+0x7c>
 20078a4:	20c00003 	ldbu	r3,0(r4)
 20078a8:	10bfffc4 	addi	r2,r2,-1
 20078ac:	30c01426 	beq	r6,r3,2007900 <memchr+0x84>
 20078b0:	21000044 	addi	r4,r4,1
 20078b4:	20c000cc 	andi	r3,r4,3
 20078b8:	183ff91e 	bne	r3,zero,20078a0 <__alt_data_end+0xfe0078a0>
 20078bc:	020000c4 	movi	r8,3
 20078c0:	40801136 	bltu	r8,r2,2007908 <memchr+0x8c>
 20078c4:	10000c26 	beq	r2,zero,20078f8 <memchr+0x7c>
 20078c8:	20c00003 	ldbu	r3,0(r4)
 20078cc:	29403fcc 	andi	r5,r5,255
 20078d0:	28c00b26 	beq	r5,r3,2007900 <memchr+0x84>
 20078d4:	20c00044 	addi	r3,r4,1
 20078d8:	39803fcc 	andi	r6,r7,255
 20078dc:	2089883a 	add	r4,r4,r2
 20078e0:	00000306 	br	20078f0 <memchr+0x74>
 20078e4:	18c00044 	addi	r3,r3,1
 20078e8:	197fffc3 	ldbu	r5,-1(r3)
 20078ec:	31400526 	beq	r6,r5,2007904 <memchr+0x88>
 20078f0:	1805883a 	mov	r2,r3
 20078f4:	20fffb1e 	bne	r4,r3,20078e4 <__alt_data_end+0xfe0078e4>
 20078f8:	0005883a 	mov	r2,zero
 20078fc:	f800283a 	ret
 2007900:	2005883a 	mov	r2,r4
 2007904:	f800283a 	ret
 2007908:	28c03fcc 	andi	r3,r5,255
 200790c:	1812923a 	slli	r9,r3,8
 2007910:	02ffbff4 	movhi	r11,65279
 2007914:	02a02074 	movhi	r10,32897
 2007918:	48d2b03a 	or	r9,r9,r3
 200791c:	4806943a 	slli	r3,r9,16
 2007920:	5affbfc4 	addi	r11,r11,-257
 2007924:	52a02004 	addi	r10,r10,-32640
 2007928:	48d2b03a 	or	r9,r9,r3
 200792c:	20c00017 	ldw	r3,0(r4)
 2007930:	48c6f03a 	xor	r3,r9,r3
 2007934:	1acd883a 	add	r6,r3,r11
 2007938:	00c6303a 	nor	r3,zero,r3
 200793c:	30c6703a 	and	r3,r6,r3
 2007940:	1a86703a 	and	r3,r3,r10
 2007944:	183fe01e 	bne	r3,zero,20078c8 <__alt_data_end+0xfe0078c8>
 2007948:	10bfff04 	addi	r2,r2,-4
 200794c:	21000104 	addi	r4,r4,4
 2007950:	40bff636 	bltu	r8,r2,200792c <__alt_data_end+0xfe00792c>
 2007954:	003fdb06 	br	20078c4 <__alt_data_end+0xfe0078c4>
 2007958:	3005883a 	mov	r2,r6
 200795c:	003fd706 	br	20078bc <__alt_data_end+0xfe0078bc>

02007960 <memmove>:
 2007960:	2005883a 	mov	r2,r4
 2007964:	29000b2e 	bgeu	r5,r4,2007994 <memmove+0x34>
 2007968:	298f883a 	add	r7,r5,r6
 200796c:	21c0092e 	bgeu	r4,r7,2007994 <memmove+0x34>
 2007970:	2187883a 	add	r3,r4,r6
 2007974:	198bc83a 	sub	r5,r3,r6
 2007978:	30004826 	beq	r6,zero,2007a9c <memmove+0x13c>
 200797c:	39ffffc4 	addi	r7,r7,-1
 2007980:	39000003 	ldbu	r4,0(r7)
 2007984:	18ffffc4 	addi	r3,r3,-1
 2007988:	19000005 	stb	r4,0(r3)
 200798c:	28fffb1e 	bne	r5,r3,200797c <__alt_data_end+0xfe00797c>
 2007990:	f800283a 	ret
 2007994:	00c003c4 	movi	r3,15
 2007998:	1980412e 	bgeu	r3,r6,2007aa0 <memmove+0x140>
 200799c:	2886b03a 	or	r3,r5,r2
 20079a0:	18c000cc 	andi	r3,r3,3
 20079a4:	1800401e 	bne	r3,zero,2007aa8 <memmove+0x148>
 20079a8:	33fffc04 	addi	r15,r6,-16
 20079ac:	781ed13a 	srli	r15,r15,4
 20079b0:	28c00104 	addi	r3,r5,4
 20079b4:	13400104 	addi	r13,r2,4
 20079b8:	781c913a 	slli	r14,r15,4
 20079bc:	2b000204 	addi	r12,r5,8
 20079c0:	12c00204 	addi	r11,r2,8
 20079c4:	73800504 	addi	r14,r14,20
 20079c8:	2a800304 	addi	r10,r5,12
 20079cc:	12400304 	addi	r9,r2,12
 20079d0:	2b9d883a 	add	r14,r5,r14
 20079d4:	2811883a 	mov	r8,r5
 20079d8:	100f883a 	mov	r7,r2
 20079dc:	41000017 	ldw	r4,0(r8)
 20079e0:	39c00404 	addi	r7,r7,16
 20079e4:	18c00404 	addi	r3,r3,16
 20079e8:	393ffc15 	stw	r4,-16(r7)
 20079ec:	193ffc17 	ldw	r4,-16(r3)
 20079f0:	6b400404 	addi	r13,r13,16
 20079f4:	5ac00404 	addi	r11,r11,16
 20079f8:	693ffc15 	stw	r4,-16(r13)
 20079fc:	61000017 	ldw	r4,0(r12)
 2007a00:	4a400404 	addi	r9,r9,16
 2007a04:	42000404 	addi	r8,r8,16
 2007a08:	593ffc15 	stw	r4,-16(r11)
 2007a0c:	51000017 	ldw	r4,0(r10)
 2007a10:	63000404 	addi	r12,r12,16
 2007a14:	52800404 	addi	r10,r10,16
 2007a18:	493ffc15 	stw	r4,-16(r9)
 2007a1c:	1bbfef1e 	bne	r3,r14,20079dc <__alt_data_end+0xfe0079dc>
 2007a20:	79000044 	addi	r4,r15,1
 2007a24:	2008913a 	slli	r4,r4,4
 2007a28:	328003cc 	andi	r10,r6,15
 2007a2c:	02c000c4 	movi	r11,3
 2007a30:	1107883a 	add	r3,r2,r4
 2007a34:	290b883a 	add	r5,r5,r4
 2007a38:	5a801e2e 	bgeu	r11,r10,2007ab4 <memmove+0x154>
 2007a3c:	1813883a 	mov	r9,r3
 2007a40:	2811883a 	mov	r8,r5
 2007a44:	500f883a 	mov	r7,r10
 2007a48:	41000017 	ldw	r4,0(r8)
 2007a4c:	4a400104 	addi	r9,r9,4
 2007a50:	39ffff04 	addi	r7,r7,-4
 2007a54:	493fff15 	stw	r4,-4(r9)
 2007a58:	42000104 	addi	r8,r8,4
 2007a5c:	59fffa36 	bltu	r11,r7,2007a48 <__alt_data_end+0xfe007a48>
 2007a60:	513fff04 	addi	r4,r10,-4
 2007a64:	2008d0ba 	srli	r4,r4,2
 2007a68:	318000cc 	andi	r6,r6,3
 2007a6c:	21000044 	addi	r4,r4,1
 2007a70:	2109883a 	add	r4,r4,r4
 2007a74:	2109883a 	add	r4,r4,r4
 2007a78:	1907883a 	add	r3,r3,r4
 2007a7c:	290b883a 	add	r5,r5,r4
 2007a80:	30000b26 	beq	r6,zero,2007ab0 <memmove+0x150>
 2007a84:	198d883a 	add	r6,r3,r6
 2007a88:	29c00003 	ldbu	r7,0(r5)
 2007a8c:	18c00044 	addi	r3,r3,1
 2007a90:	29400044 	addi	r5,r5,1
 2007a94:	19ffffc5 	stb	r7,-1(r3)
 2007a98:	19bffb1e 	bne	r3,r6,2007a88 <__alt_data_end+0xfe007a88>
 2007a9c:	f800283a 	ret
 2007aa0:	1007883a 	mov	r3,r2
 2007aa4:	003ff606 	br	2007a80 <__alt_data_end+0xfe007a80>
 2007aa8:	1007883a 	mov	r3,r2
 2007aac:	003ff506 	br	2007a84 <__alt_data_end+0xfe007a84>
 2007ab0:	f800283a 	ret
 2007ab4:	500d883a 	mov	r6,r10
 2007ab8:	003ff106 	br	2007a80 <__alt_data_end+0xfe007a80>

02007abc <_Balloc>:
 2007abc:	20801317 	ldw	r2,76(r4)
 2007ac0:	defffc04 	addi	sp,sp,-16
 2007ac4:	dc400115 	stw	r17,4(sp)
 2007ac8:	dc000015 	stw	r16,0(sp)
 2007acc:	dfc00315 	stw	ra,12(sp)
 2007ad0:	dc800215 	stw	r18,8(sp)
 2007ad4:	2023883a 	mov	r17,r4
 2007ad8:	2821883a 	mov	r16,r5
 2007adc:	10000f26 	beq	r2,zero,2007b1c <_Balloc+0x60>
 2007ae0:	8407883a 	add	r3,r16,r16
 2007ae4:	18c7883a 	add	r3,r3,r3
 2007ae8:	10c7883a 	add	r3,r2,r3
 2007aec:	18800017 	ldw	r2,0(r3)
 2007af0:	10001126 	beq	r2,zero,2007b38 <_Balloc+0x7c>
 2007af4:	11000017 	ldw	r4,0(r2)
 2007af8:	19000015 	stw	r4,0(r3)
 2007afc:	10000415 	stw	zero,16(r2)
 2007b00:	10000315 	stw	zero,12(r2)
 2007b04:	dfc00317 	ldw	ra,12(sp)
 2007b08:	dc800217 	ldw	r18,8(sp)
 2007b0c:	dc400117 	ldw	r17,4(sp)
 2007b10:	dc000017 	ldw	r16,0(sp)
 2007b14:	dec00404 	addi	sp,sp,16
 2007b18:	f800283a 	ret
 2007b1c:	01800844 	movi	r6,33
 2007b20:	01400104 	movi	r5,4
 2007b24:	200a9800 	call	200a980 <_calloc_r>
 2007b28:	88801315 	stw	r2,76(r17)
 2007b2c:	103fec1e 	bne	r2,zero,2007ae0 <__alt_data_end+0xfe007ae0>
 2007b30:	0005883a 	mov	r2,zero
 2007b34:	003ff306 	br	2007b04 <__alt_data_end+0xfe007b04>
 2007b38:	01400044 	movi	r5,1
 2007b3c:	2c24983a 	sll	r18,r5,r16
 2007b40:	8809883a 	mov	r4,r17
 2007b44:	91800144 	addi	r6,r18,5
 2007b48:	318d883a 	add	r6,r6,r6
 2007b4c:	318d883a 	add	r6,r6,r6
 2007b50:	200a9800 	call	200a980 <_calloc_r>
 2007b54:	103ff626 	beq	r2,zero,2007b30 <__alt_data_end+0xfe007b30>
 2007b58:	14000115 	stw	r16,4(r2)
 2007b5c:	14800215 	stw	r18,8(r2)
 2007b60:	003fe606 	br	2007afc <__alt_data_end+0xfe007afc>

02007b64 <_Bfree>:
 2007b64:	28000826 	beq	r5,zero,2007b88 <_Bfree+0x24>
 2007b68:	28c00117 	ldw	r3,4(r5)
 2007b6c:	20801317 	ldw	r2,76(r4)
 2007b70:	18c7883a 	add	r3,r3,r3
 2007b74:	18c7883a 	add	r3,r3,r3
 2007b78:	10c5883a 	add	r2,r2,r3
 2007b7c:	10c00017 	ldw	r3,0(r2)
 2007b80:	28c00015 	stw	r3,0(r5)
 2007b84:	11400015 	stw	r5,0(r2)
 2007b88:	f800283a 	ret

02007b8c <__multadd>:
 2007b8c:	defff704 	addi	sp,sp,-36
 2007b90:	dc800215 	stw	r18,8(sp)
 2007b94:	2c800417 	ldw	r18,16(r5)
 2007b98:	dd800615 	stw	r22,24(sp)
 2007b9c:	dd400515 	stw	r21,20(sp)
 2007ba0:	dd000415 	stw	r20,16(sp)
 2007ba4:	dcc00315 	stw	r19,12(sp)
 2007ba8:	dc400115 	stw	r17,4(sp)
 2007bac:	dc000015 	stw	r16,0(sp)
 2007bb0:	dfc00815 	stw	ra,32(sp)
 2007bb4:	ddc00715 	stw	r23,28(sp)
 2007bb8:	2827883a 	mov	r19,r5
 2007bbc:	2029883a 	mov	r20,r4
 2007bc0:	3023883a 	mov	r17,r6
 2007bc4:	3821883a 	mov	r16,r7
 2007bc8:	2d400504 	addi	r21,r5,20
 2007bcc:	002d883a 	mov	r22,zero
 2007bd0:	adc00017 	ldw	r23,0(r21)
 2007bd4:	880b883a 	mov	r5,r17
 2007bd8:	ad400104 	addi	r21,r21,4
 2007bdc:	b93fffcc 	andi	r4,r23,65535
 2007be0:	2000a4c0 	call	2000a4c <__mulsi3>
 2007be4:	b808d43a 	srli	r4,r23,16
 2007be8:	880b883a 	mov	r5,r17
 2007bec:	1421883a 	add	r16,r2,r16
 2007bf0:	2000a4c0 	call	2000a4c <__mulsi3>
 2007bf4:	800ed43a 	srli	r7,r16,16
 2007bf8:	80ffffcc 	andi	r3,r16,65535
 2007bfc:	b5800044 	addi	r22,r22,1
 2007c00:	11c5883a 	add	r2,r2,r7
 2007c04:	100e943a 	slli	r7,r2,16
 2007c08:	1020d43a 	srli	r16,r2,16
 2007c0c:	38c7883a 	add	r3,r7,r3
 2007c10:	a8ffff15 	stw	r3,-4(r21)
 2007c14:	b4bfee16 	blt	r22,r18,2007bd0 <__alt_data_end+0xfe007bd0>
 2007c18:	80000926 	beq	r16,zero,2007c40 <__multadd+0xb4>
 2007c1c:	98800217 	ldw	r2,8(r19)
 2007c20:	9080130e 	bge	r18,r2,2007c70 <__multadd+0xe4>
 2007c24:	90800144 	addi	r2,r18,5
 2007c28:	1085883a 	add	r2,r2,r2
 2007c2c:	1085883a 	add	r2,r2,r2
 2007c30:	9885883a 	add	r2,r19,r2
 2007c34:	14000015 	stw	r16,0(r2)
 2007c38:	94800044 	addi	r18,r18,1
 2007c3c:	9c800415 	stw	r18,16(r19)
 2007c40:	9805883a 	mov	r2,r19
 2007c44:	dfc00817 	ldw	ra,32(sp)
 2007c48:	ddc00717 	ldw	r23,28(sp)
 2007c4c:	dd800617 	ldw	r22,24(sp)
 2007c50:	dd400517 	ldw	r21,20(sp)
 2007c54:	dd000417 	ldw	r20,16(sp)
 2007c58:	dcc00317 	ldw	r19,12(sp)
 2007c5c:	dc800217 	ldw	r18,8(sp)
 2007c60:	dc400117 	ldw	r17,4(sp)
 2007c64:	dc000017 	ldw	r16,0(sp)
 2007c68:	dec00904 	addi	sp,sp,36
 2007c6c:	f800283a 	ret
 2007c70:	99400117 	ldw	r5,4(r19)
 2007c74:	a009883a 	mov	r4,r20
 2007c78:	29400044 	addi	r5,r5,1
 2007c7c:	2007abc0 	call	2007abc <_Balloc>
 2007c80:	99800417 	ldw	r6,16(r19)
 2007c84:	99400304 	addi	r5,r19,12
 2007c88:	11000304 	addi	r4,r2,12
 2007c8c:	31800084 	addi	r6,r6,2
 2007c90:	318d883a 	add	r6,r6,r6
 2007c94:	318d883a 	add	r6,r6,r6
 2007c98:	1023883a 	mov	r17,r2
 2007c9c:	2002ae40 	call	2002ae4 <memcpy>
 2007ca0:	98000a26 	beq	r19,zero,2007ccc <__multadd+0x140>
 2007ca4:	98c00117 	ldw	r3,4(r19)
 2007ca8:	a0801317 	ldw	r2,76(r20)
 2007cac:	18c7883a 	add	r3,r3,r3
 2007cb0:	18c7883a 	add	r3,r3,r3
 2007cb4:	10c5883a 	add	r2,r2,r3
 2007cb8:	10c00017 	ldw	r3,0(r2)
 2007cbc:	98c00015 	stw	r3,0(r19)
 2007cc0:	14c00015 	stw	r19,0(r2)
 2007cc4:	8827883a 	mov	r19,r17
 2007cc8:	003fd606 	br	2007c24 <__alt_data_end+0xfe007c24>
 2007ccc:	8827883a 	mov	r19,r17
 2007cd0:	003fd406 	br	2007c24 <__alt_data_end+0xfe007c24>

02007cd4 <__s2b>:
 2007cd4:	defff904 	addi	sp,sp,-28
 2007cd8:	dc400115 	stw	r17,4(sp)
 2007cdc:	dc000015 	stw	r16,0(sp)
 2007ce0:	2023883a 	mov	r17,r4
 2007ce4:	2821883a 	mov	r16,r5
 2007ce8:	39000204 	addi	r4,r7,8
 2007cec:	01400244 	movi	r5,9
 2007cf0:	dcc00315 	stw	r19,12(sp)
 2007cf4:	dc800215 	stw	r18,8(sp)
 2007cf8:	dfc00615 	stw	ra,24(sp)
 2007cfc:	dd400515 	stw	r21,20(sp)
 2007d00:	dd000415 	stw	r20,16(sp)
 2007d04:	3825883a 	mov	r18,r7
 2007d08:	3027883a 	mov	r19,r6
 2007d0c:	20008980 	call	2000898 <__divsi3>
 2007d10:	00c00044 	movi	r3,1
 2007d14:	000b883a 	mov	r5,zero
 2007d18:	1880030e 	bge	r3,r2,2007d28 <__s2b+0x54>
 2007d1c:	18c7883a 	add	r3,r3,r3
 2007d20:	29400044 	addi	r5,r5,1
 2007d24:	18bffd16 	blt	r3,r2,2007d1c <__alt_data_end+0xfe007d1c>
 2007d28:	8809883a 	mov	r4,r17
 2007d2c:	2007abc0 	call	2007abc <_Balloc>
 2007d30:	d8c00717 	ldw	r3,28(sp)
 2007d34:	10c00515 	stw	r3,20(r2)
 2007d38:	00c00044 	movi	r3,1
 2007d3c:	10c00415 	stw	r3,16(r2)
 2007d40:	00c00244 	movi	r3,9
 2007d44:	1cc0210e 	bge	r3,r19,2007dcc <__s2b+0xf8>
 2007d48:	80eb883a 	add	r21,r16,r3
 2007d4c:	a829883a 	mov	r20,r21
 2007d50:	84e1883a 	add	r16,r16,r19
 2007d54:	a1c00007 	ldb	r7,0(r20)
 2007d58:	01800284 	movi	r6,10
 2007d5c:	a5000044 	addi	r20,r20,1
 2007d60:	100b883a 	mov	r5,r2
 2007d64:	39fff404 	addi	r7,r7,-48
 2007d68:	8809883a 	mov	r4,r17
 2007d6c:	2007b8c0 	call	2007b8c <__multadd>
 2007d70:	a43ff81e 	bne	r20,r16,2007d54 <__alt_data_end+0xfe007d54>
 2007d74:	ace1883a 	add	r16,r21,r19
 2007d78:	843ffe04 	addi	r16,r16,-8
 2007d7c:	9c800a0e 	bge	r19,r18,2007da8 <__s2b+0xd4>
 2007d80:	94e5c83a 	sub	r18,r18,r19
 2007d84:	84a5883a 	add	r18,r16,r18
 2007d88:	81c00007 	ldb	r7,0(r16)
 2007d8c:	01800284 	movi	r6,10
 2007d90:	84000044 	addi	r16,r16,1
 2007d94:	100b883a 	mov	r5,r2
 2007d98:	39fff404 	addi	r7,r7,-48
 2007d9c:	8809883a 	mov	r4,r17
 2007da0:	2007b8c0 	call	2007b8c <__multadd>
 2007da4:	84bff81e 	bne	r16,r18,2007d88 <__alt_data_end+0xfe007d88>
 2007da8:	dfc00617 	ldw	ra,24(sp)
 2007dac:	dd400517 	ldw	r21,20(sp)
 2007db0:	dd000417 	ldw	r20,16(sp)
 2007db4:	dcc00317 	ldw	r19,12(sp)
 2007db8:	dc800217 	ldw	r18,8(sp)
 2007dbc:	dc400117 	ldw	r17,4(sp)
 2007dc0:	dc000017 	ldw	r16,0(sp)
 2007dc4:	dec00704 	addi	sp,sp,28
 2007dc8:	f800283a 	ret
 2007dcc:	84000284 	addi	r16,r16,10
 2007dd0:	1827883a 	mov	r19,r3
 2007dd4:	003fe906 	br	2007d7c <__alt_data_end+0xfe007d7c>

02007dd8 <__hi0bits>:
 2007dd8:	20bfffec 	andhi	r2,r4,65535
 2007ddc:	1000141e 	bne	r2,zero,2007e30 <__hi0bits+0x58>
 2007de0:	2008943a 	slli	r4,r4,16
 2007de4:	00800404 	movi	r2,16
 2007de8:	20ffc02c 	andhi	r3,r4,65280
 2007dec:	1800021e 	bne	r3,zero,2007df8 <__hi0bits+0x20>
 2007df0:	2008923a 	slli	r4,r4,8
 2007df4:	10800204 	addi	r2,r2,8
 2007df8:	20fc002c 	andhi	r3,r4,61440
 2007dfc:	1800021e 	bne	r3,zero,2007e08 <__hi0bits+0x30>
 2007e00:	2008913a 	slli	r4,r4,4
 2007e04:	10800104 	addi	r2,r2,4
 2007e08:	20f0002c 	andhi	r3,r4,49152
 2007e0c:	1800031e 	bne	r3,zero,2007e1c <__hi0bits+0x44>
 2007e10:	2109883a 	add	r4,r4,r4
 2007e14:	10800084 	addi	r2,r2,2
 2007e18:	2109883a 	add	r4,r4,r4
 2007e1c:	20000316 	blt	r4,zero,2007e2c <__hi0bits+0x54>
 2007e20:	2110002c 	andhi	r4,r4,16384
 2007e24:	2000041e 	bne	r4,zero,2007e38 <__hi0bits+0x60>
 2007e28:	00800804 	movi	r2,32
 2007e2c:	f800283a 	ret
 2007e30:	0005883a 	mov	r2,zero
 2007e34:	003fec06 	br	2007de8 <__alt_data_end+0xfe007de8>
 2007e38:	10800044 	addi	r2,r2,1
 2007e3c:	f800283a 	ret

02007e40 <__lo0bits>:
 2007e40:	20c00017 	ldw	r3,0(r4)
 2007e44:	188001cc 	andi	r2,r3,7
 2007e48:	10000826 	beq	r2,zero,2007e6c <__lo0bits+0x2c>
 2007e4c:	1880004c 	andi	r2,r3,1
 2007e50:	1000211e 	bne	r2,zero,2007ed8 <__lo0bits+0x98>
 2007e54:	1880008c 	andi	r2,r3,2
 2007e58:	1000211e 	bne	r2,zero,2007ee0 <__lo0bits+0xa0>
 2007e5c:	1806d0ba 	srli	r3,r3,2
 2007e60:	00800084 	movi	r2,2
 2007e64:	20c00015 	stw	r3,0(r4)
 2007e68:	f800283a 	ret
 2007e6c:	18bfffcc 	andi	r2,r3,65535
 2007e70:	10001326 	beq	r2,zero,2007ec0 <__lo0bits+0x80>
 2007e74:	0005883a 	mov	r2,zero
 2007e78:	19403fcc 	andi	r5,r3,255
 2007e7c:	2800021e 	bne	r5,zero,2007e88 <__lo0bits+0x48>
 2007e80:	1806d23a 	srli	r3,r3,8
 2007e84:	10800204 	addi	r2,r2,8
 2007e88:	194003cc 	andi	r5,r3,15
 2007e8c:	2800021e 	bne	r5,zero,2007e98 <__lo0bits+0x58>
 2007e90:	1806d13a 	srli	r3,r3,4
 2007e94:	10800104 	addi	r2,r2,4
 2007e98:	194000cc 	andi	r5,r3,3
 2007e9c:	2800021e 	bne	r5,zero,2007ea8 <__lo0bits+0x68>
 2007ea0:	1806d0ba 	srli	r3,r3,2
 2007ea4:	10800084 	addi	r2,r2,2
 2007ea8:	1940004c 	andi	r5,r3,1
 2007eac:	2800081e 	bne	r5,zero,2007ed0 <__lo0bits+0x90>
 2007eb0:	1806d07a 	srli	r3,r3,1
 2007eb4:	1800051e 	bne	r3,zero,2007ecc <__lo0bits+0x8c>
 2007eb8:	00800804 	movi	r2,32
 2007ebc:	f800283a 	ret
 2007ec0:	1806d43a 	srli	r3,r3,16
 2007ec4:	00800404 	movi	r2,16
 2007ec8:	003feb06 	br	2007e78 <__alt_data_end+0xfe007e78>
 2007ecc:	10800044 	addi	r2,r2,1
 2007ed0:	20c00015 	stw	r3,0(r4)
 2007ed4:	f800283a 	ret
 2007ed8:	0005883a 	mov	r2,zero
 2007edc:	f800283a 	ret
 2007ee0:	1806d07a 	srli	r3,r3,1
 2007ee4:	00800044 	movi	r2,1
 2007ee8:	20c00015 	stw	r3,0(r4)
 2007eec:	f800283a 	ret

02007ef0 <__i2b>:
 2007ef0:	defffd04 	addi	sp,sp,-12
 2007ef4:	dc000015 	stw	r16,0(sp)
 2007ef8:	04000044 	movi	r16,1
 2007efc:	dc400115 	stw	r17,4(sp)
 2007f00:	2823883a 	mov	r17,r5
 2007f04:	800b883a 	mov	r5,r16
 2007f08:	dfc00215 	stw	ra,8(sp)
 2007f0c:	2007abc0 	call	2007abc <_Balloc>
 2007f10:	14400515 	stw	r17,20(r2)
 2007f14:	14000415 	stw	r16,16(r2)
 2007f18:	dfc00217 	ldw	ra,8(sp)
 2007f1c:	dc400117 	ldw	r17,4(sp)
 2007f20:	dc000017 	ldw	r16,0(sp)
 2007f24:	dec00304 	addi	sp,sp,12
 2007f28:	f800283a 	ret

02007f2c <__multiply>:
 2007f2c:	deffef04 	addi	sp,sp,-68
 2007f30:	dc400815 	stw	r17,32(sp)
 2007f34:	dc000715 	stw	r16,28(sp)
 2007f38:	34400417 	ldw	r17,16(r6)
 2007f3c:	2c000417 	ldw	r16,16(r5)
 2007f40:	dd800d15 	stw	r22,52(sp)
 2007f44:	dc800915 	stw	r18,36(sp)
 2007f48:	dfc01015 	stw	ra,64(sp)
 2007f4c:	df000f15 	stw	fp,60(sp)
 2007f50:	ddc00e15 	stw	r23,56(sp)
 2007f54:	dd400c15 	stw	r21,48(sp)
 2007f58:	dd000b15 	stw	r20,44(sp)
 2007f5c:	dcc00a15 	stw	r19,40(sp)
 2007f60:	2825883a 	mov	r18,r5
 2007f64:	302d883a 	mov	r22,r6
 2007f68:	8440050e 	bge	r16,r17,2007f80 <__multiply+0x54>
 2007f6c:	8007883a 	mov	r3,r16
 2007f70:	3025883a 	mov	r18,r6
 2007f74:	8821883a 	mov	r16,r17
 2007f78:	282d883a 	mov	r22,r5
 2007f7c:	1823883a 	mov	r17,r3
 2007f80:	90800217 	ldw	r2,8(r18)
 2007f84:	8447883a 	add	r3,r16,r17
 2007f88:	d8c00215 	stw	r3,8(sp)
 2007f8c:	91400117 	ldw	r5,4(r18)
 2007f90:	10c0010e 	bge	r2,r3,2007f98 <__multiply+0x6c>
 2007f94:	29400044 	addi	r5,r5,1
 2007f98:	2007abc0 	call	2007abc <_Balloc>
 2007f9c:	d8c00217 	ldw	r3,8(sp)
 2007fa0:	d8800615 	stw	r2,24(sp)
 2007fa4:	18eb883a 	add	r21,r3,r3
 2007fa8:	ad6b883a 	add	r21,r21,r21
 2007fac:	10c00504 	addi	r3,r2,20
 2007fb0:	1d6b883a 	add	r21,r3,r21
 2007fb4:	d8c00115 	stw	r3,4(sp)
 2007fb8:	dd400315 	stw	r21,12(sp)
 2007fbc:	1805883a 	mov	r2,r3
 2007fc0:	1d40042e 	bgeu	r3,r21,2007fd4 <__multiply+0xa8>
 2007fc4:	d8c00317 	ldw	r3,12(sp)
 2007fc8:	10000015 	stw	zero,0(r2)
 2007fcc:	10800104 	addi	r2,r2,4
 2007fd0:	10fffc36 	bltu	r2,r3,2007fc4 <__alt_data_end+0xfe007fc4>
 2007fd4:	8c63883a 	add	r17,r17,r17
 2007fd8:	b5800504 	addi	r22,r22,20
 2007fdc:	8c63883a 	add	r17,r17,r17
 2007fe0:	94800504 	addi	r18,r18,20
 2007fe4:	8421883a 	add	r16,r16,r16
 2007fe8:	b463883a 	add	r17,r22,r17
 2007fec:	8421883a 	add	r16,r16,r16
 2007ff0:	dd800015 	stw	r22,0(sp)
 2007ff4:	dc800415 	stw	r18,16(sp)
 2007ff8:	dc400515 	stw	r17,20(sp)
 2007ffc:	9429883a 	add	r20,r18,r16
 2008000:	b4404f2e 	bgeu	r22,r17,2008140 <__multiply+0x214>
 2008004:	d8c00017 	ldw	r3,0(sp)
 2008008:	1c800017 	ldw	r18,0(r3)
 200800c:	947fffcc 	andi	r17,r18,65535
 2008010:	88001e26 	beq	r17,zero,200808c <__multiply+0x160>
 2008014:	dd800117 	ldw	r22,4(sp)
 2008018:	dd400417 	ldw	r21,16(sp)
 200801c:	0027883a 	mov	r19,zero
 2008020:	ac800017 	ldw	r18,0(r21)
 2008024:	b4000017 	ldw	r16,0(r22)
 2008028:	880b883a 	mov	r5,r17
 200802c:	913fffcc 	andi	r4,r18,65535
 2008030:	2000a4c0 	call	2000a4c <__mulsi3>
 2008034:	9008d43a 	srli	r4,r18,16
 2008038:	84bfffcc 	andi	r18,r16,65535
 200803c:	1485883a 	add	r2,r2,r18
 2008040:	14e5883a 	add	r18,r2,r19
 2008044:	8020d43a 	srli	r16,r16,16
 2008048:	9026d43a 	srli	r19,r18,16
 200804c:	880b883a 	mov	r5,r17
 2008050:	2000a4c0 	call	2000a4c <__mulsi3>
 2008054:	1405883a 	add	r2,r2,r16
 2008058:	14e1883a 	add	r16,r2,r19
 200805c:	90ffffcc 	andi	r3,r18,65535
 2008060:	8024943a 	slli	r18,r16,16
 2008064:	ad400104 	addi	r21,r21,4
 2008068:	b005883a 	mov	r2,r22
 200806c:	90c6b03a 	or	r3,r18,r3
 2008070:	b0c00015 	stw	r3,0(r22)
 2008074:	8026d43a 	srli	r19,r16,16
 2008078:	b5800104 	addi	r22,r22,4
 200807c:	ad3fe836 	bltu	r21,r20,2008020 <__alt_data_end+0xfe008020>
 2008080:	d8c00017 	ldw	r3,0(sp)
 2008084:	14c00115 	stw	r19,4(r2)
 2008088:	1c800017 	ldw	r18,0(r3)
 200808c:	9024d43a 	srli	r18,r18,16
 2008090:	90002226 	beq	r18,zero,200811c <__multiply+0x1f0>
 2008094:	d8c00117 	ldw	r3,4(sp)
 2008098:	dd800417 	ldw	r22,16(sp)
 200809c:	002f883a 	mov	r23,zero
 20080a0:	1f000017 	ldw	fp,0(r3)
 20080a4:	1823883a 	mov	r17,r3
 20080a8:	182b883a 	mov	r21,r3
 20080ac:	e021883a 	mov	r16,fp
 20080b0:	00000106 	br	20080b8 <__multiply+0x18c>
 20080b4:	982b883a 	mov	r21,r19
 20080b8:	b100000b 	ldhu	r4,0(r22)
 20080bc:	8020d43a 	srli	r16,r16,16
 20080c0:	900b883a 	mov	r5,r18
 20080c4:	2000a4c0 	call	2000a4c <__mulsi3>
 20080c8:	1405883a 	add	r2,r2,r16
 20080cc:	15ef883a 	add	r23,r2,r23
 20080d0:	b804943a 	slli	r2,r23,16
 20080d4:	e0ffffcc 	andi	r3,fp,65535
 20080d8:	8c400104 	addi	r17,r17,4
 20080dc:	10c6b03a 	or	r3,r2,r3
 20080e0:	88ffff15 	stw	r3,-4(r17)
 20080e4:	b5800104 	addi	r22,r22,4
 20080e8:	b13fff17 	ldw	r4,-4(r22)
 20080ec:	acc00104 	addi	r19,r21,4
 20080f0:	900b883a 	mov	r5,r18
 20080f4:	2008d43a 	srli	r4,r4,16
 20080f8:	9c000017 	ldw	r16,0(r19)
 20080fc:	2000a4c0 	call	2000a4c <__mulsi3>
 2008100:	b806d43a 	srli	r3,r23,16
 2008104:	813fffcc 	andi	r4,r16,65535
 2008108:	1105883a 	add	r2,r2,r4
 200810c:	10f9883a 	add	fp,r2,r3
 2008110:	e02ed43a 	srli	r23,fp,16
 2008114:	b53fe736 	bltu	r22,r20,20080b4 <__alt_data_end+0xfe0080b4>
 2008118:	af000115 	stw	fp,4(r21)
 200811c:	d8c00017 	ldw	r3,0(sp)
 2008120:	d9000517 	ldw	r4,20(sp)
 2008124:	18c00104 	addi	r3,r3,4
 2008128:	d8c00015 	stw	r3,0(sp)
 200812c:	d8c00117 	ldw	r3,4(sp)
 2008130:	18c00104 	addi	r3,r3,4
 2008134:	d8c00115 	stw	r3,4(sp)
 2008138:	d8c00017 	ldw	r3,0(sp)
 200813c:	193fb136 	bltu	r3,r4,2008004 <__alt_data_end+0xfe008004>
 2008140:	d8c00217 	ldw	r3,8(sp)
 2008144:	00c00c0e 	bge	zero,r3,2008178 <__multiply+0x24c>
 2008148:	d8c00317 	ldw	r3,12(sp)
 200814c:	18bfff17 	ldw	r2,-4(r3)
 2008150:	1d7fff04 	addi	r21,r3,-4
 2008154:	10000326 	beq	r2,zero,2008164 <__multiply+0x238>
 2008158:	00000706 	br	2008178 <__multiply+0x24c>
 200815c:	a8800017 	ldw	r2,0(r21)
 2008160:	1000051e 	bne	r2,zero,2008178 <__multiply+0x24c>
 2008164:	d8c00217 	ldw	r3,8(sp)
 2008168:	ad7fff04 	addi	r21,r21,-4
 200816c:	18ffffc4 	addi	r3,r3,-1
 2008170:	d8c00215 	stw	r3,8(sp)
 2008174:	183ff91e 	bne	r3,zero,200815c <__alt_data_end+0xfe00815c>
 2008178:	d8c00617 	ldw	r3,24(sp)
 200817c:	d9000217 	ldw	r4,8(sp)
 2008180:	1805883a 	mov	r2,r3
 2008184:	19000415 	stw	r4,16(r3)
 2008188:	dfc01017 	ldw	ra,64(sp)
 200818c:	df000f17 	ldw	fp,60(sp)
 2008190:	ddc00e17 	ldw	r23,56(sp)
 2008194:	dd800d17 	ldw	r22,52(sp)
 2008198:	dd400c17 	ldw	r21,48(sp)
 200819c:	dd000b17 	ldw	r20,44(sp)
 20081a0:	dcc00a17 	ldw	r19,40(sp)
 20081a4:	dc800917 	ldw	r18,36(sp)
 20081a8:	dc400817 	ldw	r17,32(sp)
 20081ac:	dc000717 	ldw	r16,28(sp)
 20081b0:	dec01104 	addi	sp,sp,68
 20081b4:	f800283a 	ret

020081b8 <__pow5mult>:
 20081b8:	defffa04 	addi	sp,sp,-24
 20081bc:	dcc00315 	stw	r19,12(sp)
 20081c0:	dc000015 	stw	r16,0(sp)
 20081c4:	dfc00515 	stw	ra,20(sp)
 20081c8:	dd000415 	stw	r20,16(sp)
 20081cc:	dc800215 	stw	r18,8(sp)
 20081d0:	dc400115 	stw	r17,4(sp)
 20081d4:	308000cc 	andi	r2,r6,3
 20081d8:	3021883a 	mov	r16,r6
 20081dc:	2027883a 	mov	r19,r4
 20081e0:	10002f1e 	bne	r2,zero,20082a0 <__pow5mult+0xe8>
 20081e4:	2825883a 	mov	r18,r5
 20081e8:	8021d0ba 	srai	r16,r16,2
 20081ec:	80001a26 	beq	r16,zero,2008258 <__pow5mult+0xa0>
 20081f0:	9c401217 	ldw	r17,72(r19)
 20081f4:	8800061e 	bne	r17,zero,2008210 <__pow5mult+0x58>
 20081f8:	00003406 	br	20082cc <__pow5mult+0x114>
 20081fc:	8021d07a 	srai	r16,r16,1
 2008200:	80001526 	beq	r16,zero,2008258 <__pow5mult+0xa0>
 2008204:	88800017 	ldw	r2,0(r17)
 2008208:	10001c26 	beq	r2,zero,200827c <__pow5mult+0xc4>
 200820c:	1023883a 	mov	r17,r2
 2008210:	8080004c 	andi	r2,r16,1
 2008214:	103ff926 	beq	r2,zero,20081fc <__alt_data_end+0xfe0081fc>
 2008218:	880d883a 	mov	r6,r17
 200821c:	900b883a 	mov	r5,r18
 2008220:	9809883a 	mov	r4,r19
 2008224:	2007f2c0 	call	2007f2c <__multiply>
 2008228:	90001b26 	beq	r18,zero,2008298 <__pow5mult+0xe0>
 200822c:	91000117 	ldw	r4,4(r18)
 2008230:	98c01317 	ldw	r3,76(r19)
 2008234:	8021d07a 	srai	r16,r16,1
 2008238:	2109883a 	add	r4,r4,r4
 200823c:	2109883a 	add	r4,r4,r4
 2008240:	1907883a 	add	r3,r3,r4
 2008244:	19000017 	ldw	r4,0(r3)
 2008248:	91000015 	stw	r4,0(r18)
 200824c:	1c800015 	stw	r18,0(r3)
 2008250:	1025883a 	mov	r18,r2
 2008254:	803feb1e 	bne	r16,zero,2008204 <__alt_data_end+0xfe008204>
 2008258:	9005883a 	mov	r2,r18
 200825c:	dfc00517 	ldw	ra,20(sp)
 2008260:	dd000417 	ldw	r20,16(sp)
 2008264:	dcc00317 	ldw	r19,12(sp)
 2008268:	dc800217 	ldw	r18,8(sp)
 200826c:	dc400117 	ldw	r17,4(sp)
 2008270:	dc000017 	ldw	r16,0(sp)
 2008274:	dec00604 	addi	sp,sp,24
 2008278:	f800283a 	ret
 200827c:	880d883a 	mov	r6,r17
 2008280:	880b883a 	mov	r5,r17
 2008284:	9809883a 	mov	r4,r19
 2008288:	2007f2c0 	call	2007f2c <__multiply>
 200828c:	88800015 	stw	r2,0(r17)
 2008290:	10000015 	stw	zero,0(r2)
 2008294:	003fdd06 	br	200820c <__alt_data_end+0xfe00820c>
 2008298:	1025883a 	mov	r18,r2
 200829c:	003fd706 	br	20081fc <__alt_data_end+0xfe0081fc>
 20082a0:	10bfffc4 	addi	r2,r2,-1
 20082a4:	1085883a 	add	r2,r2,r2
 20082a8:	00c08074 	movhi	r3,513
 20082ac:	18c57d04 	addi	r3,r3,5620
 20082b0:	1085883a 	add	r2,r2,r2
 20082b4:	1885883a 	add	r2,r3,r2
 20082b8:	11800017 	ldw	r6,0(r2)
 20082bc:	000f883a 	mov	r7,zero
 20082c0:	2007b8c0 	call	2007b8c <__multadd>
 20082c4:	1025883a 	mov	r18,r2
 20082c8:	003fc706 	br	20081e8 <__alt_data_end+0xfe0081e8>
 20082cc:	05000044 	movi	r20,1
 20082d0:	a00b883a 	mov	r5,r20
 20082d4:	9809883a 	mov	r4,r19
 20082d8:	2007abc0 	call	2007abc <_Balloc>
 20082dc:	1023883a 	mov	r17,r2
 20082e0:	00809c44 	movi	r2,625
 20082e4:	88800515 	stw	r2,20(r17)
 20082e8:	8d000415 	stw	r20,16(r17)
 20082ec:	9c401215 	stw	r17,72(r19)
 20082f0:	88000015 	stw	zero,0(r17)
 20082f4:	003fc606 	br	2008210 <__alt_data_end+0xfe008210>

020082f8 <__lshift>:
 20082f8:	defff904 	addi	sp,sp,-28
 20082fc:	dd400515 	stw	r21,20(sp)
 2008300:	dcc00315 	stw	r19,12(sp)
 2008304:	302bd17a 	srai	r21,r6,5
 2008308:	2cc00417 	ldw	r19,16(r5)
 200830c:	28800217 	ldw	r2,8(r5)
 2008310:	dd000415 	stw	r20,16(sp)
 2008314:	ace7883a 	add	r19,r21,r19
 2008318:	dc800215 	stw	r18,8(sp)
 200831c:	dc400115 	stw	r17,4(sp)
 2008320:	dc000015 	stw	r16,0(sp)
 2008324:	dfc00615 	stw	ra,24(sp)
 2008328:	9c000044 	addi	r16,r19,1
 200832c:	2823883a 	mov	r17,r5
 2008330:	3029883a 	mov	r20,r6
 2008334:	2025883a 	mov	r18,r4
 2008338:	29400117 	ldw	r5,4(r5)
 200833c:	1400030e 	bge	r2,r16,200834c <__lshift+0x54>
 2008340:	1085883a 	add	r2,r2,r2
 2008344:	29400044 	addi	r5,r5,1
 2008348:	143ffd16 	blt	r2,r16,2008340 <__alt_data_end+0xfe008340>
 200834c:	9009883a 	mov	r4,r18
 2008350:	2007abc0 	call	2007abc <_Balloc>
 2008354:	10c00504 	addi	r3,r2,20
 2008358:	0540070e 	bge	zero,r21,2008378 <__lshift+0x80>
 200835c:	ad6b883a 	add	r21,r21,r21
 2008360:	ad6b883a 	add	r21,r21,r21
 2008364:	1809883a 	mov	r4,r3
 2008368:	1d47883a 	add	r3,r3,r21
 200836c:	20000015 	stw	zero,0(r4)
 2008370:	21000104 	addi	r4,r4,4
 2008374:	193ffd1e 	bne	r3,r4,200836c <__alt_data_end+0xfe00836c>
 2008378:	8a000417 	ldw	r8,16(r17)
 200837c:	89000504 	addi	r4,r17,20
 2008380:	a18007cc 	andi	r6,r20,31
 2008384:	4211883a 	add	r8,r8,r8
 2008388:	4211883a 	add	r8,r8,r8
 200838c:	2211883a 	add	r8,r4,r8
 2008390:	30002326 	beq	r6,zero,2008420 <__lshift+0x128>
 2008394:	02400804 	movi	r9,32
 2008398:	4993c83a 	sub	r9,r9,r6
 200839c:	000b883a 	mov	r5,zero
 20083a0:	21c00017 	ldw	r7,0(r4)
 20083a4:	1815883a 	mov	r10,r3
 20083a8:	18c00104 	addi	r3,r3,4
 20083ac:	398e983a 	sll	r7,r7,r6
 20083b0:	21000104 	addi	r4,r4,4
 20083b4:	394ab03a 	or	r5,r7,r5
 20083b8:	197fff15 	stw	r5,-4(r3)
 20083bc:	217fff17 	ldw	r5,-4(r4)
 20083c0:	2a4ad83a 	srl	r5,r5,r9
 20083c4:	223ff636 	bltu	r4,r8,20083a0 <__alt_data_end+0xfe0083a0>
 20083c8:	51400115 	stw	r5,4(r10)
 20083cc:	28001a1e 	bne	r5,zero,2008438 <__lshift+0x140>
 20083d0:	843fffc4 	addi	r16,r16,-1
 20083d4:	14000415 	stw	r16,16(r2)
 20083d8:	88000826 	beq	r17,zero,20083fc <__lshift+0x104>
 20083dc:	89000117 	ldw	r4,4(r17)
 20083e0:	90c01317 	ldw	r3,76(r18)
 20083e4:	2109883a 	add	r4,r4,r4
 20083e8:	2109883a 	add	r4,r4,r4
 20083ec:	1907883a 	add	r3,r3,r4
 20083f0:	19000017 	ldw	r4,0(r3)
 20083f4:	89000015 	stw	r4,0(r17)
 20083f8:	1c400015 	stw	r17,0(r3)
 20083fc:	dfc00617 	ldw	ra,24(sp)
 2008400:	dd400517 	ldw	r21,20(sp)
 2008404:	dd000417 	ldw	r20,16(sp)
 2008408:	dcc00317 	ldw	r19,12(sp)
 200840c:	dc800217 	ldw	r18,8(sp)
 2008410:	dc400117 	ldw	r17,4(sp)
 2008414:	dc000017 	ldw	r16,0(sp)
 2008418:	dec00704 	addi	sp,sp,28
 200841c:	f800283a 	ret
 2008420:	21400017 	ldw	r5,0(r4)
 2008424:	18c00104 	addi	r3,r3,4
 2008428:	21000104 	addi	r4,r4,4
 200842c:	197fff15 	stw	r5,-4(r3)
 2008430:	223ffb36 	bltu	r4,r8,2008420 <__alt_data_end+0xfe008420>
 2008434:	003fe606 	br	20083d0 <__alt_data_end+0xfe0083d0>
 2008438:	9c000084 	addi	r16,r19,2
 200843c:	003fe406 	br	20083d0 <__alt_data_end+0xfe0083d0>

02008440 <__mcmp>:
 2008440:	20800417 	ldw	r2,16(r4)
 2008444:	28c00417 	ldw	r3,16(r5)
 2008448:	10c5c83a 	sub	r2,r2,r3
 200844c:	1000111e 	bne	r2,zero,2008494 <__mcmp+0x54>
 2008450:	18c7883a 	add	r3,r3,r3
 2008454:	18c7883a 	add	r3,r3,r3
 2008458:	21000504 	addi	r4,r4,20
 200845c:	29400504 	addi	r5,r5,20
 2008460:	20c5883a 	add	r2,r4,r3
 2008464:	28cb883a 	add	r5,r5,r3
 2008468:	00000106 	br	2008470 <__mcmp+0x30>
 200846c:	20800a2e 	bgeu	r4,r2,2008498 <__mcmp+0x58>
 2008470:	10bfff04 	addi	r2,r2,-4
 2008474:	297fff04 	addi	r5,r5,-4
 2008478:	11800017 	ldw	r6,0(r2)
 200847c:	28c00017 	ldw	r3,0(r5)
 2008480:	30fffa26 	beq	r6,r3,200846c <__alt_data_end+0xfe00846c>
 2008484:	30c00236 	bltu	r6,r3,2008490 <__mcmp+0x50>
 2008488:	00800044 	movi	r2,1
 200848c:	f800283a 	ret
 2008490:	00bfffc4 	movi	r2,-1
 2008494:	f800283a 	ret
 2008498:	0005883a 	mov	r2,zero
 200849c:	f800283a 	ret

020084a0 <__mdiff>:
 20084a0:	28c00417 	ldw	r3,16(r5)
 20084a4:	30800417 	ldw	r2,16(r6)
 20084a8:	defffa04 	addi	sp,sp,-24
 20084ac:	dcc00315 	stw	r19,12(sp)
 20084b0:	dc800215 	stw	r18,8(sp)
 20084b4:	dfc00515 	stw	ra,20(sp)
 20084b8:	dd000415 	stw	r20,16(sp)
 20084bc:	dc400115 	stw	r17,4(sp)
 20084c0:	dc000015 	stw	r16,0(sp)
 20084c4:	1887c83a 	sub	r3,r3,r2
 20084c8:	2825883a 	mov	r18,r5
 20084cc:	3027883a 	mov	r19,r6
 20084d0:	1800141e 	bne	r3,zero,2008524 <__mdiff+0x84>
 20084d4:	1085883a 	add	r2,r2,r2
 20084d8:	1085883a 	add	r2,r2,r2
 20084dc:	2a000504 	addi	r8,r5,20
 20084e0:	34000504 	addi	r16,r6,20
 20084e4:	4087883a 	add	r3,r8,r2
 20084e8:	8085883a 	add	r2,r16,r2
 20084ec:	00000106 	br	20084f4 <__mdiff+0x54>
 20084f0:	40c0592e 	bgeu	r8,r3,2008658 <__mdiff+0x1b8>
 20084f4:	18ffff04 	addi	r3,r3,-4
 20084f8:	10bfff04 	addi	r2,r2,-4
 20084fc:	19c00017 	ldw	r7,0(r3)
 2008500:	11400017 	ldw	r5,0(r2)
 2008504:	397ffa26 	beq	r7,r5,20084f0 <__alt_data_end+0xfe0084f0>
 2008508:	3940592e 	bgeu	r7,r5,2008670 <__mdiff+0x1d0>
 200850c:	9005883a 	mov	r2,r18
 2008510:	4023883a 	mov	r17,r8
 2008514:	9825883a 	mov	r18,r19
 2008518:	05000044 	movi	r20,1
 200851c:	1027883a 	mov	r19,r2
 2008520:	00000406 	br	2008534 <__mdiff+0x94>
 2008524:	18005616 	blt	r3,zero,2008680 <__mdiff+0x1e0>
 2008528:	34400504 	addi	r17,r6,20
 200852c:	2c000504 	addi	r16,r5,20
 2008530:	0029883a 	mov	r20,zero
 2008534:	91400117 	ldw	r5,4(r18)
 2008538:	2007abc0 	call	2007abc <_Balloc>
 200853c:	92400417 	ldw	r9,16(r18)
 2008540:	9b000417 	ldw	r12,16(r19)
 2008544:	12c00504 	addi	r11,r2,20
 2008548:	4a51883a 	add	r8,r9,r9
 200854c:	6319883a 	add	r12,r12,r12
 2008550:	4211883a 	add	r8,r8,r8
 2008554:	6319883a 	add	r12,r12,r12
 2008558:	15000315 	stw	r20,12(r2)
 200855c:	8211883a 	add	r8,r16,r8
 2008560:	8b19883a 	add	r12,r17,r12
 2008564:	0007883a 	mov	r3,zero
 2008568:	81400017 	ldw	r5,0(r16)
 200856c:	89c00017 	ldw	r7,0(r17)
 2008570:	59800104 	addi	r6,r11,4
 2008574:	293fffcc 	andi	r4,r5,65535
 2008578:	20c7883a 	add	r3,r4,r3
 200857c:	393fffcc 	andi	r4,r7,65535
 2008580:	1909c83a 	sub	r4,r3,r4
 2008584:	280ad43a 	srli	r5,r5,16
 2008588:	380ed43a 	srli	r7,r7,16
 200858c:	2007d43a 	srai	r3,r4,16
 2008590:	213fffcc 	andi	r4,r4,65535
 2008594:	29cbc83a 	sub	r5,r5,r7
 2008598:	28c7883a 	add	r3,r5,r3
 200859c:	180a943a 	slli	r5,r3,16
 20085a0:	8c400104 	addi	r17,r17,4
 20085a4:	84000104 	addi	r16,r16,4
 20085a8:	2908b03a 	or	r4,r5,r4
 20085ac:	59000015 	stw	r4,0(r11)
 20085b0:	1807d43a 	srai	r3,r3,16
 20085b4:	3015883a 	mov	r10,r6
 20085b8:	3017883a 	mov	r11,r6
 20085bc:	8b3fea36 	bltu	r17,r12,2008568 <__alt_data_end+0xfe008568>
 20085c0:	8200162e 	bgeu	r16,r8,200861c <__mdiff+0x17c>
 20085c4:	8017883a 	mov	r11,r16
 20085c8:	59400017 	ldw	r5,0(r11)
 20085cc:	31800104 	addi	r6,r6,4
 20085d0:	5ac00104 	addi	r11,r11,4
 20085d4:	293fffcc 	andi	r4,r5,65535
 20085d8:	20c7883a 	add	r3,r4,r3
 20085dc:	280ed43a 	srli	r7,r5,16
 20085e0:	180bd43a 	srai	r5,r3,16
 20085e4:	193fffcc 	andi	r4,r3,65535
 20085e8:	3947883a 	add	r3,r7,r5
 20085ec:	180a943a 	slli	r5,r3,16
 20085f0:	1807d43a 	srai	r3,r3,16
 20085f4:	2908b03a 	or	r4,r5,r4
 20085f8:	313fff15 	stw	r4,-4(r6)
 20085fc:	5a3ff236 	bltu	r11,r8,20085c8 <__alt_data_end+0xfe0085c8>
 2008600:	0406303a 	nor	r3,zero,r16
 2008604:	1a07883a 	add	r3,r3,r8
 2008608:	1806d0ba 	srli	r3,r3,2
 200860c:	18c00044 	addi	r3,r3,1
 2008610:	18c7883a 	add	r3,r3,r3
 2008614:	18c7883a 	add	r3,r3,r3
 2008618:	50d5883a 	add	r10,r10,r3
 200861c:	50ffff04 	addi	r3,r10,-4
 2008620:	2000041e 	bne	r4,zero,2008634 <__mdiff+0x194>
 2008624:	18ffff04 	addi	r3,r3,-4
 2008628:	19000017 	ldw	r4,0(r3)
 200862c:	4a7fffc4 	addi	r9,r9,-1
 2008630:	203ffc26 	beq	r4,zero,2008624 <__alt_data_end+0xfe008624>
 2008634:	12400415 	stw	r9,16(r2)
 2008638:	dfc00517 	ldw	ra,20(sp)
 200863c:	dd000417 	ldw	r20,16(sp)
 2008640:	dcc00317 	ldw	r19,12(sp)
 2008644:	dc800217 	ldw	r18,8(sp)
 2008648:	dc400117 	ldw	r17,4(sp)
 200864c:	dc000017 	ldw	r16,0(sp)
 2008650:	dec00604 	addi	sp,sp,24
 2008654:	f800283a 	ret
 2008658:	000b883a 	mov	r5,zero
 200865c:	2007abc0 	call	2007abc <_Balloc>
 2008660:	00c00044 	movi	r3,1
 2008664:	10c00415 	stw	r3,16(r2)
 2008668:	10000515 	stw	zero,20(r2)
 200866c:	003ff206 	br	2008638 <__alt_data_end+0xfe008638>
 2008670:	8023883a 	mov	r17,r16
 2008674:	0029883a 	mov	r20,zero
 2008678:	4021883a 	mov	r16,r8
 200867c:	003fad06 	br	2008534 <__alt_data_end+0xfe008534>
 2008680:	9005883a 	mov	r2,r18
 2008684:	94400504 	addi	r17,r18,20
 2008688:	9c000504 	addi	r16,r19,20
 200868c:	9825883a 	mov	r18,r19
 2008690:	05000044 	movi	r20,1
 2008694:	1027883a 	mov	r19,r2
 2008698:	003fa606 	br	2008534 <__alt_data_end+0xfe008534>

0200869c <__ulp>:
 200869c:	295ffc2c 	andhi	r5,r5,32752
 20086a0:	00bf3034 	movhi	r2,64704
 20086a4:	2887883a 	add	r3,r5,r2
 20086a8:	00c0020e 	bge	zero,r3,20086b4 <__ulp+0x18>
 20086ac:	0005883a 	mov	r2,zero
 20086b0:	f800283a 	ret
 20086b4:	00c7c83a 	sub	r3,zero,r3
 20086b8:	1807d53a 	srai	r3,r3,20
 20086bc:	008004c4 	movi	r2,19
 20086c0:	10c00b0e 	bge	r2,r3,20086f0 <__ulp+0x54>
 20086c4:	18bffb04 	addi	r2,r3,-20
 20086c8:	01000784 	movi	r4,30
 20086cc:	0007883a 	mov	r3,zero
 20086d0:	20800516 	blt	r4,r2,20086e8 <__ulp+0x4c>
 20086d4:	010007c4 	movi	r4,31
 20086d8:	2089c83a 	sub	r4,r4,r2
 20086dc:	00800044 	movi	r2,1
 20086e0:	1104983a 	sll	r2,r2,r4
 20086e4:	f800283a 	ret
 20086e8:	00800044 	movi	r2,1
 20086ec:	f800283a 	ret
 20086f0:	01400234 	movhi	r5,8
 20086f4:	28c7d83a 	sra	r3,r5,r3
 20086f8:	0005883a 	mov	r2,zero
 20086fc:	f800283a 	ret

02008700 <__b2d>:
 2008700:	defffa04 	addi	sp,sp,-24
 2008704:	dc000015 	stw	r16,0(sp)
 2008708:	24000417 	ldw	r16,16(r4)
 200870c:	dc400115 	stw	r17,4(sp)
 2008710:	24400504 	addi	r17,r4,20
 2008714:	8421883a 	add	r16,r16,r16
 2008718:	8421883a 	add	r16,r16,r16
 200871c:	8c21883a 	add	r16,r17,r16
 2008720:	dc800215 	stw	r18,8(sp)
 2008724:	84bfff17 	ldw	r18,-4(r16)
 2008728:	dd000415 	stw	r20,16(sp)
 200872c:	dcc00315 	stw	r19,12(sp)
 2008730:	9009883a 	mov	r4,r18
 2008734:	2829883a 	mov	r20,r5
 2008738:	dfc00515 	stw	ra,20(sp)
 200873c:	2007dd80 	call	2007dd8 <__hi0bits>
 2008740:	00c00804 	movi	r3,32
 2008744:	1889c83a 	sub	r4,r3,r2
 2008748:	a1000015 	stw	r4,0(r20)
 200874c:	01000284 	movi	r4,10
 2008750:	84ffff04 	addi	r19,r16,-4
 2008754:	20801216 	blt	r4,r2,20087a0 <__b2d+0xa0>
 2008758:	018002c4 	movi	r6,11
 200875c:	308dc83a 	sub	r6,r6,r2
 2008760:	9186d83a 	srl	r3,r18,r6
 2008764:	18cffc34 	orhi	r3,r3,16368
 2008768:	8cc0212e 	bgeu	r17,r19,20087f0 <__b2d+0xf0>
 200876c:	813ffe17 	ldw	r4,-8(r16)
 2008770:	218cd83a 	srl	r6,r4,r6
 2008774:	10800544 	addi	r2,r2,21
 2008778:	9084983a 	sll	r2,r18,r2
 200877c:	1184b03a 	or	r2,r2,r6
 2008780:	dfc00517 	ldw	ra,20(sp)
 2008784:	dd000417 	ldw	r20,16(sp)
 2008788:	dcc00317 	ldw	r19,12(sp)
 200878c:	dc800217 	ldw	r18,8(sp)
 2008790:	dc400117 	ldw	r17,4(sp)
 2008794:	dc000017 	ldw	r16,0(sp)
 2008798:	dec00604 	addi	sp,sp,24
 200879c:	f800283a 	ret
 20087a0:	8cc00f2e 	bgeu	r17,r19,20087e0 <__b2d+0xe0>
 20087a4:	117ffd44 	addi	r5,r2,-11
 20087a8:	80bffe17 	ldw	r2,-8(r16)
 20087ac:	28000e26 	beq	r5,zero,20087e8 <__b2d+0xe8>
 20087b0:	1949c83a 	sub	r4,r3,r5
 20087b4:	9164983a 	sll	r18,r18,r5
 20087b8:	1106d83a 	srl	r3,r2,r4
 20087bc:	81bffe04 	addi	r6,r16,-8
 20087c0:	948ffc34 	orhi	r18,r18,16368
 20087c4:	90c6b03a 	or	r3,r18,r3
 20087c8:	89800e2e 	bgeu	r17,r6,2008804 <__b2d+0x104>
 20087cc:	81bffd17 	ldw	r6,-12(r16)
 20087d0:	1144983a 	sll	r2,r2,r5
 20087d4:	310ad83a 	srl	r5,r6,r4
 20087d8:	2884b03a 	or	r2,r5,r2
 20087dc:	003fe806 	br	2008780 <__alt_data_end+0xfe008780>
 20087e0:	10bffd44 	addi	r2,r2,-11
 20087e4:	1000041e 	bne	r2,zero,20087f8 <__b2d+0xf8>
 20087e8:	90cffc34 	orhi	r3,r18,16368
 20087ec:	003fe406 	br	2008780 <__alt_data_end+0xfe008780>
 20087f0:	000d883a 	mov	r6,zero
 20087f4:	003fdf06 	br	2008774 <__alt_data_end+0xfe008774>
 20087f8:	90a4983a 	sll	r18,r18,r2
 20087fc:	0005883a 	mov	r2,zero
 2008800:	003ff906 	br	20087e8 <__alt_data_end+0xfe0087e8>
 2008804:	1144983a 	sll	r2,r2,r5
 2008808:	003fdd06 	br	2008780 <__alt_data_end+0xfe008780>

0200880c <__d2b>:
 200880c:	defff804 	addi	sp,sp,-32
 2008810:	dc000215 	stw	r16,8(sp)
 2008814:	3021883a 	mov	r16,r6
 2008818:	dc400315 	stw	r17,12(sp)
 200881c:	8022907a 	slli	r17,r16,1
 2008820:	dd000615 	stw	r20,24(sp)
 2008824:	2829883a 	mov	r20,r5
 2008828:	01400044 	movi	r5,1
 200882c:	dcc00515 	stw	r19,20(sp)
 2008830:	dc800415 	stw	r18,16(sp)
 2008834:	dfc00715 	stw	ra,28(sp)
 2008838:	3825883a 	mov	r18,r7
 200883c:	8822d57a 	srli	r17,r17,21
 2008840:	2007abc0 	call	2007abc <_Balloc>
 2008844:	1027883a 	mov	r19,r2
 2008848:	00800434 	movhi	r2,16
 200884c:	10bfffc4 	addi	r2,r2,-1
 2008850:	808c703a 	and	r6,r16,r2
 2008854:	88000126 	beq	r17,zero,200885c <__d2b+0x50>
 2008858:	31800434 	orhi	r6,r6,16
 200885c:	d9800015 	stw	r6,0(sp)
 2008860:	a0002426 	beq	r20,zero,20088f4 <__d2b+0xe8>
 2008864:	d9000104 	addi	r4,sp,4
 2008868:	dd000115 	stw	r20,4(sp)
 200886c:	2007e400 	call	2007e40 <__lo0bits>
 2008870:	d8c00017 	ldw	r3,0(sp)
 2008874:	10002f1e 	bne	r2,zero,2008934 <__d2b+0x128>
 2008878:	d9000117 	ldw	r4,4(sp)
 200887c:	99000515 	stw	r4,20(r19)
 2008880:	1821003a 	cmpeq	r16,r3,zero
 2008884:	01000084 	movi	r4,2
 2008888:	2421c83a 	sub	r16,r4,r16
 200888c:	98c00615 	stw	r3,24(r19)
 2008890:	9c000415 	stw	r16,16(r19)
 2008894:	88001f1e 	bne	r17,zero,2008914 <__d2b+0x108>
 2008898:	10bef384 	addi	r2,r2,-1074
 200889c:	90800015 	stw	r2,0(r18)
 20088a0:	00900034 	movhi	r2,16384
 20088a4:	10bfffc4 	addi	r2,r2,-1
 20088a8:	8085883a 	add	r2,r16,r2
 20088ac:	1085883a 	add	r2,r2,r2
 20088b0:	1085883a 	add	r2,r2,r2
 20088b4:	9885883a 	add	r2,r19,r2
 20088b8:	11000517 	ldw	r4,20(r2)
 20088bc:	8020917a 	slli	r16,r16,5
 20088c0:	2007dd80 	call	2007dd8 <__hi0bits>
 20088c4:	d8c00817 	ldw	r3,32(sp)
 20088c8:	8085c83a 	sub	r2,r16,r2
 20088cc:	18800015 	stw	r2,0(r3)
 20088d0:	9805883a 	mov	r2,r19
 20088d4:	dfc00717 	ldw	ra,28(sp)
 20088d8:	dd000617 	ldw	r20,24(sp)
 20088dc:	dcc00517 	ldw	r19,20(sp)
 20088e0:	dc800417 	ldw	r18,16(sp)
 20088e4:	dc400317 	ldw	r17,12(sp)
 20088e8:	dc000217 	ldw	r16,8(sp)
 20088ec:	dec00804 	addi	sp,sp,32
 20088f0:	f800283a 	ret
 20088f4:	d809883a 	mov	r4,sp
 20088f8:	2007e400 	call	2007e40 <__lo0bits>
 20088fc:	d8c00017 	ldw	r3,0(sp)
 2008900:	04000044 	movi	r16,1
 2008904:	9c000415 	stw	r16,16(r19)
 2008908:	98c00515 	stw	r3,20(r19)
 200890c:	10800804 	addi	r2,r2,32
 2008910:	883fe126 	beq	r17,zero,2008898 <__alt_data_end+0xfe008898>
 2008914:	00c00d44 	movi	r3,53
 2008918:	8c7ef344 	addi	r17,r17,-1075
 200891c:	88a3883a 	add	r17,r17,r2
 2008920:	1885c83a 	sub	r2,r3,r2
 2008924:	d8c00817 	ldw	r3,32(sp)
 2008928:	94400015 	stw	r17,0(r18)
 200892c:	18800015 	stw	r2,0(r3)
 2008930:	003fe706 	br	20088d0 <__alt_data_end+0xfe0088d0>
 2008934:	01000804 	movi	r4,32
 2008938:	2089c83a 	sub	r4,r4,r2
 200893c:	1908983a 	sll	r4,r3,r4
 2008940:	d9400117 	ldw	r5,4(sp)
 2008944:	1886d83a 	srl	r3,r3,r2
 2008948:	2148b03a 	or	r4,r4,r5
 200894c:	99000515 	stw	r4,20(r19)
 2008950:	d8c00015 	stw	r3,0(sp)
 2008954:	003fca06 	br	2008880 <__alt_data_end+0xfe008880>

02008958 <__ratio>:
 2008958:	defff904 	addi	sp,sp,-28
 200895c:	dc400315 	stw	r17,12(sp)
 2008960:	2823883a 	mov	r17,r5
 2008964:	d9400104 	addi	r5,sp,4
 2008968:	dfc00615 	stw	ra,24(sp)
 200896c:	dcc00515 	stw	r19,20(sp)
 2008970:	dc800415 	stw	r18,16(sp)
 2008974:	2027883a 	mov	r19,r4
 2008978:	dc000215 	stw	r16,8(sp)
 200897c:	20087000 	call	2008700 <__b2d>
 2008980:	d80b883a 	mov	r5,sp
 2008984:	8809883a 	mov	r4,r17
 2008988:	1025883a 	mov	r18,r2
 200898c:	1821883a 	mov	r16,r3
 2008990:	20087000 	call	2008700 <__b2d>
 2008994:	8a000417 	ldw	r8,16(r17)
 2008998:	99000417 	ldw	r4,16(r19)
 200899c:	d9400117 	ldw	r5,4(sp)
 20089a0:	2209c83a 	sub	r4,r4,r8
 20089a4:	2010917a 	slli	r8,r4,5
 20089a8:	d9000017 	ldw	r4,0(sp)
 20089ac:	2909c83a 	sub	r4,r5,r4
 20089b0:	4109883a 	add	r4,r8,r4
 20089b4:	01000e0e 	bge	zero,r4,20089f0 <__ratio+0x98>
 20089b8:	2008953a 	slli	r4,r4,20
 20089bc:	2421883a 	add	r16,r4,r16
 20089c0:	100d883a 	mov	r6,r2
 20089c4:	180f883a 	mov	r7,r3
 20089c8:	9009883a 	mov	r4,r18
 20089cc:	800b883a 	mov	r5,r16
 20089d0:	200c4100 	call	200c410 <__divdf3>
 20089d4:	dfc00617 	ldw	ra,24(sp)
 20089d8:	dcc00517 	ldw	r19,20(sp)
 20089dc:	dc800417 	ldw	r18,16(sp)
 20089e0:	dc400317 	ldw	r17,12(sp)
 20089e4:	dc000217 	ldw	r16,8(sp)
 20089e8:	dec00704 	addi	sp,sp,28
 20089ec:	f800283a 	ret
 20089f0:	2008953a 	slli	r4,r4,20
 20089f4:	1907c83a 	sub	r3,r3,r4
 20089f8:	003ff106 	br	20089c0 <__alt_data_end+0xfe0089c0>

020089fc <_mprec_log10>:
 20089fc:	defffe04 	addi	sp,sp,-8
 2008a00:	dc000015 	stw	r16,0(sp)
 2008a04:	dfc00115 	stw	ra,4(sp)
 2008a08:	008005c4 	movi	r2,23
 2008a0c:	2021883a 	mov	r16,r4
 2008a10:	11000d0e 	bge	r2,r4,2008a48 <_mprec_log10+0x4c>
 2008a14:	0005883a 	mov	r2,zero
 2008a18:	00cffc34 	movhi	r3,16368
 2008a1c:	843fffc4 	addi	r16,r16,-1
 2008a20:	000d883a 	mov	r6,zero
 2008a24:	01d00934 	movhi	r7,16420
 2008a28:	1009883a 	mov	r4,r2
 2008a2c:	180b883a 	mov	r5,r3
 2008a30:	200d0380 	call	200d038 <__muldf3>
 2008a34:	803ff91e 	bne	r16,zero,2008a1c <__alt_data_end+0xfe008a1c>
 2008a38:	dfc00117 	ldw	ra,4(sp)
 2008a3c:	dc000017 	ldw	r16,0(sp)
 2008a40:	dec00204 	addi	sp,sp,8
 2008a44:	f800283a 	ret
 2008a48:	202090fa 	slli	r16,r4,3
 2008a4c:	00808074 	movhi	r2,513
 2008a50:	10859404 	addi	r2,r2,5712
 2008a54:	1421883a 	add	r16,r2,r16
 2008a58:	80800017 	ldw	r2,0(r16)
 2008a5c:	80c00117 	ldw	r3,4(r16)
 2008a60:	dfc00117 	ldw	ra,4(sp)
 2008a64:	dc000017 	ldw	r16,0(sp)
 2008a68:	dec00204 	addi	sp,sp,8
 2008a6c:	f800283a 	ret

02008a70 <__copybits>:
 2008a70:	297fffc4 	addi	r5,r5,-1
 2008a74:	280fd17a 	srai	r7,r5,5
 2008a78:	30c00417 	ldw	r3,16(r6)
 2008a7c:	30800504 	addi	r2,r6,20
 2008a80:	39c00044 	addi	r7,r7,1
 2008a84:	18c7883a 	add	r3,r3,r3
 2008a88:	39cf883a 	add	r7,r7,r7
 2008a8c:	18c7883a 	add	r3,r3,r3
 2008a90:	39cf883a 	add	r7,r7,r7
 2008a94:	10c7883a 	add	r3,r2,r3
 2008a98:	21cf883a 	add	r7,r4,r7
 2008a9c:	10c00d2e 	bgeu	r2,r3,2008ad4 <__copybits+0x64>
 2008aa0:	200b883a 	mov	r5,r4
 2008aa4:	12000017 	ldw	r8,0(r2)
 2008aa8:	29400104 	addi	r5,r5,4
 2008aac:	10800104 	addi	r2,r2,4
 2008ab0:	2a3fff15 	stw	r8,-4(r5)
 2008ab4:	10fffb36 	bltu	r2,r3,2008aa4 <__alt_data_end+0xfe008aa4>
 2008ab8:	1985c83a 	sub	r2,r3,r6
 2008abc:	10bffac4 	addi	r2,r2,-21
 2008ac0:	1004d0ba 	srli	r2,r2,2
 2008ac4:	10800044 	addi	r2,r2,1
 2008ac8:	1085883a 	add	r2,r2,r2
 2008acc:	1085883a 	add	r2,r2,r2
 2008ad0:	2089883a 	add	r4,r4,r2
 2008ad4:	21c0032e 	bgeu	r4,r7,2008ae4 <__copybits+0x74>
 2008ad8:	20000015 	stw	zero,0(r4)
 2008adc:	21000104 	addi	r4,r4,4
 2008ae0:	21fffd36 	bltu	r4,r7,2008ad8 <__alt_data_end+0xfe008ad8>
 2008ae4:	f800283a 	ret

02008ae8 <__any_on>:
 2008ae8:	20c00417 	ldw	r3,16(r4)
 2008aec:	2805d17a 	srai	r2,r5,5
 2008af0:	21000504 	addi	r4,r4,20
 2008af4:	18800d0e 	bge	r3,r2,2008b2c <__any_on+0x44>
 2008af8:	18c7883a 	add	r3,r3,r3
 2008afc:	18c7883a 	add	r3,r3,r3
 2008b00:	20c7883a 	add	r3,r4,r3
 2008b04:	20c0192e 	bgeu	r4,r3,2008b6c <__any_on+0x84>
 2008b08:	18bfff17 	ldw	r2,-4(r3)
 2008b0c:	18ffff04 	addi	r3,r3,-4
 2008b10:	1000041e 	bne	r2,zero,2008b24 <__any_on+0x3c>
 2008b14:	20c0142e 	bgeu	r4,r3,2008b68 <__any_on+0x80>
 2008b18:	18ffff04 	addi	r3,r3,-4
 2008b1c:	19400017 	ldw	r5,0(r3)
 2008b20:	283ffc26 	beq	r5,zero,2008b14 <__alt_data_end+0xfe008b14>
 2008b24:	00800044 	movi	r2,1
 2008b28:	f800283a 	ret
 2008b2c:	10c00a0e 	bge	r2,r3,2008b58 <__any_on+0x70>
 2008b30:	1085883a 	add	r2,r2,r2
 2008b34:	1085883a 	add	r2,r2,r2
 2008b38:	294007cc 	andi	r5,r5,31
 2008b3c:	2087883a 	add	r3,r4,r2
 2008b40:	283ff026 	beq	r5,zero,2008b04 <__alt_data_end+0xfe008b04>
 2008b44:	19800017 	ldw	r6,0(r3)
 2008b48:	3144d83a 	srl	r2,r6,r5
 2008b4c:	114a983a 	sll	r5,r2,r5
 2008b50:	317ff41e 	bne	r6,r5,2008b24 <__alt_data_end+0xfe008b24>
 2008b54:	003feb06 	br	2008b04 <__alt_data_end+0xfe008b04>
 2008b58:	1085883a 	add	r2,r2,r2
 2008b5c:	1085883a 	add	r2,r2,r2
 2008b60:	2087883a 	add	r3,r4,r2
 2008b64:	003fe706 	br	2008b04 <__alt_data_end+0xfe008b04>
 2008b68:	f800283a 	ret
 2008b6c:	0005883a 	mov	r2,zero
 2008b70:	f800283a 	ret

02008b74 <_read_r>:
 2008b74:	defffd04 	addi	sp,sp,-12
 2008b78:	2805883a 	mov	r2,r5
 2008b7c:	dc000015 	stw	r16,0(sp)
 2008b80:	04008074 	movhi	r16,513
 2008b84:	dc400115 	stw	r17,4(sp)
 2008b88:	300b883a 	mov	r5,r6
 2008b8c:	84140c04 	addi	r16,r16,20528
 2008b90:	2023883a 	mov	r17,r4
 2008b94:	380d883a 	mov	r6,r7
 2008b98:	1009883a 	mov	r4,r2
 2008b9c:	dfc00215 	stw	ra,8(sp)
 2008ba0:	80000015 	stw	zero,0(r16)
 2008ba4:	200ecac0 	call	200ecac <read>
 2008ba8:	00ffffc4 	movi	r3,-1
 2008bac:	10c00526 	beq	r2,r3,2008bc4 <_read_r+0x50>
 2008bb0:	dfc00217 	ldw	ra,8(sp)
 2008bb4:	dc400117 	ldw	r17,4(sp)
 2008bb8:	dc000017 	ldw	r16,0(sp)
 2008bbc:	dec00304 	addi	sp,sp,12
 2008bc0:	f800283a 	ret
 2008bc4:	80c00017 	ldw	r3,0(r16)
 2008bc8:	183ff926 	beq	r3,zero,2008bb0 <__alt_data_end+0xfe008bb0>
 2008bcc:	88c00015 	stw	r3,0(r17)
 2008bd0:	003ff706 	br	2008bb0 <__alt_data_end+0xfe008bb0>

02008bd4 <_realloc_r>:
 2008bd4:	defff604 	addi	sp,sp,-40
 2008bd8:	dc800215 	stw	r18,8(sp)
 2008bdc:	dfc00915 	stw	ra,36(sp)
 2008be0:	df000815 	stw	fp,32(sp)
 2008be4:	ddc00715 	stw	r23,28(sp)
 2008be8:	dd800615 	stw	r22,24(sp)
 2008bec:	dd400515 	stw	r21,20(sp)
 2008bf0:	dd000415 	stw	r20,16(sp)
 2008bf4:	dcc00315 	stw	r19,12(sp)
 2008bf8:	dc400115 	stw	r17,4(sp)
 2008bfc:	dc000015 	stw	r16,0(sp)
 2008c00:	3025883a 	mov	r18,r6
 2008c04:	2800b726 	beq	r5,zero,2008ee4 <_realloc_r+0x310>
 2008c08:	282b883a 	mov	r21,r5
 2008c0c:	2029883a 	mov	r20,r4
 2008c10:	200e9a40 	call	200e9a4 <__malloc_lock>
 2008c14:	a8bfff17 	ldw	r2,-4(r21)
 2008c18:	043fff04 	movi	r16,-4
 2008c1c:	90c002c4 	addi	r3,r18,11
 2008c20:	01000584 	movi	r4,22
 2008c24:	acfffe04 	addi	r19,r21,-8
 2008c28:	1420703a 	and	r16,r2,r16
 2008c2c:	20c0332e 	bgeu	r4,r3,2008cfc <_realloc_r+0x128>
 2008c30:	047ffe04 	movi	r17,-8
 2008c34:	1c62703a 	and	r17,r3,r17
 2008c38:	8807883a 	mov	r3,r17
 2008c3c:	88005816 	blt	r17,zero,2008da0 <_realloc_r+0x1cc>
 2008c40:	8c805736 	bltu	r17,r18,2008da0 <_realloc_r+0x1cc>
 2008c44:	80c0300e 	bge	r16,r3,2008d08 <_realloc_r+0x134>
 2008c48:	07008074 	movhi	fp,513
 2008c4c:	e7076704 	addi	fp,fp,7580
 2008c50:	e1c00217 	ldw	r7,8(fp)
 2008c54:	9c09883a 	add	r4,r19,r16
 2008c58:	22000117 	ldw	r8,4(r4)
 2008c5c:	21c06326 	beq	r4,r7,2008dec <_realloc_r+0x218>
 2008c60:	017fff84 	movi	r5,-2
 2008c64:	414a703a 	and	r5,r8,r5
 2008c68:	214b883a 	add	r5,r4,r5
 2008c6c:	29800117 	ldw	r6,4(r5)
 2008c70:	3180004c 	andi	r6,r6,1
 2008c74:	30003f26 	beq	r6,zero,2008d74 <_realloc_r+0x1a0>
 2008c78:	1080004c 	andi	r2,r2,1
 2008c7c:	10008326 	beq	r2,zero,2008e8c <_realloc_r+0x2b8>
 2008c80:	900b883a 	mov	r5,r18
 2008c84:	a009883a 	mov	r4,r20
 2008c88:	20022d80 	call	20022d8 <_malloc_r>
 2008c8c:	1025883a 	mov	r18,r2
 2008c90:	10011e26 	beq	r2,zero,200910c <_realloc_r+0x538>
 2008c94:	a93fff17 	ldw	r4,-4(r21)
 2008c98:	10fffe04 	addi	r3,r2,-8
 2008c9c:	00bfff84 	movi	r2,-2
 2008ca0:	2084703a 	and	r2,r4,r2
 2008ca4:	9885883a 	add	r2,r19,r2
 2008ca8:	1880ee26 	beq	r3,r2,2009064 <_realloc_r+0x490>
 2008cac:	81bfff04 	addi	r6,r16,-4
 2008cb0:	00800904 	movi	r2,36
 2008cb4:	1180b836 	bltu	r2,r6,2008f98 <_realloc_r+0x3c4>
 2008cb8:	00c004c4 	movi	r3,19
 2008cbc:	19809636 	bltu	r3,r6,2008f18 <_realloc_r+0x344>
 2008cc0:	9005883a 	mov	r2,r18
 2008cc4:	a807883a 	mov	r3,r21
 2008cc8:	19000017 	ldw	r4,0(r3)
 2008ccc:	11000015 	stw	r4,0(r2)
 2008cd0:	19000117 	ldw	r4,4(r3)
 2008cd4:	11000115 	stw	r4,4(r2)
 2008cd8:	18c00217 	ldw	r3,8(r3)
 2008cdc:	10c00215 	stw	r3,8(r2)
 2008ce0:	a80b883a 	mov	r5,r21
 2008ce4:	a009883a 	mov	r4,r20
 2008ce8:	20016700 	call	2001670 <_free_r>
 2008cec:	a009883a 	mov	r4,r20
 2008cf0:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2008cf4:	9005883a 	mov	r2,r18
 2008cf8:	00001206 	br	2008d44 <_realloc_r+0x170>
 2008cfc:	00c00404 	movi	r3,16
 2008d00:	1823883a 	mov	r17,r3
 2008d04:	003fce06 	br	2008c40 <__alt_data_end+0xfe008c40>
 2008d08:	a825883a 	mov	r18,r21
 2008d0c:	8445c83a 	sub	r2,r16,r17
 2008d10:	00c003c4 	movi	r3,15
 2008d14:	18802636 	bltu	r3,r2,2008db0 <_realloc_r+0x1dc>
 2008d18:	99800117 	ldw	r6,4(r19)
 2008d1c:	9c07883a 	add	r3,r19,r16
 2008d20:	3180004c 	andi	r6,r6,1
 2008d24:	3420b03a 	or	r16,r6,r16
 2008d28:	9c000115 	stw	r16,4(r19)
 2008d2c:	18800117 	ldw	r2,4(r3)
 2008d30:	10800054 	ori	r2,r2,1
 2008d34:	18800115 	stw	r2,4(r3)
 2008d38:	a009883a 	mov	r4,r20
 2008d3c:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2008d40:	9005883a 	mov	r2,r18
 2008d44:	dfc00917 	ldw	ra,36(sp)
 2008d48:	df000817 	ldw	fp,32(sp)
 2008d4c:	ddc00717 	ldw	r23,28(sp)
 2008d50:	dd800617 	ldw	r22,24(sp)
 2008d54:	dd400517 	ldw	r21,20(sp)
 2008d58:	dd000417 	ldw	r20,16(sp)
 2008d5c:	dcc00317 	ldw	r19,12(sp)
 2008d60:	dc800217 	ldw	r18,8(sp)
 2008d64:	dc400117 	ldw	r17,4(sp)
 2008d68:	dc000017 	ldw	r16,0(sp)
 2008d6c:	dec00a04 	addi	sp,sp,40
 2008d70:	f800283a 	ret
 2008d74:	017fff04 	movi	r5,-4
 2008d78:	414a703a 	and	r5,r8,r5
 2008d7c:	814d883a 	add	r6,r16,r5
 2008d80:	30c01f16 	blt	r6,r3,2008e00 <_realloc_r+0x22c>
 2008d84:	20800317 	ldw	r2,12(r4)
 2008d88:	20c00217 	ldw	r3,8(r4)
 2008d8c:	a825883a 	mov	r18,r21
 2008d90:	3021883a 	mov	r16,r6
 2008d94:	18800315 	stw	r2,12(r3)
 2008d98:	10c00215 	stw	r3,8(r2)
 2008d9c:	003fdb06 	br	2008d0c <__alt_data_end+0xfe008d0c>
 2008da0:	00800304 	movi	r2,12
 2008da4:	a0800015 	stw	r2,0(r20)
 2008da8:	0005883a 	mov	r2,zero
 2008dac:	003fe506 	br	2008d44 <__alt_data_end+0xfe008d44>
 2008db0:	98c00117 	ldw	r3,4(r19)
 2008db4:	9c4b883a 	add	r5,r19,r17
 2008db8:	11000054 	ori	r4,r2,1
 2008dbc:	18c0004c 	andi	r3,r3,1
 2008dc0:	1c62b03a 	or	r17,r3,r17
 2008dc4:	9c400115 	stw	r17,4(r19)
 2008dc8:	29000115 	stw	r4,4(r5)
 2008dcc:	2885883a 	add	r2,r5,r2
 2008dd0:	10c00117 	ldw	r3,4(r2)
 2008dd4:	29400204 	addi	r5,r5,8
 2008dd8:	a009883a 	mov	r4,r20
 2008ddc:	18c00054 	ori	r3,r3,1
 2008de0:	10c00115 	stw	r3,4(r2)
 2008de4:	20016700 	call	2001670 <_free_r>
 2008de8:	003fd306 	br	2008d38 <__alt_data_end+0xfe008d38>
 2008dec:	017fff04 	movi	r5,-4
 2008df0:	414a703a 	and	r5,r8,r5
 2008df4:	89800404 	addi	r6,r17,16
 2008df8:	8151883a 	add	r8,r16,r5
 2008dfc:	4180590e 	bge	r8,r6,2008f64 <_realloc_r+0x390>
 2008e00:	1080004c 	andi	r2,r2,1
 2008e04:	103f9e1e 	bne	r2,zero,2008c80 <__alt_data_end+0xfe008c80>
 2008e08:	adbffe17 	ldw	r22,-8(r21)
 2008e0c:	00bfff04 	movi	r2,-4
 2008e10:	9dadc83a 	sub	r22,r19,r22
 2008e14:	b1800117 	ldw	r6,4(r22)
 2008e18:	3084703a 	and	r2,r6,r2
 2008e1c:	20002026 	beq	r4,zero,2008ea0 <_realloc_r+0x2cc>
 2008e20:	80af883a 	add	r23,r16,r2
 2008e24:	b96f883a 	add	r23,r23,r5
 2008e28:	21c05f26 	beq	r4,r7,2008fa8 <_realloc_r+0x3d4>
 2008e2c:	b8c01c16 	blt	r23,r3,2008ea0 <_realloc_r+0x2cc>
 2008e30:	20800317 	ldw	r2,12(r4)
 2008e34:	20c00217 	ldw	r3,8(r4)
 2008e38:	81bfff04 	addi	r6,r16,-4
 2008e3c:	01000904 	movi	r4,36
 2008e40:	18800315 	stw	r2,12(r3)
 2008e44:	10c00215 	stw	r3,8(r2)
 2008e48:	b0c00217 	ldw	r3,8(r22)
 2008e4c:	b0800317 	ldw	r2,12(r22)
 2008e50:	b4800204 	addi	r18,r22,8
 2008e54:	18800315 	stw	r2,12(r3)
 2008e58:	10c00215 	stw	r3,8(r2)
 2008e5c:	21801b36 	bltu	r4,r6,2008ecc <_realloc_r+0x2f8>
 2008e60:	008004c4 	movi	r2,19
 2008e64:	1180352e 	bgeu	r2,r6,2008f3c <_realloc_r+0x368>
 2008e68:	a8800017 	ldw	r2,0(r21)
 2008e6c:	b0800215 	stw	r2,8(r22)
 2008e70:	a8800117 	ldw	r2,4(r21)
 2008e74:	b0800315 	stw	r2,12(r22)
 2008e78:	008006c4 	movi	r2,27
 2008e7c:	11807f36 	bltu	r2,r6,200907c <_realloc_r+0x4a8>
 2008e80:	b0800404 	addi	r2,r22,16
 2008e84:	ad400204 	addi	r21,r21,8
 2008e88:	00002d06 	br	2008f40 <_realloc_r+0x36c>
 2008e8c:	adbffe17 	ldw	r22,-8(r21)
 2008e90:	00bfff04 	movi	r2,-4
 2008e94:	9dadc83a 	sub	r22,r19,r22
 2008e98:	b1000117 	ldw	r4,4(r22)
 2008e9c:	2084703a 	and	r2,r4,r2
 2008ea0:	b03f7726 	beq	r22,zero,2008c80 <__alt_data_end+0xfe008c80>
 2008ea4:	80af883a 	add	r23,r16,r2
 2008ea8:	b8ff7516 	blt	r23,r3,2008c80 <__alt_data_end+0xfe008c80>
 2008eac:	b0800317 	ldw	r2,12(r22)
 2008eb0:	b0c00217 	ldw	r3,8(r22)
 2008eb4:	81bfff04 	addi	r6,r16,-4
 2008eb8:	01000904 	movi	r4,36
 2008ebc:	18800315 	stw	r2,12(r3)
 2008ec0:	10c00215 	stw	r3,8(r2)
 2008ec4:	b4800204 	addi	r18,r22,8
 2008ec8:	21bfe52e 	bgeu	r4,r6,2008e60 <__alt_data_end+0xfe008e60>
 2008ecc:	a80b883a 	mov	r5,r21
 2008ed0:	9009883a 	mov	r4,r18
 2008ed4:	20079600 	call	2007960 <memmove>
 2008ed8:	b821883a 	mov	r16,r23
 2008edc:	b027883a 	mov	r19,r22
 2008ee0:	003f8a06 	br	2008d0c <__alt_data_end+0xfe008d0c>
 2008ee4:	300b883a 	mov	r5,r6
 2008ee8:	dfc00917 	ldw	ra,36(sp)
 2008eec:	df000817 	ldw	fp,32(sp)
 2008ef0:	ddc00717 	ldw	r23,28(sp)
 2008ef4:	dd800617 	ldw	r22,24(sp)
 2008ef8:	dd400517 	ldw	r21,20(sp)
 2008efc:	dd000417 	ldw	r20,16(sp)
 2008f00:	dcc00317 	ldw	r19,12(sp)
 2008f04:	dc800217 	ldw	r18,8(sp)
 2008f08:	dc400117 	ldw	r17,4(sp)
 2008f0c:	dc000017 	ldw	r16,0(sp)
 2008f10:	dec00a04 	addi	sp,sp,40
 2008f14:	20022d81 	jmpi	20022d8 <_malloc_r>
 2008f18:	a8c00017 	ldw	r3,0(r21)
 2008f1c:	90c00015 	stw	r3,0(r18)
 2008f20:	a8c00117 	ldw	r3,4(r21)
 2008f24:	90c00115 	stw	r3,4(r18)
 2008f28:	00c006c4 	movi	r3,27
 2008f2c:	19804536 	bltu	r3,r6,2009044 <_realloc_r+0x470>
 2008f30:	90800204 	addi	r2,r18,8
 2008f34:	a8c00204 	addi	r3,r21,8
 2008f38:	003f6306 	br	2008cc8 <__alt_data_end+0xfe008cc8>
 2008f3c:	9005883a 	mov	r2,r18
 2008f40:	a8c00017 	ldw	r3,0(r21)
 2008f44:	b821883a 	mov	r16,r23
 2008f48:	b027883a 	mov	r19,r22
 2008f4c:	10c00015 	stw	r3,0(r2)
 2008f50:	a8c00117 	ldw	r3,4(r21)
 2008f54:	10c00115 	stw	r3,4(r2)
 2008f58:	a8c00217 	ldw	r3,8(r21)
 2008f5c:	10c00215 	stw	r3,8(r2)
 2008f60:	003f6a06 	br	2008d0c <__alt_data_end+0xfe008d0c>
 2008f64:	9c67883a 	add	r19,r19,r17
 2008f68:	4445c83a 	sub	r2,r8,r17
 2008f6c:	e4c00215 	stw	r19,8(fp)
 2008f70:	10800054 	ori	r2,r2,1
 2008f74:	98800115 	stw	r2,4(r19)
 2008f78:	a8bfff17 	ldw	r2,-4(r21)
 2008f7c:	a009883a 	mov	r4,r20
 2008f80:	1080004c 	andi	r2,r2,1
 2008f84:	1462b03a 	or	r17,r2,r17
 2008f88:	ac7fff15 	stw	r17,-4(r21)
 2008f8c:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2008f90:	a805883a 	mov	r2,r21
 2008f94:	003f6b06 	br	2008d44 <__alt_data_end+0xfe008d44>
 2008f98:	a80b883a 	mov	r5,r21
 2008f9c:	9009883a 	mov	r4,r18
 2008fa0:	20079600 	call	2007960 <memmove>
 2008fa4:	003f4e06 	br	2008ce0 <__alt_data_end+0xfe008ce0>
 2008fa8:	89000404 	addi	r4,r17,16
 2008fac:	b93fbc16 	blt	r23,r4,2008ea0 <__alt_data_end+0xfe008ea0>
 2008fb0:	b0800317 	ldw	r2,12(r22)
 2008fb4:	b0c00217 	ldw	r3,8(r22)
 2008fb8:	81bfff04 	addi	r6,r16,-4
 2008fbc:	01000904 	movi	r4,36
 2008fc0:	18800315 	stw	r2,12(r3)
 2008fc4:	10c00215 	stw	r3,8(r2)
 2008fc8:	b4800204 	addi	r18,r22,8
 2008fcc:	21804336 	bltu	r4,r6,20090dc <_realloc_r+0x508>
 2008fd0:	008004c4 	movi	r2,19
 2008fd4:	11803f2e 	bgeu	r2,r6,20090d4 <_realloc_r+0x500>
 2008fd8:	a8800017 	ldw	r2,0(r21)
 2008fdc:	b0800215 	stw	r2,8(r22)
 2008fe0:	a8800117 	ldw	r2,4(r21)
 2008fe4:	b0800315 	stw	r2,12(r22)
 2008fe8:	008006c4 	movi	r2,27
 2008fec:	11803f36 	bltu	r2,r6,20090ec <_realloc_r+0x518>
 2008ff0:	b0800404 	addi	r2,r22,16
 2008ff4:	ad400204 	addi	r21,r21,8
 2008ff8:	a8c00017 	ldw	r3,0(r21)
 2008ffc:	10c00015 	stw	r3,0(r2)
 2009000:	a8c00117 	ldw	r3,4(r21)
 2009004:	10c00115 	stw	r3,4(r2)
 2009008:	a8c00217 	ldw	r3,8(r21)
 200900c:	10c00215 	stw	r3,8(r2)
 2009010:	b447883a 	add	r3,r22,r17
 2009014:	bc45c83a 	sub	r2,r23,r17
 2009018:	e0c00215 	stw	r3,8(fp)
 200901c:	10800054 	ori	r2,r2,1
 2009020:	18800115 	stw	r2,4(r3)
 2009024:	b0800117 	ldw	r2,4(r22)
 2009028:	a009883a 	mov	r4,r20
 200902c:	1080004c 	andi	r2,r2,1
 2009030:	1462b03a 	or	r17,r2,r17
 2009034:	b4400115 	stw	r17,4(r22)
 2009038:	200e9c80 	call	200e9c8 <__malloc_unlock>
 200903c:	9005883a 	mov	r2,r18
 2009040:	003f4006 	br	2008d44 <__alt_data_end+0xfe008d44>
 2009044:	a8c00217 	ldw	r3,8(r21)
 2009048:	90c00215 	stw	r3,8(r18)
 200904c:	a8c00317 	ldw	r3,12(r21)
 2009050:	90c00315 	stw	r3,12(r18)
 2009054:	30801126 	beq	r6,r2,200909c <_realloc_r+0x4c8>
 2009058:	90800404 	addi	r2,r18,16
 200905c:	a8c00404 	addi	r3,r21,16
 2009060:	003f1906 	br	2008cc8 <__alt_data_end+0xfe008cc8>
 2009064:	90ffff17 	ldw	r3,-4(r18)
 2009068:	00bfff04 	movi	r2,-4
 200906c:	a825883a 	mov	r18,r21
 2009070:	1884703a 	and	r2,r3,r2
 2009074:	80a1883a 	add	r16,r16,r2
 2009078:	003f2406 	br	2008d0c <__alt_data_end+0xfe008d0c>
 200907c:	a8800217 	ldw	r2,8(r21)
 2009080:	b0800415 	stw	r2,16(r22)
 2009084:	a8800317 	ldw	r2,12(r21)
 2009088:	b0800515 	stw	r2,20(r22)
 200908c:	31000a26 	beq	r6,r4,20090b8 <_realloc_r+0x4e4>
 2009090:	b0800604 	addi	r2,r22,24
 2009094:	ad400404 	addi	r21,r21,16
 2009098:	003fa906 	br	2008f40 <__alt_data_end+0xfe008f40>
 200909c:	a9000417 	ldw	r4,16(r21)
 20090a0:	90800604 	addi	r2,r18,24
 20090a4:	a8c00604 	addi	r3,r21,24
 20090a8:	91000415 	stw	r4,16(r18)
 20090ac:	a9000517 	ldw	r4,20(r21)
 20090b0:	91000515 	stw	r4,20(r18)
 20090b4:	003f0406 	br	2008cc8 <__alt_data_end+0xfe008cc8>
 20090b8:	a8c00417 	ldw	r3,16(r21)
 20090bc:	ad400604 	addi	r21,r21,24
 20090c0:	b0800804 	addi	r2,r22,32
 20090c4:	b0c00615 	stw	r3,24(r22)
 20090c8:	a8ffff17 	ldw	r3,-4(r21)
 20090cc:	b0c00715 	stw	r3,28(r22)
 20090d0:	003f9b06 	br	2008f40 <__alt_data_end+0xfe008f40>
 20090d4:	9005883a 	mov	r2,r18
 20090d8:	003fc706 	br	2008ff8 <__alt_data_end+0xfe008ff8>
 20090dc:	a80b883a 	mov	r5,r21
 20090e0:	9009883a 	mov	r4,r18
 20090e4:	20079600 	call	2007960 <memmove>
 20090e8:	003fc906 	br	2009010 <__alt_data_end+0xfe009010>
 20090ec:	a8800217 	ldw	r2,8(r21)
 20090f0:	b0800415 	stw	r2,16(r22)
 20090f4:	a8800317 	ldw	r2,12(r21)
 20090f8:	b0800515 	stw	r2,20(r22)
 20090fc:	31000726 	beq	r6,r4,200911c <_realloc_r+0x548>
 2009100:	b0800604 	addi	r2,r22,24
 2009104:	ad400404 	addi	r21,r21,16
 2009108:	003fbb06 	br	2008ff8 <__alt_data_end+0xfe008ff8>
 200910c:	a009883a 	mov	r4,r20
 2009110:	200e9c80 	call	200e9c8 <__malloc_unlock>
 2009114:	0005883a 	mov	r2,zero
 2009118:	003f0a06 	br	2008d44 <__alt_data_end+0xfe008d44>
 200911c:	a8c00417 	ldw	r3,16(r21)
 2009120:	ad400604 	addi	r21,r21,24
 2009124:	b0800804 	addi	r2,r22,32
 2009128:	b0c00615 	stw	r3,24(r22)
 200912c:	a8ffff17 	ldw	r3,-4(r21)
 2009130:	b0c00715 	stw	r3,28(r22)
 2009134:	003fb006 	br	2008ff8 <__alt_data_end+0xfe008ff8>

02009138 <__fpclassifyd>:
 2009138:	00a00034 	movhi	r2,32768
 200913c:	10bfffc4 	addi	r2,r2,-1
 2009140:	2884703a 	and	r2,r5,r2
 2009144:	10000726 	beq	r2,zero,2009164 <__fpclassifyd+0x2c>
 2009148:	00fffc34 	movhi	r3,65520
 200914c:	019ff834 	movhi	r6,32736
 2009150:	28c7883a 	add	r3,r5,r3
 2009154:	31bfffc4 	addi	r6,r6,-1
 2009158:	30c00536 	bltu	r6,r3,2009170 <__fpclassifyd+0x38>
 200915c:	00800104 	movi	r2,4
 2009160:	f800283a 	ret
 2009164:	2000021e 	bne	r4,zero,2009170 <__fpclassifyd+0x38>
 2009168:	00800084 	movi	r2,2
 200916c:	f800283a 	ret
 2009170:	00dffc34 	movhi	r3,32752
 2009174:	019ff834 	movhi	r6,32736
 2009178:	28cb883a 	add	r5,r5,r3
 200917c:	31bfffc4 	addi	r6,r6,-1
 2009180:	317ff62e 	bgeu	r6,r5,200915c <__alt_data_end+0xfe00915c>
 2009184:	01400434 	movhi	r5,16
 2009188:	297fffc4 	addi	r5,r5,-1
 200918c:	28800236 	bltu	r5,r2,2009198 <__fpclassifyd+0x60>
 2009190:	008000c4 	movi	r2,3
 2009194:	f800283a 	ret
 2009198:	10c00226 	beq	r2,r3,20091a4 <__fpclassifyd+0x6c>
 200919c:	0005883a 	mov	r2,zero
 20091a0:	f800283a 	ret
 20091a4:	2005003a 	cmpeq	r2,r4,zero
 20091a8:	f800283a 	ret

020091ac <strcmp>:
 20091ac:	2144b03a 	or	r2,r4,r5
 20091b0:	108000cc 	andi	r2,r2,3
 20091b4:	1000171e 	bne	r2,zero,2009214 <strcmp+0x68>
 20091b8:	20800017 	ldw	r2,0(r4)
 20091bc:	28c00017 	ldw	r3,0(r5)
 20091c0:	10c0141e 	bne	r2,r3,2009214 <strcmp+0x68>
 20091c4:	027fbff4 	movhi	r9,65279
 20091c8:	4a7fbfc4 	addi	r9,r9,-257
 20091cc:	0086303a 	nor	r3,zero,r2
 20091d0:	02202074 	movhi	r8,32897
 20091d4:	1245883a 	add	r2,r2,r9
 20091d8:	42202004 	addi	r8,r8,-32640
 20091dc:	10c4703a 	and	r2,r2,r3
 20091e0:	1204703a 	and	r2,r2,r8
 20091e4:	10000226 	beq	r2,zero,20091f0 <strcmp+0x44>
 20091e8:	00002306 	br	2009278 <strcmp+0xcc>
 20091ec:	1000221e 	bne	r2,zero,2009278 <strcmp+0xcc>
 20091f0:	21000104 	addi	r4,r4,4
 20091f4:	20c00017 	ldw	r3,0(r4)
 20091f8:	29400104 	addi	r5,r5,4
 20091fc:	29800017 	ldw	r6,0(r5)
 2009200:	1a4f883a 	add	r7,r3,r9
 2009204:	00c4303a 	nor	r2,zero,r3
 2009208:	3884703a 	and	r2,r7,r2
 200920c:	1204703a 	and	r2,r2,r8
 2009210:	19bff626 	beq	r3,r6,20091ec <__alt_data_end+0xfe0091ec>
 2009214:	20800003 	ldbu	r2,0(r4)
 2009218:	10c03fcc 	andi	r3,r2,255
 200921c:	18c0201c 	xori	r3,r3,128
 2009220:	18ffe004 	addi	r3,r3,-128
 2009224:	18000c26 	beq	r3,zero,2009258 <strcmp+0xac>
 2009228:	29800007 	ldb	r6,0(r5)
 200922c:	19800326 	beq	r3,r6,200923c <strcmp+0x90>
 2009230:	00001306 	br	2009280 <strcmp+0xd4>
 2009234:	29800007 	ldb	r6,0(r5)
 2009238:	11800b1e 	bne	r2,r6,2009268 <strcmp+0xbc>
 200923c:	21000044 	addi	r4,r4,1
 2009240:	20c00003 	ldbu	r3,0(r4)
 2009244:	29400044 	addi	r5,r5,1
 2009248:	18803fcc 	andi	r2,r3,255
 200924c:	1080201c 	xori	r2,r2,128
 2009250:	10bfe004 	addi	r2,r2,-128
 2009254:	103ff71e 	bne	r2,zero,2009234 <__alt_data_end+0xfe009234>
 2009258:	0007883a 	mov	r3,zero
 200925c:	28800003 	ldbu	r2,0(r5)
 2009260:	1885c83a 	sub	r2,r3,r2
 2009264:	f800283a 	ret
 2009268:	28800003 	ldbu	r2,0(r5)
 200926c:	18c03fcc 	andi	r3,r3,255
 2009270:	1885c83a 	sub	r2,r3,r2
 2009274:	f800283a 	ret
 2009278:	0005883a 	mov	r2,zero
 200927c:	f800283a 	ret
 2009280:	10c03fcc 	andi	r3,r2,255
 2009284:	003ff506 	br	200925c <__alt_data_end+0xfe00925c>

02009288 <__sprint_r.part.0>:
 2009288:	28801917 	ldw	r2,100(r5)
 200928c:	defff604 	addi	sp,sp,-40
 2009290:	dd400515 	stw	r21,20(sp)
 2009294:	dfc00915 	stw	ra,36(sp)
 2009298:	df000815 	stw	fp,32(sp)
 200929c:	ddc00715 	stw	r23,28(sp)
 20092a0:	dd800615 	stw	r22,24(sp)
 20092a4:	dd000415 	stw	r20,16(sp)
 20092a8:	dcc00315 	stw	r19,12(sp)
 20092ac:	dc800215 	stw	r18,8(sp)
 20092b0:	dc400115 	stw	r17,4(sp)
 20092b4:	dc000015 	stw	r16,0(sp)
 20092b8:	1088000c 	andi	r2,r2,8192
 20092bc:	302b883a 	mov	r21,r6
 20092c0:	10002e26 	beq	r2,zero,200937c <__sprint_r.part.0+0xf4>
 20092c4:	30800217 	ldw	r2,8(r6)
 20092c8:	35800017 	ldw	r22,0(r6)
 20092cc:	10002926 	beq	r2,zero,2009374 <__sprint_r.part.0+0xec>
 20092d0:	2827883a 	mov	r19,r5
 20092d4:	2029883a 	mov	r20,r4
 20092d8:	b5c00104 	addi	r23,r22,4
 20092dc:	04bfffc4 	movi	r18,-1
 20092e0:	bc400017 	ldw	r17,0(r23)
 20092e4:	b4000017 	ldw	r16,0(r22)
 20092e8:	0039883a 	mov	fp,zero
 20092ec:	8822d0ba 	srli	r17,r17,2
 20092f0:	8800031e 	bne	r17,zero,2009300 <__sprint_r.part.0+0x78>
 20092f4:	00001806 	br	2009358 <__sprint_r.part.0+0xd0>
 20092f8:	84000104 	addi	r16,r16,4
 20092fc:	8f001526 	beq	r17,fp,2009354 <__sprint_r.part.0+0xcc>
 2009300:	81400017 	ldw	r5,0(r16)
 2009304:	980d883a 	mov	r6,r19
 2009308:	a009883a 	mov	r4,r20
 200930c:	200abc00 	call	200abc0 <_fputwc_r>
 2009310:	e7000044 	addi	fp,fp,1
 2009314:	14bff81e 	bne	r2,r18,20092f8 <__alt_data_end+0xfe0092f8>
 2009318:	9005883a 	mov	r2,r18
 200931c:	a8000215 	stw	zero,8(r21)
 2009320:	a8000115 	stw	zero,4(r21)
 2009324:	dfc00917 	ldw	ra,36(sp)
 2009328:	df000817 	ldw	fp,32(sp)
 200932c:	ddc00717 	ldw	r23,28(sp)
 2009330:	dd800617 	ldw	r22,24(sp)
 2009334:	dd400517 	ldw	r21,20(sp)
 2009338:	dd000417 	ldw	r20,16(sp)
 200933c:	dcc00317 	ldw	r19,12(sp)
 2009340:	dc800217 	ldw	r18,8(sp)
 2009344:	dc400117 	ldw	r17,4(sp)
 2009348:	dc000017 	ldw	r16,0(sp)
 200934c:	dec00a04 	addi	sp,sp,40
 2009350:	f800283a 	ret
 2009354:	a8800217 	ldw	r2,8(r21)
 2009358:	8c63883a 	add	r17,r17,r17
 200935c:	8c63883a 	add	r17,r17,r17
 2009360:	1445c83a 	sub	r2,r2,r17
 2009364:	a8800215 	stw	r2,8(r21)
 2009368:	b5800204 	addi	r22,r22,8
 200936c:	bdc00204 	addi	r23,r23,8
 2009370:	103fdb1e 	bne	r2,zero,20092e0 <__alt_data_end+0xfe0092e0>
 2009374:	0005883a 	mov	r2,zero
 2009378:	003fe806 	br	200931c <__alt_data_end+0xfe00931c>
 200937c:	20072240 	call	2007224 <__sfvwrite_r>
 2009380:	003fe606 	br	200931c <__alt_data_end+0xfe00931c>

02009384 <__sprint_r>:
 2009384:	30c00217 	ldw	r3,8(r6)
 2009388:	18000126 	beq	r3,zero,2009390 <__sprint_r+0xc>
 200938c:	20092881 	jmpi	2009288 <__sprint_r.part.0>
 2009390:	30000115 	stw	zero,4(r6)
 2009394:	0005883a 	mov	r2,zero
 2009398:	f800283a 	ret

0200939c <___vfiprintf_internal_r>:
 200939c:	deffca04 	addi	sp,sp,-216
 20093a0:	dd403115 	stw	r21,196(sp)
 20093a4:	dfc03515 	stw	ra,212(sp)
 20093a8:	df003415 	stw	fp,208(sp)
 20093ac:	ddc03315 	stw	r23,204(sp)
 20093b0:	dd803215 	stw	r22,200(sp)
 20093b4:	dd003015 	stw	r20,192(sp)
 20093b8:	dcc02f15 	stw	r19,188(sp)
 20093bc:	dc802e15 	stw	r18,184(sp)
 20093c0:	dc402d15 	stw	r17,180(sp)
 20093c4:	dc002c15 	stw	r16,176(sp)
 20093c8:	d9002115 	stw	r4,132(sp)
 20093cc:	d9402015 	stw	r5,128(sp)
 20093d0:	d9c02215 	stw	r7,136(sp)
 20093d4:	302b883a 	mov	r21,r6
 20093d8:	20000226 	beq	r4,zero,20093e4 <___vfiprintf_internal_r+0x48>
 20093dc:	20800e17 	ldw	r2,56(r4)
 20093e0:	1000cf26 	beq	r2,zero,2009720 <___vfiprintf_internal_r+0x384>
 20093e4:	d8c02017 	ldw	r3,128(sp)
 20093e8:	1880030b 	ldhu	r2,12(r3)
 20093ec:	10c8000c 	andi	r3,r2,8192
 20093f0:	1800071e 	bne	r3,zero,2009410 <___vfiprintf_internal_r+0x74>
 20093f4:	d9402017 	ldw	r5,128(sp)
 20093f8:	00f7ffc4 	movi	r3,-8193
 20093fc:	10880014 	ori	r2,r2,8192
 2009400:	29001917 	ldw	r4,100(r5)
 2009404:	2880030d 	sth	r2,12(r5)
 2009408:	20c6703a 	and	r3,r4,r3
 200940c:	28c01915 	stw	r3,100(r5)
 2009410:	10c0020c 	andi	r3,r2,8
 2009414:	1800a526 	beq	r3,zero,20096ac <___vfiprintf_internal_r+0x310>
 2009418:	d9002017 	ldw	r4,128(sp)
 200941c:	20c00417 	ldw	r3,16(r4)
 2009420:	1800a226 	beq	r3,zero,20096ac <___vfiprintf_internal_r+0x310>
 2009424:	1080068c 	andi	r2,r2,26
 2009428:	00c00284 	movi	r3,10
 200942c:	10c0a826 	beq	r2,r3,20096d0 <___vfiprintf_internal_r+0x334>
 2009430:	d9001a04 	addi	r4,sp,104
 2009434:	d94019c4 	addi	r5,sp,103
 2009438:	04808074 	movhi	r18,513
 200943c:	2145c83a 	sub	r2,r4,r5
 2009440:	9485c604 	addi	r18,r18,5912
 2009444:	d9001e15 	stw	r4,120(sp)
 2009448:	d9401f15 	stw	r5,124(sp)
 200944c:	dec01a15 	stw	sp,104(sp)
 2009450:	d8001c15 	stw	zero,112(sp)
 2009454:	d8001b15 	stw	zero,108(sp)
 2009458:	d811883a 	mov	r8,sp
 200945c:	d8002615 	stw	zero,152(sp)
 2009460:	d8002415 	stw	zero,144(sp)
 2009464:	d8802815 	stw	r2,160(sp)
 2009468:	a82d883a 	mov	r22,r21
 200946c:	b0800007 	ldb	r2,0(r22)
 2009470:	10040d26 	beq	r2,zero,200a4a8 <___vfiprintf_internal_r+0x110c>
 2009474:	00c00944 	movi	r3,37
 2009478:	b029883a 	mov	r20,r22
 200947c:	10c0021e 	bne	r2,r3,2009488 <___vfiprintf_internal_r+0xec>
 2009480:	00001606 	br	20094dc <___vfiprintf_internal_r+0x140>
 2009484:	10c00326 	beq	r2,r3,2009494 <___vfiprintf_internal_r+0xf8>
 2009488:	a5000044 	addi	r20,r20,1
 200948c:	a0800007 	ldb	r2,0(r20)
 2009490:	103ffc1e 	bne	r2,zero,2009484 <__alt_data_end+0xfe009484>
 2009494:	a5a1c83a 	sub	r16,r20,r22
 2009498:	80001026 	beq	r16,zero,20094dc <___vfiprintf_internal_r+0x140>
 200949c:	d8c01c17 	ldw	r3,112(sp)
 20094a0:	d8801b17 	ldw	r2,108(sp)
 20094a4:	45800015 	stw	r22,0(r8)
 20094a8:	80c7883a 	add	r3,r16,r3
 20094ac:	10800044 	addi	r2,r2,1
 20094b0:	44000115 	stw	r16,4(r8)
 20094b4:	d8c01c15 	stw	r3,112(sp)
 20094b8:	d8801b15 	stw	r2,108(sp)
 20094bc:	010001c4 	movi	r4,7
 20094c0:	2080750e 	bge	r4,r2,2009698 <___vfiprintf_internal_r+0x2fc>
 20094c4:	1803951e 	bne	r3,zero,200a31c <___vfiprintf_internal_r+0xf80>
 20094c8:	d8c02417 	ldw	r3,144(sp)
 20094cc:	d8001b15 	stw	zero,108(sp)
 20094d0:	d811883a 	mov	r8,sp
 20094d4:	1c07883a 	add	r3,r3,r16
 20094d8:	d8c02415 	stw	r3,144(sp)
 20094dc:	a0800007 	ldb	r2,0(r20)
 20094e0:	1002e026 	beq	r2,zero,200a064 <___vfiprintf_internal_r+0xcc8>
 20094e4:	a5800044 	addi	r22,r20,1
 20094e8:	a0c00047 	ldb	r3,1(r20)
 20094ec:	d8001d85 	stb	zero,118(sp)
 20094f0:	0027883a 	mov	r19,zero
 20094f4:	d8002305 	stb	zero,140(sp)
 20094f8:	043fffc4 	movi	r16,-1
 20094fc:	d8002515 	stw	zero,148(sp)
 2009500:	0023883a 	mov	r17,zero
 2009504:	05001604 	movi	r20,88
 2009508:	05400244 	movi	r21,9
 200950c:	402f883a 	mov	r23,r8
 2009510:	b5800044 	addi	r22,r22,1
 2009514:	18bff804 	addi	r2,r3,-32
 2009518:	a0827736 	bltu	r20,r2,2009ef8 <___vfiprintf_internal_r+0xb5c>
 200951c:	100490ba 	slli	r2,r2,2
 2009520:	01008074 	movhi	r4,513
 2009524:	21254d04 	addi	r4,r4,-27340
 2009528:	1105883a 	add	r2,r2,r4
 200952c:	10800017 	ldw	r2,0(r2)
 2009530:	1000683a 	jmp	r2
 2009534:	02009bf8 	rdprs	r8,zero,623
 2009538:	02009ef8 	rdprs	r8,zero,635
 200953c:	02009ef8 	rdprs	r8,zero,635
 2009540:	02009c14 	movui	r8,624
 2009544:	02009ef8 	rdprs	r8,zero,635
 2009548:	02009ef8 	rdprs	r8,zero,635
 200954c:	02009ef8 	rdprs	r8,zero,635
 2009550:	02009ef8 	rdprs	r8,zero,635
 2009554:	02009ef8 	rdprs	r8,zero,635
 2009558:	02009ef8 	rdprs	r8,zero,635
 200955c:	02009e1c 	xori	r8,zero,632
 2009560:	02009e40 	call	2009e4 <__alt_mem_sdram-0x1dff61c>
 2009564:	02009ef8 	rdprs	r8,zero,635
 2009568:	02009738 	rdprs	r8,zero,604
 200956c:	02009e54 	movui	r8,633
 2009570:	02009ef8 	rdprs	r8,zero,635
 2009574:	02009c20 	cmpeqi	r8,zero,624
 2009578:	02009c2c 	andhi	r8,zero,624
 200957c:	02009c2c 	andhi	r8,zero,624
 2009580:	02009c2c 	andhi	r8,zero,624
 2009584:	02009c2c 	andhi	r8,zero,624
 2009588:	02009c2c 	andhi	r8,zero,624
 200958c:	02009c2c 	andhi	r8,zero,624
 2009590:	02009c2c 	andhi	r8,zero,624
 2009594:	02009c2c 	andhi	r8,zero,624
 2009598:	02009c2c 	andhi	r8,zero,624
 200959c:	02009ef8 	rdprs	r8,zero,635
 20095a0:	02009ef8 	rdprs	r8,zero,635
 20095a4:	02009ef8 	rdprs	r8,zero,635
 20095a8:	02009ef8 	rdprs	r8,zero,635
 20095ac:	02009ef8 	rdprs	r8,zero,635
 20095b0:	02009ef8 	rdprs	r8,zero,635
 20095b4:	02009ef8 	rdprs	r8,zero,635
 20095b8:	02009ef8 	rdprs	r8,zero,635
 20095bc:	02009ef8 	rdprs	r8,zero,635
 20095c0:	02009ef8 	rdprs	r8,zero,635
 20095c4:	02009c6c 	andhi	r8,zero,625
 20095c8:	02009ef8 	rdprs	r8,zero,635
 20095cc:	02009ef8 	rdprs	r8,zero,635
 20095d0:	02009ef8 	rdprs	r8,zero,635
 20095d4:	02009ef8 	rdprs	r8,zero,635
 20095d8:	02009ef8 	rdprs	r8,zero,635
 20095dc:	02009ef8 	rdprs	r8,zero,635
 20095e0:	02009ef8 	rdprs	r8,zero,635
 20095e4:	02009ef8 	rdprs	r8,zero,635
 20095e8:	02009ef8 	rdprs	r8,zero,635
 20095ec:	02009ef8 	rdprs	r8,zero,635
 20095f0:	02009ca8 	cmpgeui	r8,zero,626
 20095f4:	02009ef8 	rdprs	r8,zero,635
 20095f8:	02009ef8 	rdprs	r8,zero,635
 20095fc:	02009ef8 	rdprs	r8,zero,635
 2009600:	02009ef8 	rdprs	r8,zero,635
 2009604:	02009ef8 	rdprs	r8,zero,635
 2009608:	02009d04 	movi	r8,628
 200960c:	02009ef8 	rdprs	r8,zero,635
 2009610:	02009ef8 	rdprs	r8,zero,635
 2009614:	02009d78 	rdprs	r8,zero,629
 2009618:	02009ef8 	rdprs	r8,zero,635
 200961c:	02009ef8 	rdprs	r8,zero,635
 2009620:	02009ef8 	rdprs	r8,zero,635
 2009624:	02009ef8 	rdprs	r8,zero,635
 2009628:	02009ef8 	rdprs	r8,zero,635
 200962c:	02009ef8 	rdprs	r8,zero,635
 2009630:	02009ef8 	rdprs	r8,zero,635
 2009634:	02009ef8 	rdprs	r8,zero,635
 2009638:	02009ef8 	rdprs	r8,zero,635
 200963c:	02009ef8 	rdprs	r8,zero,635
 2009640:	02009b20 	cmpeqi	r8,zero,620
 2009644:	02009b50 	cmplti	r8,zero,621
 2009648:	02009ef8 	rdprs	r8,zero,635
 200964c:	02009ef8 	rdprs	r8,zero,635
 2009650:	02009ef8 	rdprs	r8,zero,635
 2009654:	02009ea0 	cmpeqi	r8,zero,634
 2009658:	02009b50 	cmplti	r8,zero,621
 200965c:	02009ef8 	rdprs	r8,zero,635
 2009660:	02009ef8 	rdprs	r8,zero,635
 2009664:	020099f8 	rdprs	r8,zero,615
 2009668:	02009ef8 	rdprs	r8,zero,635
 200966c:	02009a0c 	andi	r8,zero,616
 2009670:	02009a44 	movi	r8,617
 2009674:	02009744 	movi	r8,605
 2009678:	020099ec 	andhi	r8,zero,615
 200967c:	02009ef8 	rdprs	r8,zero,635
 2009680:	02009db8 	rdprs	r8,zero,630
 2009684:	02009ef8 	rdprs	r8,zero,635
 2009688:	02009e04 	movi	r8,632
 200968c:	02009ef8 	rdprs	r8,zero,635
 2009690:	02009ef8 	rdprs	r8,zero,635
 2009694:	02009ac8 	cmpgei	r8,zero,619
 2009698:	42000204 	addi	r8,r8,8
 200969c:	d8c02417 	ldw	r3,144(sp)
 20096a0:	1c07883a 	add	r3,r3,r16
 20096a4:	d8c02415 	stw	r3,144(sp)
 20096a8:	003f8c06 	br	20094dc <__alt_data_end+0xfe0094dc>
 20096ac:	d9402017 	ldw	r5,128(sp)
 20096b0:	d9002117 	ldw	r4,132(sp)
 20096b4:	20057200 	call	2005720 <__swsetup_r>
 20096b8:	1003c11e 	bne	r2,zero,200a5c0 <___vfiprintf_internal_r+0x1224>
 20096bc:	d9402017 	ldw	r5,128(sp)
 20096c0:	00c00284 	movi	r3,10
 20096c4:	2880030b 	ldhu	r2,12(r5)
 20096c8:	1080068c 	andi	r2,r2,26
 20096cc:	10ff581e 	bne	r2,r3,2009430 <__alt_data_end+0xfe009430>
 20096d0:	d8c02017 	ldw	r3,128(sp)
 20096d4:	1880038f 	ldh	r2,14(r3)
 20096d8:	103f5516 	blt	r2,zero,2009430 <__alt_data_end+0xfe009430>
 20096dc:	d9c02217 	ldw	r7,136(sp)
 20096e0:	d9002117 	ldw	r4,132(sp)
 20096e4:	a80d883a 	mov	r6,r21
 20096e8:	180b883a 	mov	r5,r3
 20096ec:	200a8c40 	call	200a8c4 <__sbprintf>
 20096f0:	dfc03517 	ldw	ra,212(sp)
 20096f4:	df003417 	ldw	fp,208(sp)
 20096f8:	ddc03317 	ldw	r23,204(sp)
 20096fc:	dd803217 	ldw	r22,200(sp)
 2009700:	dd403117 	ldw	r21,196(sp)
 2009704:	dd003017 	ldw	r20,192(sp)
 2009708:	dcc02f17 	ldw	r19,188(sp)
 200970c:	dc802e17 	ldw	r18,184(sp)
 2009710:	dc402d17 	ldw	r17,180(sp)
 2009714:	dc002c17 	ldw	r16,176(sp)
 2009718:	dec03604 	addi	sp,sp,216
 200971c:	f800283a 	ret
 2009720:	20011800 	call	2001180 <__sinit>
 2009724:	003f2f06 	br	20093e4 <__alt_data_end+0xfe0093e4>
 2009728:	d8c02517 	ldw	r3,148(sp)
 200972c:	d8802215 	stw	r2,136(sp)
 2009730:	00c7c83a 	sub	r3,zero,r3
 2009734:	d8c02515 	stw	r3,148(sp)
 2009738:	8c400114 	ori	r17,r17,4
 200973c:	b0c00007 	ldb	r3,0(r22)
 2009740:	003f7306 	br	2009510 <__alt_data_end+0xfe009510>
 2009744:	00800c04 	movi	r2,48
 2009748:	d9402217 	ldw	r5,136(sp)
 200974c:	d8801d05 	stb	r2,116(sp)
 2009750:	00801e04 	movi	r2,120
 2009754:	d8801d45 	stb	r2,117(sp)
 2009758:	d8001d85 	stb	zero,118(sp)
 200975c:	b811883a 	mov	r8,r23
 2009760:	28c00104 	addi	r3,r5,4
 2009764:	2cc00017 	ldw	r19,0(r5)
 2009768:	0029883a 	mov	r20,zero
 200976c:	88800094 	ori	r2,r17,2
 2009770:	80032516 	blt	r16,zero,200a408 <___vfiprintf_internal_r+0x106c>
 2009774:	00bfdfc4 	movi	r2,-129
 2009778:	88a2703a 	and	r17,r17,r2
 200977c:	d8c02215 	stw	r3,136(sp)
 2009780:	8c400094 	ori	r17,r17,2
 2009784:	98032a1e 	bne	r19,zero,200a430 <___vfiprintf_internal_r+0x1094>
 2009788:	00808074 	movhi	r2,513
 200978c:	10856604 	addi	r2,r2,5528
 2009790:	d8802615 	stw	r2,152(sp)
 2009794:	002b883a 	mov	r21,zero
 2009798:	8001741e 	bne	r16,zero,2009d6c <___vfiprintf_internal_r+0x9d0>
 200979c:	0021883a 	mov	r16,zero
 20097a0:	0029883a 	mov	r20,zero
 20097a4:	ddc01a04 	addi	r23,sp,104
 20097a8:	8027883a 	mov	r19,r16
 20097ac:	8500010e 	bge	r16,r20,20097b4 <___vfiprintf_internal_r+0x418>
 20097b0:	a027883a 	mov	r19,r20
 20097b4:	ad403fcc 	andi	r21,r21,255
 20097b8:	ad40201c 	xori	r21,r21,128
 20097bc:	ad7fe004 	addi	r21,r21,-128
 20097c0:	a8000126 	beq	r21,zero,20097c8 <___vfiprintf_internal_r+0x42c>
 20097c4:	9cc00044 	addi	r19,r19,1
 20097c8:	89c0008c 	andi	r7,r17,2
 20097cc:	38000126 	beq	r7,zero,20097d4 <___vfiprintf_internal_r+0x438>
 20097d0:	9cc00084 	addi	r19,r19,2
 20097d4:	88c0210c 	andi	r3,r17,132
 20097d8:	1801dd1e 	bne	r3,zero,2009f50 <___vfiprintf_internal_r+0xbb4>
 20097dc:	d9402517 	ldw	r5,148(sp)
 20097e0:	2cebc83a 	sub	r21,r5,r19
 20097e4:	0541da0e 	bge	zero,r21,2009f50 <___vfiprintf_internal_r+0xbb4>
 20097e8:	07000404 	movi	fp,16
 20097ec:	d8801c17 	ldw	r2,112(sp)
 20097f0:	e543be0e 	bge	fp,r21,200a6ec <___vfiprintf_internal_r+0x1350>
 20097f4:	01408074 	movhi	r5,513
 20097f8:	2945ca04 	addi	r5,r5,5928
 20097fc:	dc002715 	stw	r16,156(sp)
 2009800:	d9801b17 	ldw	r6,108(sp)
 2009804:	a821883a 	mov	r16,r21
 2009808:	d9402315 	stw	r5,140(sp)
 200980c:	028001c4 	movi	r10,7
 2009810:	d9c02915 	stw	r7,164(sp)
 2009814:	182b883a 	mov	r21,r3
 2009818:	00000506 	br	2009830 <___vfiprintf_internal_r+0x494>
 200981c:	31000084 	addi	r4,r6,2
 2009820:	42000204 	addi	r8,r8,8
 2009824:	180d883a 	mov	r6,r3
 2009828:	843ffc04 	addi	r16,r16,-16
 200982c:	e4000f0e 	bge	fp,r16,200986c <___vfiprintf_internal_r+0x4d0>
 2009830:	01008074 	movhi	r4,513
 2009834:	10800404 	addi	r2,r2,16
 2009838:	30c00044 	addi	r3,r6,1
 200983c:	2105ca04 	addi	r4,r4,5928
 2009840:	41000015 	stw	r4,0(r8)
 2009844:	47000115 	stw	fp,4(r8)
 2009848:	d8801c15 	stw	r2,112(sp)
 200984c:	d8c01b15 	stw	r3,108(sp)
 2009850:	50fff20e 	bge	r10,r3,200981c <__alt_data_end+0xfe00981c>
 2009854:	1001b21e 	bne	r2,zero,2009f20 <___vfiprintf_internal_r+0xb84>
 2009858:	843ffc04 	addi	r16,r16,-16
 200985c:	000d883a 	mov	r6,zero
 2009860:	01000044 	movi	r4,1
 2009864:	d811883a 	mov	r8,sp
 2009868:	e43ff116 	blt	fp,r16,2009830 <__alt_data_end+0xfe009830>
 200986c:	a807883a 	mov	r3,r21
 2009870:	d9c02917 	ldw	r7,164(sp)
 2009874:	802b883a 	mov	r21,r16
 2009878:	dc002717 	ldw	r16,156(sp)
 200987c:	d9402317 	ldw	r5,140(sp)
 2009880:	a885883a 	add	r2,r21,r2
 2009884:	45400115 	stw	r21,4(r8)
 2009888:	41400015 	stw	r5,0(r8)
 200988c:	d8801c15 	stw	r2,112(sp)
 2009890:	d9001b15 	stw	r4,108(sp)
 2009894:	014001c4 	movi	r5,7
 2009898:	29026216 	blt	r5,r4,200a224 <___vfiprintf_internal_r+0xe88>
 200989c:	d9801d87 	ldb	r6,118(sp)
 20098a0:	42000204 	addi	r8,r8,8
 20098a4:	21400044 	addi	r5,r4,1
 20098a8:	3001ae1e 	bne	r6,zero,2009f64 <___vfiprintf_internal_r+0xbc8>
 20098ac:	3801bb26 	beq	r7,zero,2009f9c <___vfiprintf_internal_r+0xc00>
 20098b0:	d9001d04 	addi	r4,sp,116
 20098b4:	10800084 	addi	r2,r2,2
 20098b8:	41000015 	stw	r4,0(r8)
 20098bc:	01000084 	movi	r4,2
 20098c0:	41000115 	stw	r4,4(r8)
 20098c4:	d8801c15 	stw	r2,112(sp)
 20098c8:	d9401b15 	stw	r5,108(sp)
 20098cc:	010001c4 	movi	r4,7
 20098d0:	2142680e 	bge	r4,r5,200a274 <___vfiprintf_internal_r+0xed8>
 20098d4:	1002b11e 	bne	r2,zero,200a39c <___vfiprintf_internal_r+0x1000>
 20098d8:	01802004 	movi	r6,128
 20098dc:	01400044 	movi	r5,1
 20098e0:	0009883a 	mov	r4,zero
 20098e4:	d811883a 	mov	r8,sp
 20098e8:	1981ae1e 	bne	r3,r6,2009fa4 <___vfiprintf_internal_r+0xc08>
 20098ec:	d8c02517 	ldw	r3,148(sp)
 20098f0:	1cf9c83a 	sub	fp,r3,r19
 20098f4:	0701ab0e 	bge	zero,fp,2009fa4 <___vfiprintf_internal_r+0xc08>
 20098f8:	05400404 	movi	r21,16
 20098fc:	af03a90e 	bge	r21,fp,200a7a4 <___vfiprintf_internal_r+0x1408>
 2009900:	01408074 	movhi	r5,513
 2009904:	2945c604 	addi	r5,r5,5912
 2009908:	d9402315 	stw	r5,140(sp)
 200990c:	01c001c4 	movi	r7,7
 2009910:	00000506 	br	2009928 <___vfiprintf_internal_r+0x58c>
 2009914:	21800084 	addi	r6,r4,2
 2009918:	42000204 	addi	r8,r8,8
 200991c:	1809883a 	mov	r4,r3
 2009920:	e73ffc04 	addi	fp,fp,-16
 2009924:	af000d0e 	bge	r21,fp,200995c <___vfiprintf_internal_r+0x5c0>
 2009928:	10800404 	addi	r2,r2,16
 200992c:	20c00044 	addi	r3,r4,1
 2009930:	44800015 	stw	r18,0(r8)
 2009934:	45400115 	stw	r21,4(r8)
 2009938:	d8801c15 	stw	r2,112(sp)
 200993c:	d8c01b15 	stw	r3,108(sp)
 2009940:	38fff40e 	bge	r7,r3,2009914 <__alt_data_end+0xfe009914>
 2009944:	10022b1e 	bne	r2,zero,200a1f4 <___vfiprintf_internal_r+0xe58>
 2009948:	e73ffc04 	addi	fp,fp,-16
 200994c:	01800044 	movi	r6,1
 2009950:	0009883a 	mov	r4,zero
 2009954:	d811883a 	mov	r8,sp
 2009958:	af3ff316 	blt	r21,fp,2009928 <__alt_data_end+0xfe009928>
 200995c:	d8c02317 	ldw	r3,140(sp)
 2009960:	1705883a 	add	r2,r2,fp
 2009964:	47000115 	stw	fp,4(r8)
 2009968:	40c00015 	stw	r3,0(r8)
 200996c:	d8801c15 	stw	r2,112(sp)
 2009970:	d9801b15 	stw	r6,108(sp)
 2009974:	00c001c4 	movi	r3,7
 2009978:	19829416 	blt	r3,r6,200a3cc <___vfiprintf_internal_r+0x1030>
 200997c:	8521c83a 	sub	r16,r16,r20
 2009980:	42000204 	addi	r8,r8,8
 2009984:	31400044 	addi	r5,r6,1
 2009988:	3009883a 	mov	r4,r6
 200998c:	04018716 	blt	zero,r16,2009fac <___vfiprintf_internal_r+0xc10>
 2009990:	a085883a 	add	r2,r20,r2
 2009994:	45c00015 	stw	r23,0(r8)
 2009998:	45000115 	stw	r20,4(r8)
 200999c:	d8801c15 	stw	r2,112(sp)
 20099a0:	d9401b15 	stw	r5,108(sp)
 20099a4:	00c001c4 	movi	r3,7
 20099a8:	1941c20e 	bge	r3,r5,200a0b4 <___vfiprintf_internal_r+0xd18>
 20099ac:	1002531e 	bne	r2,zero,200a2fc <___vfiprintf_internal_r+0xf60>
 20099b0:	d8001b15 	stw	zero,108(sp)
 20099b4:	8c40010c 	andi	r17,r17,4
 20099b8:	88023226 	beq	r17,zero,200a284 <___vfiprintf_internal_r+0xee8>
 20099bc:	d9002517 	ldw	r4,148(sp)
 20099c0:	24e3c83a 	sub	r17,r4,r19
 20099c4:	04432916 	blt	zero,r17,200a66c <___vfiprintf_internal_r+0x12d0>
 20099c8:	d8802517 	ldw	r2,148(sp)
 20099cc:	14c0010e 	bge	r2,r19,20099d4 <___vfiprintf_internal_r+0x638>
 20099d0:	9805883a 	mov	r2,r19
 20099d4:	d8c02417 	ldw	r3,144(sp)
 20099d8:	1887883a 	add	r3,r3,r2
 20099dc:	d8c02415 	stw	r3,144(sp)
 20099e0:	d8001b15 	stw	zero,108(sp)
 20099e4:	d811883a 	mov	r8,sp
 20099e8:	003ea006 	br	200946c <__alt_data_end+0xfe00946c>
 20099ec:	8c400814 	ori	r17,r17,32
 20099f0:	b0c00007 	ldb	r3,0(r22)
 20099f4:	003ec606 	br	2009510 <__alt_data_end+0xfe009510>
 20099f8:	b0c00007 	ldb	r3,0(r22)
 20099fc:	00801b04 	movi	r2,108
 2009a00:	18832026 	beq	r3,r2,200a684 <___vfiprintf_internal_r+0x12e8>
 2009a04:	8c400414 	ori	r17,r17,16
 2009a08:	003ec106 	br	2009510 <__alt_data_end+0xfe009510>
 2009a0c:	9cc03fcc 	andi	r19,r19,255
 2009a10:	b811883a 	mov	r8,r23
 2009a14:	9803981e 	bne	r19,zero,200a878 <___vfiprintf_internal_r+0x14dc>
 2009a18:	8880080c 	andi	r2,r17,32
 2009a1c:	1002be26 	beq	r2,zero,200a518 <___vfiprintf_internal_r+0x117c>
 2009a20:	d9002217 	ldw	r4,136(sp)
 2009a24:	d9402417 	ldw	r5,144(sp)
 2009a28:	20800017 	ldw	r2,0(r4)
 2009a2c:	2807d7fa 	srai	r3,r5,31
 2009a30:	21000104 	addi	r4,r4,4
 2009a34:	d9002215 	stw	r4,136(sp)
 2009a38:	11400015 	stw	r5,0(r2)
 2009a3c:	10c00115 	stw	r3,4(r2)
 2009a40:	003e8a06 	br	200946c <__alt_data_end+0xfe00946c>
 2009a44:	9cc03fcc 	andi	r19,r19,255
 2009a48:	b811883a 	mov	r8,r23
 2009a4c:	9803871e 	bne	r19,zero,200a86c <___vfiprintf_internal_r+0x14d0>
 2009a50:	8880080c 	andi	r2,r17,32
 2009a54:	10009a26 	beq	r2,zero,2009cc0 <___vfiprintf_internal_r+0x924>
 2009a58:	d9002217 	ldw	r4,136(sp)
 2009a5c:	d8001d85 	stb	zero,118(sp)
 2009a60:	20800204 	addi	r2,r4,8
 2009a64:	24c00017 	ldw	r19,0(r4)
 2009a68:	25000117 	ldw	r20,4(r4)
 2009a6c:	8002a416 	blt	r16,zero,200a500 <___vfiprintf_internal_r+0x1164>
 2009a70:	013fdfc4 	movi	r4,-129
 2009a74:	9d06b03a 	or	r3,r19,r20
 2009a78:	d8802215 	stw	r2,136(sp)
 2009a7c:	8922703a 	and	r17,r17,r4
 2009a80:	18009b26 	beq	r3,zero,2009cf0 <___vfiprintf_internal_r+0x954>
 2009a84:	002b883a 	mov	r21,zero
 2009a88:	ddc01a04 	addi	r23,sp,104
 2009a8c:	9806d0fa 	srli	r3,r19,3
 2009a90:	a008977a 	slli	r4,r20,29
 2009a94:	a028d0fa 	srli	r20,r20,3
 2009a98:	9cc001cc 	andi	r19,r19,7
 2009a9c:	98800c04 	addi	r2,r19,48
 2009aa0:	bdffffc4 	addi	r23,r23,-1
 2009aa4:	20e6b03a 	or	r19,r4,r3
 2009aa8:	b8800005 	stb	r2,0(r23)
 2009aac:	9d06b03a 	or	r3,r19,r20
 2009ab0:	183ff61e 	bne	r3,zero,2009a8c <__alt_data_end+0xfe009a8c>
 2009ab4:	88c0004c 	andi	r3,r17,1
 2009ab8:	18021f1e 	bne	r3,zero,200a338 <___vfiprintf_internal_r+0xf9c>
 2009abc:	d9401e17 	ldw	r5,120(sp)
 2009ac0:	2de9c83a 	sub	r20,r5,r23
 2009ac4:	003f3806 	br	20097a8 <__alt_data_end+0xfe0097a8>
 2009ac8:	9cc03fcc 	andi	r19,r19,255
 2009acc:	b811883a 	mov	r8,r23
 2009ad0:	98034f1e 	bne	r19,zero,200a810 <___vfiprintf_internal_r+0x1474>
 2009ad4:	00808074 	movhi	r2,513
 2009ad8:	10856604 	addi	r2,r2,5528
 2009adc:	d8802615 	stw	r2,152(sp)
 2009ae0:	8880080c 	andi	r2,r17,32
 2009ae4:	1000ac26 	beq	r2,zero,2009d98 <___vfiprintf_internal_r+0x9fc>
 2009ae8:	d9002217 	ldw	r4,136(sp)
 2009aec:	24c00017 	ldw	r19,0(r4)
 2009af0:	25000117 	ldw	r20,4(r4)
 2009af4:	21000204 	addi	r4,r4,8
 2009af8:	d9002215 	stw	r4,136(sp)
 2009afc:	8880004c 	andi	r2,r17,1
 2009b00:	1001e726 	beq	r2,zero,200a2a0 <___vfiprintf_internal_r+0xf04>
 2009b04:	9d04b03a 	or	r2,r19,r20
 2009b08:	10025c1e 	bne	r2,zero,200a47c <___vfiprintf_internal_r+0x10e0>
 2009b0c:	d8001d85 	stb	zero,118(sp)
 2009b10:	80024416 	blt	r16,zero,200a424 <___vfiprintf_internal_r+0x1088>
 2009b14:	00bfdfc4 	movi	r2,-129
 2009b18:	88a2703a 	and	r17,r17,r2
 2009b1c:	003f1d06 	br	2009794 <__alt_data_end+0xfe009794>
 2009b20:	d8c02217 	ldw	r3,136(sp)
 2009b24:	04c00044 	movi	r19,1
 2009b28:	b811883a 	mov	r8,r23
 2009b2c:	18800017 	ldw	r2,0(r3)
 2009b30:	18c00104 	addi	r3,r3,4
 2009b34:	d8001d85 	stb	zero,118(sp)
 2009b38:	d8801005 	stb	r2,64(sp)
 2009b3c:	d8c02215 	stw	r3,136(sp)
 2009b40:	9829883a 	mov	r20,r19
 2009b44:	ddc01004 	addi	r23,sp,64
 2009b48:	0021883a 	mov	r16,zero
 2009b4c:	003f1e06 	br	20097c8 <__alt_data_end+0xfe0097c8>
 2009b50:	9cc03fcc 	andi	r19,r19,255
 2009b54:	b811883a 	mov	r8,r23
 2009b58:	9803331e 	bne	r19,zero,200a828 <___vfiprintf_internal_r+0x148c>
 2009b5c:	8880080c 	andi	r2,r17,32
 2009b60:	10004826 	beq	r2,zero,2009c84 <___vfiprintf_internal_r+0x8e8>
 2009b64:	d9002217 	ldw	r4,136(sp)
 2009b68:	20800117 	ldw	r2,4(r4)
 2009b6c:	24c00017 	ldw	r19,0(r4)
 2009b70:	21000204 	addi	r4,r4,8
 2009b74:	d9002215 	stw	r4,136(sp)
 2009b78:	1029883a 	mov	r20,r2
 2009b7c:	10024c16 	blt	r2,zero,200a4b0 <___vfiprintf_internal_r+0x1114>
 2009b80:	dd401d83 	ldbu	r21,118(sp)
 2009b84:	80007116 	blt	r16,zero,2009d4c <___vfiprintf_internal_r+0x9b0>
 2009b88:	00ffdfc4 	movi	r3,-129
 2009b8c:	9d04b03a 	or	r2,r19,r20
 2009b90:	88e2703a 	and	r17,r17,r3
 2009b94:	1000d126 	beq	r2,zero,2009edc <___vfiprintf_internal_r+0xb40>
 2009b98:	a0023526 	beq	r20,zero,200a470 <___vfiprintf_internal_r+0x10d4>
 2009b9c:	ddc01a04 	addi	r23,sp,104
 2009ba0:	4039883a 	mov	fp,r8
 2009ba4:	9809883a 	mov	r4,r19
 2009ba8:	a00b883a 	mov	r5,r20
 2009bac:	01800284 	movi	r6,10
 2009bb0:	000f883a 	mov	r7,zero
 2009bb4:	200b5a00 	call	200b5a0 <__umoddi3>
 2009bb8:	10800c04 	addi	r2,r2,48
 2009bbc:	bdffffc4 	addi	r23,r23,-1
 2009bc0:	9809883a 	mov	r4,r19
 2009bc4:	a00b883a 	mov	r5,r20
 2009bc8:	b8800005 	stb	r2,0(r23)
 2009bcc:	01800284 	movi	r6,10
 2009bd0:	000f883a 	mov	r7,zero
 2009bd4:	200afa40 	call	200afa4 <__udivdi3>
 2009bd8:	1027883a 	mov	r19,r2
 2009bdc:	10c4b03a 	or	r2,r2,r3
 2009be0:	1829883a 	mov	r20,r3
 2009be4:	103fef1e 	bne	r2,zero,2009ba4 <__alt_data_end+0xfe009ba4>
 2009be8:	d9001e17 	ldw	r4,120(sp)
 2009bec:	e011883a 	mov	r8,fp
 2009bf0:	25e9c83a 	sub	r20,r4,r23
 2009bf4:	003eec06 	br	20097a8 <__alt_data_end+0xfe0097a8>
 2009bf8:	d8802307 	ldb	r2,140(sp)
 2009bfc:	1002361e 	bne	r2,zero,200a4d8 <___vfiprintf_internal_r+0x113c>
 2009c00:	00c00804 	movi	r3,32
 2009c04:	d8c02305 	stb	r3,140(sp)
 2009c08:	04c00044 	movi	r19,1
 2009c0c:	b0c00007 	ldb	r3,0(r22)
 2009c10:	003e3f06 	br	2009510 <__alt_data_end+0xfe009510>
 2009c14:	8c400054 	ori	r17,r17,1
 2009c18:	b0c00007 	ldb	r3,0(r22)
 2009c1c:	003e3c06 	br	2009510 <__alt_data_end+0xfe009510>
 2009c20:	8c402014 	ori	r17,r17,128
 2009c24:	b0c00007 	ldb	r3,0(r22)
 2009c28:	003e3906 	br	2009510 <__alt_data_end+0xfe009510>
 2009c2c:	dc002715 	stw	r16,156(sp)
 2009c30:	d8002515 	stw	zero,148(sp)
 2009c34:	1f3ff404 	addi	fp,r3,-48
 2009c38:	0009883a 	mov	r4,zero
 2009c3c:	b021883a 	mov	r16,r22
 2009c40:	01400284 	movi	r5,10
 2009c44:	2000a4c0 	call	2000a4c <__mulsi3>
 2009c48:	80c00007 	ldb	r3,0(r16)
 2009c4c:	e089883a 	add	r4,fp,r2
 2009c50:	b5800044 	addi	r22,r22,1
 2009c54:	1f3ff404 	addi	fp,r3,-48
 2009c58:	b021883a 	mov	r16,r22
 2009c5c:	af3ff82e 	bgeu	r21,fp,2009c40 <__alt_data_end+0xfe009c40>
 2009c60:	d9002515 	stw	r4,148(sp)
 2009c64:	dc002717 	ldw	r16,156(sp)
 2009c68:	003e2a06 	br	2009514 <__alt_data_end+0xfe009514>
 2009c6c:	9cc03fcc 	andi	r19,r19,255
 2009c70:	b811883a 	mov	r8,r23
 2009c74:	9802e91e 	bne	r19,zero,200a81c <___vfiprintf_internal_r+0x1480>
 2009c78:	8c400414 	ori	r17,r17,16
 2009c7c:	8880080c 	andi	r2,r17,32
 2009c80:	103fb81e 	bne	r2,zero,2009b64 <__alt_data_end+0xfe009b64>
 2009c84:	8880040c 	andi	r2,r17,16
 2009c88:	10022e26 	beq	r2,zero,200a544 <___vfiprintf_internal_r+0x11a8>
 2009c8c:	d9402217 	ldw	r5,136(sp)
 2009c90:	2cc00017 	ldw	r19,0(r5)
 2009c94:	29400104 	addi	r5,r5,4
 2009c98:	d9402215 	stw	r5,136(sp)
 2009c9c:	9829d7fa 	srai	r20,r19,31
 2009ca0:	a005883a 	mov	r2,r20
 2009ca4:	003fb506 	br	2009b7c <__alt_data_end+0xfe009b7c>
 2009ca8:	9cc03fcc 	andi	r19,r19,255
 2009cac:	b811883a 	mov	r8,r23
 2009cb0:	9802fa1e 	bne	r19,zero,200a89c <___vfiprintf_internal_r+0x1500>
 2009cb4:	8c400414 	ori	r17,r17,16
 2009cb8:	8880080c 	andi	r2,r17,32
 2009cbc:	103f661e 	bne	r2,zero,2009a58 <__alt_data_end+0xfe009a58>
 2009cc0:	8880040c 	andi	r2,r17,16
 2009cc4:	10020626 	beq	r2,zero,200a4e0 <___vfiprintf_internal_r+0x1144>
 2009cc8:	d9402217 	ldw	r5,136(sp)
 2009ccc:	d8001d85 	stb	zero,118(sp)
 2009cd0:	0029883a 	mov	r20,zero
 2009cd4:	28800104 	addi	r2,r5,4
 2009cd8:	2cc00017 	ldw	r19,0(r5)
 2009cdc:	80020816 	blt	r16,zero,200a500 <___vfiprintf_internal_r+0x1164>
 2009ce0:	00ffdfc4 	movi	r3,-129
 2009ce4:	d8802215 	stw	r2,136(sp)
 2009ce8:	88e2703a 	and	r17,r17,r3
 2009cec:	983f651e 	bne	r19,zero,2009a84 <__alt_data_end+0xfe009a84>
 2009cf0:	002b883a 	mov	r21,zero
 2009cf4:	8002cf26 	beq	r16,zero,200a834 <___vfiprintf_internal_r+0x1498>
 2009cf8:	0027883a 	mov	r19,zero
 2009cfc:	0029883a 	mov	r20,zero
 2009d00:	003f6106 	br	2009a88 <__alt_data_end+0xfe009a88>
 2009d04:	9cc03fcc 	andi	r19,r19,255
 2009d08:	b811883a 	mov	r8,r23
 2009d0c:	9802e01e 	bne	r19,zero,200a890 <___vfiprintf_internal_r+0x14f4>
 2009d10:	8c400414 	ori	r17,r17,16
 2009d14:	8880080c 	andi	r2,r17,32
 2009d18:	1000641e 	bne	r2,zero,2009eac <___vfiprintf_internal_r+0xb10>
 2009d1c:	8880040c 	andi	r2,r17,16
 2009d20:	1001c81e 	bne	r2,zero,200a444 <___vfiprintf_internal_r+0x10a8>
 2009d24:	8880100c 	andi	r2,r17,64
 2009d28:	d8001d85 	stb	zero,118(sp)
 2009d2c:	1002281e 	bne	r2,zero,200a5d0 <___vfiprintf_internal_r+0x1234>
 2009d30:	d9002217 	ldw	r4,136(sp)
 2009d34:	0029883a 	mov	r20,zero
 2009d38:	20800104 	addi	r2,r4,4
 2009d3c:	24c00017 	ldw	r19,0(r4)
 2009d40:	8001c60e 	bge	r16,zero,200a45c <___vfiprintf_internal_r+0x10c0>
 2009d44:	d8802215 	stw	r2,136(sp)
 2009d48:	002b883a 	mov	r21,zero
 2009d4c:	9d04b03a 	or	r2,r19,r20
 2009d50:	103f911e 	bne	r2,zero,2009b98 <__alt_data_end+0xfe009b98>
 2009d54:	00800044 	movi	r2,1
 2009d58:	10803fcc 	andi	r2,r2,255
 2009d5c:	00c00044 	movi	r3,1
 2009d60:	10c05f26 	beq	r2,r3,2009ee0 <___vfiprintf_internal_r+0xb44>
 2009d64:	00c00084 	movi	r3,2
 2009d68:	10ffe31e 	bne	r2,r3,2009cf8 <__alt_data_end+0xfe009cf8>
 2009d6c:	0027883a 	mov	r19,zero
 2009d70:	0029883a 	mov	r20,zero
 2009d74:	00015106 	br	200a2bc <___vfiprintf_internal_r+0xf20>
 2009d78:	9cc03fcc 	andi	r19,r19,255
 2009d7c:	b811883a 	mov	r8,r23
 2009d80:	9802c01e 	bne	r19,zero,200a884 <___vfiprintf_internal_r+0x14e8>
 2009d84:	01408074 	movhi	r5,513
 2009d88:	29456104 	addi	r5,r5,5508
 2009d8c:	d9402615 	stw	r5,152(sp)
 2009d90:	8880080c 	andi	r2,r17,32
 2009d94:	103f541e 	bne	r2,zero,2009ae8 <__alt_data_end+0xfe009ae8>
 2009d98:	8880040c 	andi	r2,r17,16
 2009d9c:	1001f226 	beq	r2,zero,200a568 <___vfiprintf_internal_r+0x11cc>
 2009da0:	d9402217 	ldw	r5,136(sp)
 2009da4:	0029883a 	mov	r20,zero
 2009da8:	2cc00017 	ldw	r19,0(r5)
 2009dac:	29400104 	addi	r5,r5,4
 2009db0:	d9402215 	stw	r5,136(sp)
 2009db4:	003f5106 	br	2009afc <__alt_data_end+0xfe009afc>
 2009db8:	d8c02217 	ldw	r3,136(sp)
 2009dbc:	b811883a 	mov	r8,r23
 2009dc0:	d8001d85 	stb	zero,118(sp)
 2009dc4:	1dc00017 	ldw	r23,0(r3)
 2009dc8:	1f000104 	addi	fp,r3,4
 2009dcc:	b8025926 	beq	r23,zero,200a734 <___vfiprintf_internal_r+0x1398>
 2009dd0:	80023316 	blt	r16,zero,200a6a0 <___vfiprintf_internal_r+0x1304>
 2009dd4:	800d883a 	mov	r6,r16
 2009dd8:	000b883a 	mov	r5,zero
 2009ddc:	b809883a 	mov	r4,r23
 2009de0:	da002a15 	stw	r8,168(sp)
 2009de4:	200787c0 	call	200787c <memchr>
 2009de8:	da002a17 	ldw	r8,168(sp)
 2009dec:	10026826 	beq	r2,zero,200a790 <___vfiprintf_internal_r+0x13f4>
 2009df0:	15e9c83a 	sub	r20,r2,r23
 2009df4:	dd401d83 	ldbu	r21,118(sp)
 2009df8:	df002215 	stw	fp,136(sp)
 2009dfc:	0021883a 	mov	r16,zero
 2009e00:	003e6906 	br	20097a8 <__alt_data_end+0xfe0097a8>
 2009e04:	9cc03fcc 	andi	r19,r19,255
 2009e08:	b811883a 	mov	r8,r23
 2009e0c:	983fc126 	beq	r19,zero,2009d14 <__alt_data_end+0xfe009d14>
 2009e10:	d8c02303 	ldbu	r3,140(sp)
 2009e14:	d8c01d85 	stb	r3,118(sp)
 2009e18:	003fbe06 	br	2009d14 <__alt_data_end+0xfe009d14>
 2009e1c:	d9002217 	ldw	r4,136(sp)
 2009e20:	d9402217 	ldw	r5,136(sp)
 2009e24:	21000017 	ldw	r4,0(r4)
 2009e28:	28800104 	addi	r2,r5,4
 2009e2c:	d9002515 	stw	r4,148(sp)
 2009e30:	203e3d16 	blt	r4,zero,2009728 <__alt_data_end+0xfe009728>
 2009e34:	d8802215 	stw	r2,136(sp)
 2009e38:	b0c00007 	ldb	r3,0(r22)
 2009e3c:	003db406 	br	2009510 <__alt_data_end+0xfe009510>
 2009e40:	00c00ac4 	movi	r3,43
 2009e44:	d8c02305 	stb	r3,140(sp)
 2009e48:	04c00044 	movi	r19,1
 2009e4c:	b0c00007 	ldb	r3,0(r22)
 2009e50:	003daf06 	br	2009510 <__alt_data_end+0xfe009510>
 2009e54:	b0c00007 	ldb	r3,0(r22)
 2009e58:	01000a84 	movi	r4,42
 2009e5c:	b4000044 	addi	r16,r22,1
 2009e60:	19025e26 	beq	r3,r4,200a7dc <___vfiprintf_internal_r+0x1440>
 2009e64:	1f3ff404 	addi	fp,r3,-48
 2009e68:	0009883a 	mov	r4,zero
 2009e6c:	af025236 	bltu	r21,fp,200a7b8 <___vfiprintf_internal_r+0x141c>
 2009e70:	01400284 	movi	r5,10
 2009e74:	2000a4c0 	call	2000a4c <__mulsi3>
 2009e78:	80c00007 	ldb	r3,0(r16)
 2009e7c:	1709883a 	add	r4,r2,fp
 2009e80:	85800044 	addi	r22,r16,1
 2009e84:	1f3ff404 	addi	fp,r3,-48
 2009e88:	b021883a 	mov	r16,r22
 2009e8c:	af3ff82e 	bgeu	r21,fp,2009e70 <__alt_data_end+0xfe009e70>
 2009e90:	2021883a 	mov	r16,r4
 2009e94:	203d9f0e 	bge	r4,zero,2009514 <__alt_data_end+0xfe009514>
 2009e98:	043fffc4 	movi	r16,-1
 2009e9c:	003d9d06 	br	2009514 <__alt_data_end+0xfe009514>
 2009ea0:	8c401014 	ori	r17,r17,64
 2009ea4:	b0c00007 	ldb	r3,0(r22)
 2009ea8:	003d9906 	br	2009510 <__alt_data_end+0xfe009510>
 2009eac:	d9002217 	ldw	r4,136(sp)
 2009eb0:	d8001d85 	stb	zero,118(sp)
 2009eb4:	20c00204 	addi	r3,r4,8
 2009eb8:	24c00017 	ldw	r19,0(r4)
 2009ebc:	25000117 	ldw	r20,4(r4)
 2009ec0:	8001e716 	blt	r16,zero,200a660 <___vfiprintf_internal_r+0x12c4>
 2009ec4:	013fdfc4 	movi	r4,-129
 2009ec8:	9d04b03a 	or	r2,r19,r20
 2009ecc:	d8c02215 	stw	r3,136(sp)
 2009ed0:	8922703a 	and	r17,r17,r4
 2009ed4:	002b883a 	mov	r21,zero
 2009ed8:	103f2f1e 	bne	r2,zero,2009b98 <__alt_data_end+0xfe009b98>
 2009edc:	803e2f26 	beq	r16,zero,200979c <__alt_data_end+0xfe00979c>
 2009ee0:	0027883a 	mov	r19,zero
 2009ee4:	9cc00c04 	addi	r19,r19,48
 2009ee8:	dcc019c5 	stb	r19,103(sp)
 2009eec:	dd002817 	ldw	r20,160(sp)
 2009ef0:	ddc019c4 	addi	r23,sp,103
 2009ef4:	003e2c06 	br	20097a8 <__alt_data_end+0xfe0097a8>
 2009ef8:	9cc03fcc 	andi	r19,r19,255
 2009efc:	b811883a 	mov	r8,r23
 2009f00:	9802571e 	bne	r19,zero,200a860 <___vfiprintf_internal_r+0x14c4>
 2009f04:	18005726 	beq	r3,zero,200a064 <___vfiprintf_internal_r+0xcc8>
 2009f08:	04c00044 	movi	r19,1
 2009f0c:	d8c01005 	stb	r3,64(sp)
 2009f10:	d8001d85 	stb	zero,118(sp)
 2009f14:	9829883a 	mov	r20,r19
 2009f18:	ddc01004 	addi	r23,sp,64
 2009f1c:	003f0a06 	br	2009b48 <__alt_data_end+0xfe009b48>
 2009f20:	d9402017 	ldw	r5,128(sp)
 2009f24:	d9002117 	ldw	r4,132(sp)
 2009f28:	d9801a04 	addi	r6,sp,104
 2009f2c:	da802a15 	stw	r10,168(sp)
 2009f30:	20092880 	call	2009288 <__sprint_r.part.0>
 2009f34:	da802a17 	ldw	r10,168(sp)
 2009f38:	1000501e 	bne	r2,zero,200a07c <___vfiprintf_internal_r+0xce0>
 2009f3c:	d9801b17 	ldw	r6,108(sp)
 2009f40:	d8801c17 	ldw	r2,112(sp)
 2009f44:	d811883a 	mov	r8,sp
 2009f48:	31000044 	addi	r4,r6,1
 2009f4c:	003e3606 	br	2009828 <__alt_data_end+0xfe009828>
 2009f50:	d9001b17 	ldw	r4,108(sp)
 2009f54:	d8801c17 	ldw	r2,112(sp)
 2009f58:	21400044 	addi	r5,r4,1
 2009f5c:	d9801d87 	ldb	r6,118(sp)
 2009f60:	303e5226 	beq	r6,zero,20098ac <__alt_data_end+0xfe0098ac>
 2009f64:	01800044 	movi	r6,1
 2009f68:	d9001d84 	addi	r4,sp,118
 2009f6c:	1185883a 	add	r2,r2,r6
 2009f70:	41000015 	stw	r4,0(r8)
 2009f74:	41800115 	stw	r6,4(r8)
 2009f78:	d8801c15 	stw	r2,112(sp)
 2009f7c:	d9401b15 	stw	r5,108(sp)
 2009f80:	010001c4 	movi	r4,7
 2009f84:	2140b00e 	bge	r4,r5,200a248 <___vfiprintf_internal_r+0xeac>
 2009f88:	1000f61e 	bne	r2,zero,200a364 <___vfiprintf_internal_r+0xfc8>
 2009f8c:	3800b31e 	bne	r7,zero,200a25c <___vfiprintf_internal_r+0xec0>
 2009f90:	0009883a 	mov	r4,zero
 2009f94:	300b883a 	mov	r5,r6
 2009f98:	d811883a 	mov	r8,sp
 2009f9c:	01802004 	movi	r6,128
 2009fa0:	19be5226 	beq	r3,r6,20098ec <__alt_data_end+0xfe0098ec>
 2009fa4:	8521c83a 	sub	r16,r16,r20
 2009fa8:	043e790e 	bge	zero,r16,2009990 <__alt_data_end+0xfe009990>
 2009fac:	05400404 	movi	r21,16
 2009fb0:	ac01b00e 	bge	r21,r16,200a674 <___vfiprintf_internal_r+0x12d8>
 2009fb4:	01408074 	movhi	r5,513
 2009fb8:	2945c604 	addi	r5,r5,5912
 2009fbc:	d9402315 	stw	r5,140(sp)
 2009fc0:	070001c4 	movi	fp,7
 2009fc4:	00000506 	br	2009fdc <___vfiprintf_internal_r+0xc40>
 2009fc8:	21400084 	addi	r5,r4,2
 2009fcc:	42000204 	addi	r8,r8,8
 2009fd0:	1809883a 	mov	r4,r3
 2009fd4:	843ffc04 	addi	r16,r16,-16
 2009fd8:	ac000d0e 	bge	r21,r16,200a010 <___vfiprintf_internal_r+0xc74>
 2009fdc:	10800404 	addi	r2,r2,16
 2009fe0:	20c00044 	addi	r3,r4,1
 2009fe4:	44800015 	stw	r18,0(r8)
 2009fe8:	45400115 	stw	r21,4(r8)
 2009fec:	d8801c15 	stw	r2,112(sp)
 2009ff0:	d8c01b15 	stw	r3,108(sp)
 2009ff4:	e0fff40e 	bge	fp,r3,2009fc8 <__alt_data_end+0xfe009fc8>
 2009ff8:	1000101e 	bne	r2,zero,200a03c <___vfiprintf_internal_r+0xca0>
 2009ffc:	843ffc04 	addi	r16,r16,-16
 200a000:	01400044 	movi	r5,1
 200a004:	0009883a 	mov	r4,zero
 200a008:	d811883a 	mov	r8,sp
 200a00c:	ac3ff316 	blt	r21,r16,2009fdc <__alt_data_end+0xfe009fdc>
 200a010:	d8c02317 	ldw	r3,140(sp)
 200a014:	1405883a 	add	r2,r2,r16
 200a018:	44000115 	stw	r16,4(r8)
 200a01c:	40c00015 	stw	r3,0(r8)
 200a020:	d8801c15 	stw	r2,112(sp)
 200a024:	d9401b15 	stw	r5,108(sp)
 200a028:	00c001c4 	movi	r3,7
 200a02c:	19401916 	blt	r3,r5,200a094 <___vfiprintf_internal_r+0xcf8>
 200a030:	42000204 	addi	r8,r8,8
 200a034:	29400044 	addi	r5,r5,1
 200a038:	003e5506 	br	2009990 <__alt_data_end+0xfe009990>
 200a03c:	d9402017 	ldw	r5,128(sp)
 200a040:	d9002117 	ldw	r4,132(sp)
 200a044:	d9801a04 	addi	r6,sp,104
 200a048:	20092880 	call	2009288 <__sprint_r.part.0>
 200a04c:	10000b1e 	bne	r2,zero,200a07c <___vfiprintf_internal_r+0xce0>
 200a050:	d9001b17 	ldw	r4,108(sp)
 200a054:	d8801c17 	ldw	r2,112(sp)
 200a058:	d811883a 	mov	r8,sp
 200a05c:	21400044 	addi	r5,r4,1
 200a060:	003fdc06 	br	2009fd4 <__alt_data_end+0xfe009fd4>
 200a064:	d8801c17 	ldw	r2,112(sp)
 200a068:	10000426 	beq	r2,zero,200a07c <___vfiprintf_internal_r+0xce0>
 200a06c:	d9402017 	ldw	r5,128(sp)
 200a070:	d9002117 	ldw	r4,132(sp)
 200a074:	d9801a04 	addi	r6,sp,104
 200a078:	20092880 	call	2009288 <__sprint_r.part.0>
 200a07c:	d9402017 	ldw	r5,128(sp)
 200a080:	2880030b 	ldhu	r2,12(r5)
 200a084:	1080100c 	andi	r2,r2,64
 200a088:	10014d1e 	bne	r2,zero,200a5c0 <___vfiprintf_internal_r+0x1224>
 200a08c:	d8802417 	ldw	r2,144(sp)
 200a090:	003d9706 	br	20096f0 <__alt_data_end+0xfe0096f0>
 200a094:	1000d21e 	bne	r2,zero,200a3e0 <___vfiprintf_internal_r+0x1044>
 200a098:	00c00044 	movi	r3,1
 200a09c:	a005883a 	mov	r2,r20
 200a0a0:	ddc00015 	stw	r23,0(sp)
 200a0a4:	dd000115 	stw	r20,4(sp)
 200a0a8:	dd001c15 	stw	r20,112(sp)
 200a0ac:	d8c01b15 	stw	r3,108(sp)
 200a0b0:	d811883a 	mov	r8,sp
 200a0b4:	42000204 	addi	r8,r8,8
 200a0b8:	8c40010c 	andi	r17,r17,4
 200a0bc:	88004026 	beq	r17,zero,200a1c0 <___vfiprintf_internal_r+0xe24>
 200a0c0:	d9002517 	ldw	r4,148(sp)
 200a0c4:	24e3c83a 	sub	r17,r4,r19
 200a0c8:	04403d0e 	bge	zero,r17,200a1c0 <___vfiprintf_internal_r+0xe24>
 200a0cc:	04000404 	movi	r16,16
 200a0d0:	8441a90e 	bge	r16,r17,200a778 <___vfiprintf_internal_r+0x13dc>
 200a0d4:	00c08074 	movhi	r3,513
 200a0d8:	18c5ca04 	addi	r3,r3,5928
 200a0dc:	d9001b17 	ldw	r4,108(sp)
 200a0e0:	d8c02315 	stw	r3,140(sp)
 200a0e4:	050001c4 	movi	r20,7
 200a0e8:	dd402117 	ldw	r21,132(sp)
 200a0ec:	ddc02017 	ldw	r23,128(sp)
 200a0f0:	00000506 	br	200a108 <___vfiprintf_internal_r+0xd6c>
 200a0f4:	21400084 	addi	r5,r4,2
 200a0f8:	42000204 	addi	r8,r8,8
 200a0fc:	1809883a 	mov	r4,r3
 200a100:	8c7ffc04 	addi	r17,r17,-16
 200a104:	84400f0e 	bge	r16,r17,200a144 <___vfiprintf_internal_r+0xda8>
 200a108:	01408074 	movhi	r5,513
 200a10c:	10800404 	addi	r2,r2,16
 200a110:	20c00044 	addi	r3,r4,1
 200a114:	2945ca04 	addi	r5,r5,5928
 200a118:	41400015 	stw	r5,0(r8)
 200a11c:	44000115 	stw	r16,4(r8)
 200a120:	d8801c15 	stw	r2,112(sp)
 200a124:	d8c01b15 	stw	r3,108(sp)
 200a128:	a0fff20e 	bge	r20,r3,200a0f4 <__alt_data_end+0xfe00a0f4>
 200a12c:	1000141e 	bne	r2,zero,200a180 <___vfiprintf_internal_r+0xde4>
 200a130:	8c7ffc04 	addi	r17,r17,-16
 200a134:	01400044 	movi	r5,1
 200a138:	0009883a 	mov	r4,zero
 200a13c:	d811883a 	mov	r8,sp
 200a140:	847ff116 	blt	r16,r17,200a108 <__alt_data_end+0xfe00a108>
 200a144:	d8c02317 	ldw	r3,140(sp)
 200a148:	1445883a 	add	r2,r2,r17
 200a14c:	44400115 	stw	r17,4(r8)
 200a150:	40c00015 	stw	r3,0(r8)
 200a154:	d8801c15 	stw	r2,112(sp)
 200a158:	d9401b15 	stw	r5,108(sp)
 200a15c:	00c001c4 	movi	r3,7
 200a160:	1940170e 	bge	r3,r5,200a1c0 <___vfiprintf_internal_r+0xe24>
 200a164:	1000101e 	bne	r2,zero,200a1a8 <___vfiprintf_internal_r+0xe0c>
 200a168:	d8802517 	ldw	r2,148(sp)
 200a16c:	14c11616 	blt	r2,r19,200a5c8 <___vfiprintf_internal_r+0x122c>
 200a170:	d9002417 	ldw	r4,144(sp)
 200a174:	2089883a 	add	r4,r4,r2
 200a178:	d9002415 	stw	r4,144(sp)
 200a17c:	003e1806 	br	20099e0 <__alt_data_end+0xfe0099e0>
 200a180:	d9801a04 	addi	r6,sp,104
 200a184:	b80b883a 	mov	r5,r23
 200a188:	a809883a 	mov	r4,r21
 200a18c:	20092880 	call	2009288 <__sprint_r.part.0>
 200a190:	103fba1e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a194:	d9001b17 	ldw	r4,108(sp)
 200a198:	d8801c17 	ldw	r2,112(sp)
 200a19c:	d811883a 	mov	r8,sp
 200a1a0:	21400044 	addi	r5,r4,1
 200a1a4:	003fd606 	br	200a100 <__alt_data_end+0xfe00a100>
 200a1a8:	d9402017 	ldw	r5,128(sp)
 200a1ac:	d9002117 	ldw	r4,132(sp)
 200a1b0:	d9801a04 	addi	r6,sp,104
 200a1b4:	20092880 	call	2009288 <__sprint_r.part.0>
 200a1b8:	103fb01e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a1bc:	d8801c17 	ldw	r2,112(sp)
 200a1c0:	d8c02517 	ldw	r3,148(sp)
 200a1c4:	1cc0010e 	bge	r3,r19,200a1cc <___vfiprintf_internal_r+0xe30>
 200a1c8:	9807883a 	mov	r3,r19
 200a1cc:	d9002417 	ldw	r4,144(sp)
 200a1d0:	20c9883a 	add	r4,r4,r3
 200a1d4:	d9002415 	stw	r4,144(sp)
 200a1d8:	103e0126 	beq	r2,zero,20099e0 <__alt_data_end+0xfe0099e0>
 200a1dc:	d9402017 	ldw	r5,128(sp)
 200a1e0:	d9002117 	ldw	r4,132(sp)
 200a1e4:	d9801a04 	addi	r6,sp,104
 200a1e8:	20092880 	call	2009288 <__sprint_r.part.0>
 200a1ec:	103dfc26 	beq	r2,zero,20099e0 <__alt_data_end+0xfe0099e0>
 200a1f0:	003fa206 	br	200a07c <__alt_data_end+0xfe00a07c>
 200a1f4:	d9402017 	ldw	r5,128(sp)
 200a1f8:	d9002117 	ldw	r4,132(sp)
 200a1fc:	d9801a04 	addi	r6,sp,104
 200a200:	d9c02b15 	stw	r7,172(sp)
 200a204:	20092880 	call	2009288 <__sprint_r.part.0>
 200a208:	d9c02b17 	ldw	r7,172(sp)
 200a20c:	103f9b1e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a210:	d9001b17 	ldw	r4,108(sp)
 200a214:	d8801c17 	ldw	r2,112(sp)
 200a218:	d811883a 	mov	r8,sp
 200a21c:	21800044 	addi	r6,r4,1
 200a220:	003dbf06 	br	2009920 <__alt_data_end+0xfe009920>
 200a224:	1000d81e 	bne	r2,zero,200a588 <___vfiprintf_internal_r+0x11ec>
 200a228:	d9001d87 	ldb	r4,118(sp)
 200a22c:	20000a26 	beq	r4,zero,200a258 <___vfiprintf_internal_r+0xebc>
 200a230:	00800044 	movi	r2,1
 200a234:	d9001d84 	addi	r4,sp,118
 200a238:	100b883a 	mov	r5,r2
 200a23c:	d9000015 	stw	r4,0(sp)
 200a240:	d8800115 	stw	r2,4(sp)
 200a244:	d811883a 	mov	r8,sp
 200a248:	2809883a 	mov	r4,r5
 200a24c:	42000204 	addi	r8,r8,8
 200a250:	29400044 	addi	r5,r5,1
 200a254:	003d9506 	br	20098ac <__alt_data_end+0xfe0098ac>
 200a258:	3800fd26 	beq	r7,zero,200a650 <___vfiprintf_internal_r+0x12b4>
 200a25c:	00800084 	movi	r2,2
 200a260:	d9001d04 	addi	r4,sp,116
 200a264:	d9000015 	stw	r4,0(sp)
 200a268:	d8800115 	stw	r2,4(sp)
 200a26c:	01400044 	movi	r5,1
 200a270:	d811883a 	mov	r8,sp
 200a274:	2809883a 	mov	r4,r5
 200a278:	42000204 	addi	r8,r8,8
 200a27c:	29400044 	addi	r5,r5,1
 200a280:	003f4606 	br	2009f9c <__alt_data_end+0xfe009f9c>
 200a284:	d8802517 	ldw	r2,148(sp)
 200a288:	14c0010e 	bge	r2,r19,200a290 <___vfiprintf_internal_r+0xef4>
 200a28c:	9805883a 	mov	r2,r19
 200a290:	d9402417 	ldw	r5,144(sp)
 200a294:	288b883a 	add	r5,r5,r2
 200a298:	d9402415 	stw	r5,144(sp)
 200a29c:	003dd006 	br	20099e0 <__alt_data_end+0xfe0099e0>
 200a2a0:	d8001d85 	stb	zero,118(sp)
 200a2a4:	80005d16 	blt	r16,zero,200a41c <___vfiprintf_internal_r+0x1080>
 200a2a8:	00ffdfc4 	movi	r3,-129
 200a2ac:	9d04b03a 	or	r2,r19,r20
 200a2b0:	88e2703a 	and	r17,r17,r3
 200a2b4:	103d3726 	beq	r2,zero,2009794 <__alt_data_end+0xfe009794>
 200a2b8:	002b883a 	mov	r21,zero
 200a2bc:	d9002617 	ldw	r4,152(sp)
 200a2c0:	ddc01a04 	addi	r23,sp,104
 200a2c4:	988003cc 	andi	r2,r19,15
 200a2c8:	a006973a 	slli	r3,r20,28
 200a2cc:	2085883a 	add	r2,r4,r2
 200a2d0:	9826d13a 	srli	r19,r19,4
 200a2d4:	10800003 	ldbu	r2,0(r2)
 200a2d8:	a028d13a 	srli	r20,r20,4
 200a2dc:	bdffffc4 	addi	r23,r23,-1
 200a2e0:	1ce6b03a 	or	r19,r3,r19
 200a2e4:	b8800005 	stb	r2,0(r23)
 200a2e8:	9d04b03a 	or	r2,r19,r20
 200a2ec:	103ff51e 	bne	r2,zero,200a2c4 <__alt_data_end+0xfe00a2c4>
 200a2f0:	d8801e17 	ldw	r2,120(sp)
 200a2f4:	15e9c83a 	sub	r20,r2,r23
 200a2f8:	003d2b06 	br	20097a8 <__alt_data_end+0xfe0097a8>
 200a2fc:	d9402017 	ldw	r5,128(sp)
 200a300:	d9002117 	ldw	r4,132(sp)
 200a304:	d9801a04 	addi	r6,sp,104
 200a308:	20092880 	call	2009288 <__sprint_r.part.0>
 200a30c:	103f5b1e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a310:	d8801c17 	ldw	r2,112(sp)
 200a314:	d811883a 	mov	r8,sp
 200a318:	003f6706 	br	200a0b8 <__alt_data_end+0xfe00a0b8>
 200a31c:	d9402017 	ldw	r5,128(sp)
 200a320:	d9002117 	ldw	r4,132(sp)
 200a324:	d9801a04 	addi	r6,sp,104
 200a328:	20092880 	call	2009288 <__sprint_r.part.0>
 200a32c:	103f531e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a330:	d811883a 	mov	r8,sp
 200a334:	003cd906 	br	200969c <__alt_data_end+0xfe00969c>
 200a338:	10803fcc 	andi	r2,r2,255
 200a33c:	1080201c 	xori	r2,r2,128
 200a340:	10bfe004 	addi	r2,r2,-128
 200a344:	00c00c04 	movi	r3,48
 200a348:	10ffe926 	beq	r2,r3,200a2f0 <__alt_data_end+0xfe00a2f0>
 200a34c:	b8ffffc5 	stb	r3,-1(r23)
 200a350:	d8c01e17 	ldw	r3,120(sp)
 200a354:	b8bfffc4 	addi	r2,r23,-1
 200a358:	102f883a 	mov	r23,r2
 200a35c:	18a9c83a 	sub	r20,r3,r2
 200a360:	003d1106 	br	20097a8 <__alt_data_end+0xfe0097a8>
 200a364:	d9402017 	ldw	r5,128(sp)
 200a368:	d9002117 	ldw	r4,132(sp)
 200a36c:	d9801a04 	addi	r6,sp,104
 200a370:	d8c02a15 	stw	r3,168(sp)
 200a374:	d9c02b15 	stw	r7,172(sp)
 200a378:	20092880 	call	2009288 <__sprint_r.part.0>
 200a37c:	d8c02a17 	ldw	r3,168(sp)
 200a380:	d9c02b17 	ldw	r7,172(sp)
 200a384:	103f3d1e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a388:	d9001b17 	ldw	r4,108(sp)
 200a38c:	d8801c17 	ldw	r2,112(sp)
 200a390:	d811883a 	mov	r8,sp
 200a394:	21400044 	addi	r5,r4,1
 200a398:	003d4406 	br	20098ac <__alt_data_end+0xfe0098ac>
 200a39c:	d9402017 	ldw	r5,128(sp)
 200a3a0:	d9002117 	ldw	r4,132(sp)
 200a3a4:	d9801a04 	addi	r6,sp,104
 200a3a8:	d8c02a15 	stw	r3,168(sp)
 200a3ac:	20092880 	call	2009288 <__sprint_r.part.0>
 200a3b0:	d8c02a17 	ldw	r3,168(sp)
 200a3b4:	103f311e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a3b8:	d9001b17 	ldw	r4,108(sp)
 200a3bc:	d8801c17 	ldw	r2,112(sp)
 200a3c0:	d811883a 	mov	r8,sp
 200a3c4:	21400044 	addi	r5,r4,1
 200a3c8:	003ef406 	br	2009f9c <__alt_data_end+0xfe009f9c>
 200a3cc:	1000bd1e 	bne	r2,zero,200a6c4 <___vfiprintf_internal_r+0x1328>
 200a3d0:	01400044 	movi	r5,1
 200a3d4:	0009883a 	mov	r4,zero
 200a3d8:	d811883a 	mov	r8,sp
 200a3dc:	003ef106 	br	2009fa4 <__alt_data_end+0xfe009fa4>
 200a3e0:	d9402017 	ldw	r5,128(sp)
 200a3e4:	d9002117 	ldw	r4,132(sp)
 200a3e8:	d9801a04 	addi	r6,sp,104
 200a3ec:	20092880 	call	2009288 <__sprint_r.part.0>
 200a3f0:	103f221e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a3f4:	d9401b17 	ldw	r5,108(sp)
 200a3f8:	d8801c17 	ldw	r2,112(sp)
 200a3fc:	d811883a 	mov	r8,sp
 200a400:	29400044 	addi	r5,r5,1
 200a404:	003d6206 	br	2009990 <__alt_data_end+0xfe009990>
 200a408:	01408074 	movhi	r5,513
 200a40c:	29456604 	addi	r5,r5,5528
 200a410:	d9402615 	stw	r5,152(sp)
 200a414:	d8c02215 	stw	r3,136(sp)
 200a418:	1023883a 	mov	r17,r2
 200a41c:	9d04b03a 	or	r2,r19,r20
 200a420:	103fa51e 	bne	r2,zero,200a2b8 <__alt_data_end+0xfe00a2b8>
 200a424:	002b883a 	mov	r21,zero
 200a428:	00800084 	movi	r2,2
 200a42c:	003e4a06 	br	2009d58 <__alt_data_end+0xfe009d58>
 200a430:	01408074 	movhi	r5,513
 200a434:	29456604 	addi	r5,r5,5528
 200a438:	002b883a 	mov	r21,zero
 200a43c:	d9402615 	stw	r5,152(sp)
 200a440:	003f9e06 	br	200a2bc <__alt_data_end+0xfe00a2bc>
 200a444:	d9402217 	ldw	r5,136(sp)
 200a448:	d8001d85 	stb	zero,118(sp)
 200a44c:	0029883a 	mov	r20,zero
 200a450:	28800104 	addi	r2,r5,4
 200a454:	2cc00017 	ldw	r19,0(r5)
 200a458:	803e3a16 	blt	r16,zero,2009d44 <__alt_data_end+0xfe009d44>
 200a45c:	00ffdfc4 	movi	r3,-129
 200a460:	d8802215 	stw	r2,136(sp)
 200a464:	88e2703a 	and	r17,r17,r3
 200a468:	002b883a 	mov	r21,zero
 200a46c:	983e9b26 	beq	r19,zero,2009edc <__alt_data_end+0xfe009edc>
 200a470:	00800244 	movi	r2,9
 200a474:	14fdc936 	bltu	r2,r19,2009b9c <__alt_data_end+0xfe009b9c>
 200a478:	003e9a06 	br	2009ee4 <__alt_data_end+0xfe009ee4>
 200a47c:	00800c04 	movi	r2,48
 200a480:	d8c01d45 	stb	r3,117(sp)
 200a484:	d8801d05 	stb	r2,116(sp)
 200a488:	d8001d85 	stb	zero,118(sp)
 200a48c:	88c00094 	ori	r3,r17,2
 200a490:	80009c16 	blt	r16,zero,200a704 <___vfiprintf_internal_r+0x1368>
 200a494:	00bfdfc4 	movi	r2,-129
 200a498:	88a2703a 	and	r17,r17,r2
 200a49c:	8c400094 	ori	r17,r17,2
 200a4a0:	002b883a 	mov	r21,zero
 200a4a4:	003f8506 	br	200a2bc <__alt_data_end+0xfe00a2bc>
 200a4a8:	b029883a 	mov	r20,r22
 200a4ac:	003c0b06 	br	20094dc <__alt_data_end+0xfe0094dc>
 200a4b0:	04e7c83a 	sub	r19,zero,r19
 200a4b4:	05400b44 	movi	r21,45
 200a4b8:	9804c03a 	cmpne	r2,r19,zero
 200a4bc:	0529c83a 	sub	r20,zero,r20
 200a4c0:	dd401d85 	stb	r21,118(sp)
 200a4c4:	a0a9c83a 	sub	r20,r20,r2
 200a4c8:	80009716 	blt	r16,zero,200a728 <___vfiprintf_internal_r+0x138c>
 200a4cc:	00bfdfc4 	movi	r2,-129
 200a4d0:	88a2703a 	and	r17,r17,r2
 200a4d4:	003db006 	br	2009b98 <__alt_data_end+0xfe009b98>
 200a4d8:	b0c00007 	ldb	r3,0(r22)
 200a4dc:	003c0c06 	br	2009510 <__alt_data_end+0xfe009510>
 200a4e0:	8880100c 	andi	r2,r17,64
 200a4e4:	d8001d85 	stb	zero,118(sp)
 200a4e8:	1000461e 	bne	r2,zero,200a604 <___vfiprintf_internal_r+0x1268>
 200a4ec:	d9002217 	ldw	r4,136(sp)
 200a4f0:	0029883a 	mov	r20,zero
 200a4f4:	20800104 	addi	r2,r4,4
 200a4f8:	24c00017 	ldw	r19,0(r4)
 200a4fc:	803df80e 	bge	r16,zero,2009ce0 <__alt_data_end+0xfe009ce0>
 200a500:	9d06b03a 	or	r3,r19,r20
 200a504:	d8802215 	stw	r2,136(sp)
 200a508:	183d5e1e 	bne	r3,zero,2009a84 <__alt_data_end+0xfe009a84>
 200a50c:	002b883a 	mov	r21,zero
 200a510:	0005883a 	mov	r2,zero
 200a514:	003e1006 	br	2009d58 <__alt_data_end+0xfe009d58>
 200a518:	8880040c 	andi	r2,r17,16
 200a51c:	1000321e 	bne	r2,zero,200a5e8 <___vfiprintf_internal_r+0x124c>
 200a520:	8c40100c 	andi	r17,r17,64
 200a524:	88008d26 	beq	r17,zero,200a75c <___vfiprintf_internal_r+0x13c0>
 200a528:	d9402217 	ldw	r5,136(sp)
 200a52c:	d8c02417 	ldw	r3,144(sp)
 200a530:	28800017 	ldw	r2,0(r5)
 200a534:	29400104 	addi	r5,r5,4
 200a538:	d9402215 	stw	r5,136(sp)
 200a53c:	10c0000d 	sth	r3,0(r2)
 200a540:	003bca06 	br	200946c <__alt_data_end+0xfe00946c>
 200a544:	8880100c 	andi	r2,r17,64
 200a548:	10003a26 	beq	r2,zero,200a634 <___vfiprintf_internal_r+0x1298>
 200a54c:	d8802217 	ldw	r2,136(sp)
 200a550:	14c0000f 	ldh	r19,0(r2)
 200a554:	10800104 	addi	r2,r2,4
 200a558:	d8802215 	stw	r2,136(sp)
 200a55c:	9829d7fa 	srai	r20,r19,31
 200a560:	a005883a 	mov	r2,r20
 200a564:	003d8506 	br	2009b7c <__alt_data_end+0xfe009b7c>
 200a568:	8880100c 	andi	r2,r17,64
 200a56c:	10002b26 	beq	r2,zero,200a61c <___vfiprintf_internal_r+0x1280>
 200a570:	d8802217 	ldw	r2,136(sp)
 200a574:	0029883a 	mov	r20,zero
 200a578:	14c0000b 	ldhu	r19,0(r2)
 200a57c:	10800104 	addi	r2,r2,4
 200a580:	d8802215 	stw	r2,136(sp)
 200a584:	003d5d06 	br	2009afc <__alt_data_end+0xfe009afc>
 200a588:	d9402017 	ldw	r5,128(sp)
 200a58c:	d9002117 	ldw	r4,132(sp)
 200a590:	d9801a04 	addi	r6,sp,104
 200a594:	d8c02a15 	stw	r3,168(sp)
 200a598:	d9c02b15 	stw	r7,172(sp)
 200a59c:	20092880 	call	2009288 <__sprint_r.part.0>
 200a5a0:	d8c02a17 	ldw	r3,168(sp)
 200a5a4:	d9c02b17 	ldw	r7,172(sp)
 200a5a8:	103eb41e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a5ac:	d9001b17 	ldw	r4,108(sp)
 200a5b0:	d8801c17 	ldw	r2,112(sp)
 200a5b4:	d811883a 	mov	r8,sp
 200a5b8:	21400044 	addi	r5,r4,1
 200a5bc:	003e6706 	br	2009f5c <__alt_data_end+0xfe009f5c>
 200a5c0:	00bfffc4 	movi	r2,-1
 200a5c4:	003c4a06 	br	20096f0 <__alt_data_end+0xfe0096f0>
 200a5c8:	9805883a 	mov	r2,r19
 200a5cc:	003ee806 	br	200a170 <__alt_data_end+0xfe00a170>
 200a5d0:	d8c02217 	ldw	r3,136(sp)
 200a5d4:	0029883a 	mov	r20,zero
 200a5d8:	18800104 	addi	r2,r3,4
 200a5dc:	1cc0000b 	ldhu	r19,0(r3)
 200a5e0:	803f9e0e 	bge	r16,zero,200a45c <__alt_data_end+0xfe00a45c>
 200a5e4:	003dd706 	br	2009d44 <__alt_data_end+0xfe009d44>
 200a5e8:	d8c02217 	ldw	r3,136(sp)
 200a5ec:	d9002417 	ldw	r4,144(sp)
 200a5f0:	18800017 	ldw	r2,0(r3)
 200a5f4:	18c00104 	addi	r3,r3,4
 200a5f8:	d8c02215 	stw	r3,136(sp)
 200a5fc:	11000015 	stw	r4,0(r2)
 200a600:	003b9a06 	br	200946c <__alt_data_end+0xfe00946c>
 200a604:	d8c02217 	ldw	r3,136(sp)
 200a608:	0029883a 	mov	r20,zero
 200a60c:	18800104 	addi	r2,r3,4
 200a610:	1cc0000b 	ldhu	r19,0(r3)
 200a614:	803db20e 	bge	r16,zero,2009ce0 <__alt_data_end+0xfe009ce0>
 200a618:	003fb906 	br	200a500 <__alt_data_end+0xfe00a500>
 200a61c:	d9002217 	ldw	r4,136(sp)
 200a620:	0029883a 	mov	r20,zero
 200a624:	24c00017 	ldw	r19,0(r4)
 200a628:	21000104 	addi	r4,r4,4
 200a62c:	d9002215 	stw	r4,136(sp)
 200a630:	003d3206 	br	2009afc <__alt_data_end+0xfe009afc>
 200a634:	d8c02217 	ldw	r3,136(sp)
 200a638:	1cc00017 	ldw	r19,0(r3)
 200a63c:	18c00104 	addi	r3,r3,4
 200a640:	d8c02215 	stw	r3,136(sp)
 200a644:	9829d7fa 	srai	r20,r19,31
 200a648:	a005883a 	mov	r2,r20
 200a64c:	003d4b06 	br	2009b7c <__alt_data_end+0xfe009b7c>
 200a650:	0009883a 	mov	r4,zero
 200a654:	01400044 	movi	r5,1
 200a658:	d811883a 	mov	r8,sp
 200a65c:	003e4f06 	br	2009f9c <__alt_data_end+0xfe009f9c>
 200a660:	d8c02215 	stw	r3,136(sp)
 200a664:	002b883a 	mov	r21,zero
 200a668:	003db806 	br	2009d4c <__alt_data_end+0xfe009d4c>
 200a66c:	d811883a 	mov	r8,sp
 200a670:	003e9606 	br	200a0cc <__alt_data_end+0xfe00a0cc>
 200a674:	01008074 	movhi	r4,513
 200a678:	2105c604 	addi	r4,r4,5912
 200a67c:	d9002315 	stw	r4,140(sp)
 200a680:	003e6306 	br	200a010 <__alt_data_end+0xfe00a010>
 200a684:	b0c00043 	ldbu	r3,1(r22)
 200a688:	8c400814 	ori	r17,r17,32
 200a68c:	b5800044 	addi	r22,r22,1
 200a690:	18c03fcc 	andi	r3,r3,255
 200a694:	18c0201c 	xori	r3,r3,128
 200a698:	18ffe004 	addi	r3,r3,-128
 200a69c:	003b9c06 	br	2009510 <__alt_data_end+0xfe009510>
 200a6a0:	b809883a 	mov	r4,r23
 200a6a4:	da002a15 	stw	r8,168(sp)
 200a6a8:	20032740 	call	2003274 <strlen>
 200a6ac:	1029883a 	mov	r20,r2
 200a6b0:	dd401d83 	ldbu	r21,118(sp)
 200a6b4:	df002215 	stw	fp,136(sp)
 200a6b8:	0021883a 	mov	r16,zero
 200a6bc:	da002a17 	ldw	r8,168(sp)
 200a6c0:	003c3906 	br	20097a8 <__alt_data_end+0xfe0097a8>
 200a6c4:	d9402017 	ldw	r5,128(sp)
 200a6c8:	d9002117 	ldw	r4,132(sp)
 200a6cc:	d9801a04 	addi	r6,sp,104
 200a6d0:	20092880 	call	2009288 <__sprint_r.part.0>
 200a6d4:	103e691e 	bne	r2,zero,200a07c <__alt_data_end+0xfe00a07c>
 200a6d8:	d9001b17 	ldw	r4,108(sp)
 200a6dc:	d8801c17 	ldw	r2,112(sp)
 200a6e0:	d811883a 	mov	r8,sp
 200a6e4:	21400044 	addi	r5,r4,1
 200a6e8:	003e2e06 	br	2009fa4 <__alt_data_end+0xfe009fa4>
 200a6ec:	01008074 	movhi	r4,513
 200a6f0:	2105ca04 	addi	r4,r4,5928
 200a6f4:	d9002315 	stw	r4,140(sp)
 200a6f8:	d9001b17 	ldw	r4,108(sp)
 200a6fc:	21000044 	addi	r4,r4,1
 200a700:	003c5e06 	br	200987c <__alt_data_end+0xfe00987c>
 200a704:	002b883a 	mov	r21,zero
 200a708:	00800084 	movi	r2,2
 200a70c:	10803fcc 	andi	r2,r2,255
 200a710:	01000044 	movi	r4,1
 200a714:	11002b26 	beq	r2,r4,200a7c4 <___vfiprintf_internal_r+0x1428>
 200a718:	01000084 	movi	r4,2
 200a71c:	11002b1e 	bne	r2,r4,200a7cc <___vfiprintf_internal_r+0x1430>
 200a720:	1823883a 	mov	r17,r3
 200a724:	003ee506 	br	200a2bc <__alt_data_end+0xfe00a2bc>
 200a728:	8807883a 	mov	r3,r17
 200a72c:	00800044 	movi	r2,1
 200a730:	003ff606 	br	200a70c <__alt_data_end+0xfe00a70c>
 200a734:	00800184 	movi	r2,6
 200a738:	1400012e 	bgeu	r2,r16,200a740 <___vfiprintf_internal_r+0x13a4>
 200a73c:	1021883a 	mov	r16,r2
 200a740:	8029883a 	mov	r20,r16
 200a744:	8027883a 	mov	r19,r16
 200a748:	80002216 	blt	r16,zero,200a7d4 <___vfiprintf_internal_r+0x1438>
 200a74c:	05c08074 	movhi	r23,513
 200a750:	df002215 	stw	fp,136(sp)
 200a754:	bdc56b04 	addi	r23,r23,5548
 200a758:	003cfb06 	br	2009b48 <__alt_data_end+0xfe009b48>
 200a75c:	d9002217 	ldw	r4,136(sp)
 200a760:	d9402417 	ldw	r5,144(sp)
 200a764:	20800017 	ldw	r2,0(r4)
 200a768:	21000104 	addi	r4,r4,4
 200a76c:	d9002215 	stw	r4,136(sp)
 200a770:	11400015 	stw	r5,0(r2)
 200a774:	003b3d06 	br	200946c <__alt_data_end+0xfe00946c>
 200a778:	01408074 	movhi	r5,513
 200a77c:	2945ca04 	addi	r5,r5,5928
 200a780:	d9402315 	stw	r5,140(sp)
 200a784:	d9401b17 	ldw	r5,108(sp)
 200a788:	29400044 	addi	r5,r5,1
 200a78c:	003e6d06 	br	200a144 <__alt_data_end+0xfe00a144>
 200a790:	8029883a 	mov	r20,r16
 200a794:	dd401d83 	ldbu	r21,118(sp)
 200a798:	df002215 	stw	fp,136(sp)
 200a79c:	0021883a 	mov	r16,zero
 200a7a0:	003c0106 	br	20097a8 <__alt_data_end+0xfe0097a8>
 200a7a4:	00c08074 	movhi	r3,513
 200a7a8:	18c5c604 	addi	r3,r3,5912
 200a7ac:	d8c02315 	stw	r3,140(sp)
 200a7b0:	280d883a 	mov	r6,r5
 200a7b4:	003c6906 	br	200995c <__alt_data_end+0xfe00995c>
 200a7b8:	802d883a 	mov	r22,r16
 200a7bc:	0021883a 	mov	r16,zero
 200a7c0:	003b5406 	br	2009514 <__alt_data_end+0xfe009514>
 200a7c4:	1823883a 	mov	r17,r3
 200a7c8:	003cf306 	br	2009b98 <__alt_data_end+0xfe009b98>
 200a7cc:	1823883a 	mov	r17,r3
 200a7d0:	003cad06 	br	2009a88 <__alt_data_end+0xfe009a88>
 200a7d4:	0027883a 	mov	r19,zero
 200a7d8:	003fdc06 	br	200a74c <__alt_data_end+0xfe00a74c>
 200a7dc:	d9402217 	ldw	r5,136(sp)
 200a7e0:	8005883a 	mov	r2,r16
 200a7e4:	b0c00043 	ldbu	r3,1(r22)
 200a7e8:	2c000017 	ldw	r16,0(r5)
 200a7ec:	29000104 	addi	r4,r5,4
 200a7f0:	d9002215 	stw	r4,136(sp)
 200a7f4:	102d883a 	mov	r22,r2
 200a7f8:	803fa50e 	bge	r16,zero,200a690 <__alt_data_end+0xfe00a690>
 200a7fc:	18c03fcc 	andi	r3,r3,255
 200a800:	18c0201c 	xori	r3,r3,128
 200a804:	043fffc4 	movi	r16,-1
 200a808:	18ffe004 	addi	r3,r3,-128
 200a80c:	003b4006 	br	2009510 <__alt_data_end+0xfe009510>
 200a810:	d9402303 	ldbu	r5,140(sp)
 200a814:	d9401d85 	stb	r5,118(sp)
 200a818:	003cae06 	br	2009ad4 <__alt_data_end+0xfe009ad4>
 200a81c:	d8c02303 	ldbu	r3,140(sp)
 200a820:	d8c01d85 	stb	r3,118(sp)
 200a824:	003d1406 	br	2009c78 <__alt_data_end+0xfe009c78>
 200a828:	d8c02303 	ldbu	r3,140(sp)
 200a82c:	d8c01d85 	stb	r3,118(sp)
 200a830:	003cca06 	br	2009b5c <__alt_data_end+0xfe009b5c>
 200a834:	8880004c 	andi	r2,r17,1
 200a838:	002b883a 	mov	r21,zero
 200a83c:	10000526 	beq	r2,zero,200a854 <___vfiprintf_internal_r+0x14b8>
 200a840:	00800c04 	movi	r2,48
 200a844:	d88019c5 	stb	r2,103(sp)
 200a848:	dd002817 	ldw	r20,160(sp)
 200a84c:	ddc019c4 	addi	r23,sp,103
 200a850:	003bd506 	br	20097a8 <__alt_data_end+0xfe0097a8>
 200a854:	0029883a 	mov	r20,zero
 200a858:	ddc01a04 	addi	r23,sp,104
 200a85c:	003bd206 	br	20097a8 <__alt_data_end+0xfe0097a8>
 200a860:	d9002303 	ldbu	r4,140(sp)
 200a864:	d9001d85 	stb	r4,118(sp)
 200a868:	003da606 	br	2009f04 <__alt_data_end+0xfe009f04>
 200a86c:	d8c02303 	ldbu	r3,140(sp)
 200a870:	d8c01d85 	stb	r3,118(sp)
 200a874:	003c7606 	br	2009a50 <__alt_data_end+0xfe009a50>
 200a878:	d8c02303 	ldbu	r3,140(sp)
 200a87c:	d8c01d85 	stb	r3,118(sp)
 200a880:	003c6506 	br	2009a18 <__alt_data_end+0xfe009a18>
 200a884:	d9002303 	ldbu	r4,140(sp)
 200a888:	d9001d85 	stb	r4,118(sp)
 200a88c:	003d3d06 	br	2009d84 <__alt_data_end+0xfe009d84>
 200a890:	d8c02303 	ldbu	r3,140(sp)
 200a894:	d8c01d85 	stb	r3,118(sp)
 200a898:	003d1d06 	br	2009d10 <__alt_data_end+0xfe009d10>
 200a89c:	d8c02303 	ldbu	r3,140(sp)
 200a8a0:	d8c01d85 	stb	r3,118(sp)
 200a8a4:	003d0306 	br	2009cb4 <__alt_data_end+0xfe009cb4>

0200a8a8 <__vfiprintf_internal>:
 200a8a8:	00808074 	movhi	r2,513
 200a8ac:	108d1404 	addi	r2,r2,13392
 200a8b0:	300f883a 	mov	r7,r6
 200a8b4:	280d883a 	mov	r6,r5
 200a8b8:	200b883a 	mov	r5,r4
 200a8bc:	11000017 	ldw	r4,0(r2)
 200a8c0:	200939c1 	jmpi	200939c <___vfiprintf_internal_r>

0200a8c4 <__sbprintf>:
 200a8c4:	2880030b 	ldhu	r2,12(r5)
 200a8c8:	2ac01917 	ldw	r11,100(r5)
 200a8cc:	2a80038b 	ldhu	r10,14(r5)
 200a8d0:	2a400717 	ldw	r9,28(r5)
 200a8d4:	2a000917 	ldw	r8,36(r5)
 200a8d8:	defee204 	addi	sp,sp,-1144
 200a8dc:	00c10004 	movi	r3,1024
 200a8e0:	dc011a15 	stw	r16,1128(sp)
 200a8e4:	10bfff4c 	andi	r2,r2,65533
 200a8e8:	2821883a 	mov	r16,r5
 200a8ec:	d8cb883a 	add	r5,sp,r3
 200a8f0:	dc811c15 	stw	r18,1136(sp)
 200a8f4:	dc411b15 	stw	r17,1132(sp)
 200a8f8:	dfc11d15 	stw	ra,1140(sp)
 200a8fc:	2025883a 	mov	r18,r4
 200a900:	d881030d 	sth	r2,1036(sp)
 200a904:	dac11915 	stw	r11,1124(sp)
 200a908:	da81038d 	sth	r10,1038(sp)
 200a90c:	da410715 	stw	r9,1052(sp)
 200a910:	da010915 	stw	r8,1060(sp)
 200a914:	dec10015 	stw	sp,1024(sp)
 200a918:	dec10415 	stw	sp,1040(sp)
 200a91c:	d8c10215 	stw	r3,1032(sp)
 200a920:	d8c10515 	stw	r3,1044(sp)
 200a924:	d8010615 	stw	zero,1048(sp)
 200a928:	200939c0 	call	200939c <___vfiprintf_internal_r>
 200a92c:	1023883a 	mov	r17,r2
 200a930:	10000416 	blt	r2,zero,200a944 <__sbprintf+0x80>
 200a934:	d9410004 	addi	r5,sp,1024
 200a938:	9009883a 	mov	r4,r18
 200a93c:	2000d940 	call	2000d94 <_fflush_r>
 200a940:	10000d1e 	bne	r2,zero,200a978 <__sbprintf+0xb4>
 200a944:	d881030b 	ldhu	r2,1036(sp)
 200a948:	1080100c 	andi	r2,r2,64
 200a94c:	10000326 	beq	r2,zero,200a95c <__sbprintf+0x98>
 200a950:	8080030b 	ldhu	r2,12(r16)
 200a954:	10801014 	ori	r2,r2,64
 200a958:	8080030d 	sth	r2,12(r16)
 200a95c:	8805883a 	mov	r2,r17
 200a960:	dfc11d17 	ldw	ra,1140(sp)
 200a964:	dc811c17 	ldw	r18,1136(sp)
 200a968:	dc411b17 	ldw	r17,1132(sp)
 200a96c:	dc011a17 	ldw	r16,1128(sp)
 200a970:	dec11e04 	addi	sp,sp,1144
 200a974:	f800283a 	ret
 200a978:	047fffc4 	movi	r17,-1
 200a97c:	003ff106 	br	200a944 <__alt_data_end+0xfe00a944>

0200a980 <_calloc_r>:
 200a980:	defffe04 	addi	sp,sp,-8
 200a984:	2805883a 	mov	r2,r5
 200a988:	dc000015 	stw	r16,0(sp)
 200a98c:	300b883a 	mov	r5,r6
 200a990:	2021883a 	mov	r16,r4
 200a994:	1009883a 	mov	r4,r2
 200a998:	dfc00115 	stw	ra,4(sp)
 200a99c:	2000a4c0 	call	2000a4c <__mulsi3>
 200a9a0:	100b883a 	mov	r5,r2
 200a9a4:	8009883a 	mov	r4,r16
 200a9a8:	20022d80 	call	20022d8 <_malloc_r>
 200a9ac:	10002926 	beq	r2,zero,200aa54 <_calloc_r+0xd4>
 200a9b0:	11bfff17 	ldw	r6,-4(r2)
 200a9b4:	1021883a 	mov	r16,r2
 200a9b8:	00bfff04 	movi	r2,-4
 200a9bc:	308c703a 	and	r6,r6,r2
 200a9c0:	00c00904 	movi	r3,36
 200a9c4:	308d883a 	add	r6,r6,r2
 200a9c8:	19801636 	bltu	r3,r6,200aa24 <_calloc_r+0xa4>
 200a9cc:	008004c4 	movi	r2,19
 200a9d0:	11800b2e 	bgeu	r2,r6,200aa00 <_calloc_r+0x80>
 200a9d4:	80000015 	stw	zero,0(r16)
 200a9d8:	80000115 	stw	zero,4(r16)
 200a9dc:	008006c4 	movi	r2,27
 200a9e0:	11801a2e 	bgeu	r2,r6,200aa4c <_calloc_r+0xcc>
 200a9e4:	80000215 	stw	zero,8(r16)
 200a9e8:	80000315 	stw	zero,12(r16)
 200a9ec:	30c0151e 	bne	r6,r3,200aa44 <_calloc_r+0xc4>
 200a9f0:	80000415 	stw	zero,16(r16)
 200a9f4:	80800604 	addi	r2,r16,24
 200a9f8:	80000515 	stw	zero,20(r16)
 200a9fc:	00000106 	br	200aa04 <_calloc_r+0x84>
 200aa00:	8005883a 	mov	r2,r16
 200aa04:	10000015 	stw	zero,0(r2)
 200aa08:	10000115 	stw	zero,4(r2)
 200aa0c:	10000215 	stw	zero,8(r2)
 200aa10:	8005883a 	mov	r2,r16
 200aa14:	dfc00117 	ldw	ra,4(sp)
 200aa18:	dc000017 	ldw	r16,0(sp)
 200aa1c:	dec00204 	addi	sp,sp,8
 200aa20:	f800283a 	ret
 200aa24:	000b883a 	mov	r5,zero
 200aa28:	8009883a 	mov	r4,r16
 200aa2c:	2002c2c0 	call	2002c2c <memset>
 200aa30:	8005883a 	mov	r2,r16
 200aa34:	dfc00117 	ldw	ra,4(sp)
 200aa38:	dc000017 	ldw	r16,0(sp)
 200aa3c:	dec00204 	addi	sp,sp,8
 200aa40:	f800283a 	ret
 200aa44:	80800404 	addi	r2,r16,16
 200aa48:	003fee06 	br	200aa04 <__alt_data_end+0xfe00aa04>
 200aa4c:	80800204 	addi	r2,r16,8
 200aa50:	003fec06 	br	200aa04 <__alt_data_end+0xfe00aa04>
 200aa54:	0005883a 	mov	r2,zero
 200aa58:	003fee06 	br	200aa14 <__alt_data_end+0xfe00aa14>

0200aa5c <__fputwc>:
 200aa5c:	defff804 	addi	sp,sp,-32
 200aa60:	dcc00415 	stw	r19,16(sp)
 200aa64:	dc800315 	stw	r18,12(sp)
 200aa68:	dc000115 	stw	r16,4(sp)
 200aa6c:	dfc00715 	stw	ra,28(sp)
 200aa70:	dd400615 	stw	r21,24(sp)
 200aa74:	dd000515 	stw	r20,20(sp)
 200aa78:	dc400215 	stw	r17,8(sp)
 200aa7c:	2027883a 	mov	r19,r4
 200aa80:	2825883a 	mov	r18,r5
 200aa84:	3021883a 	mov	r16,r6
 200aa88:	20077c80 	call	20077c8 <__locale_mb_cur_max>
 200aa8c:	00c00044 	movi	r3,1
 200aa90:	10c03e26 	beq	r2,r3,200ab8c <__fputwc+0x130>
 200aa94:	81c01704 	addi	r7,r16,92
 200aa98:	900d883a 	mov	r6,r18
 200aa9c:	d80b883a 	mov	r5,sp
 200aaa0:	9809883a 	mov	r4,r19
 200aaa4:	200adbc0 	call	200adbc <_wcrtomb_r>
 200aaa8:	1029883a 	mov	r20,r2
 200aaac:	00bfffc4 	movi	r2,-1
 200aab0:	a0802026 	beq	r20,r2,200ab34 <__fputwc+0xd8>
 200aab4:	d9400003 	ldbu	r5,0(sp)
 200aab8:	a0001c26 	beq	r20,zero,200ab2c <__fputwc+0xd0>
 200aabc:	0023883a 	mov	r17,zero
 200aac0:	05400284 	movi	r21,10
 200aac4:	00000906 	br	200aaec <__fputwc+0x90>
 200aac8:	80800017 	ldw	r2,0(r16)
 200aacc:	11400005 	stb	r5,0(r2)
 200aad0:	80c00017 	ldw	r3,0(r16)
 200aad4:	18c00044 	addi	r3,r3,1
 200aad8:	80c00015 	stw	r3,0(r16)
 200aadc:	8c400044 	addi	r17,r17,1
 200aae0:	dc45883a 	add	r2,sp,r17
 200aae4:	8d00112e 	bgeu	r17,r20,200ab2c <__fputwc+0xd0>
 200aae8:	11400003 	ldbu	r5,0(r2)
 200aaec:	80c00217 	ldw	r3,8(r16)
 200aaf0:	18ffffc4 	addi	r3,r3,-1
 200aaf4:	80c00215 	stw	r3,8(r16)
 200aaf8:	183ff30e 	bge	r3,zero,200aac8 <__alt_data_end+0xfe00aac8>
 200aafc:	80800617 	ldw	r2,24(r16)
 200ab00:	18801916 	blt	r3,r2,200ab68 <__fputwc+0x10c>
 200ab04:	80800017 	ldw	r2,0(r16)
 200ab08:	11400005 	stb	r5,0(r2)
 200ab0c:	80800017 	ldw	r2,0(r16)
 200ab10:	10c00003 	ldbu	r3,0(r2)
 200ab14:	10800044 	addi	r2,r2,1
 200ab18:	1d402326 	beq	r3,r21,200aba8 <__fputwc+0x14c>
 200ab1c:	80800015 	stw	r2,0(r16)
 200ab20:	8c400044 	addi	r17,r17,1
 200ab24:	dc45883a 	add	r2,sp,r17
 200ab28:	8d3fef36 	bltu	r17,r20,200aae8 <__alt_data_end+0xfe00aae8>
 200ab2c:	9005883a 	mov	r2,r18
 200ab30:	00000406 	br	200ab44 <__fputwc+0xe8>
 200ab34:	80c0030b 	ldhu	r3,12(r16)
 200ab38:	a005883a 	mov	r2,r20
 200ab3c:	18c01014 	ori	r3,r3,64
 200ab40:	80c0030d 	sth	r3,12(r16)
 200ab44:	dfc00717 	ldw	ra,28(sp)
 200ab48:	dd400617 	ldw	r21,24(sp)
 200ab4c:	dd000517 	ldw	r20,20(sp)
 200ab50:	dcc00417 	ldw	r19,16(sp)
 200ab54:	dc800317 	ldw	r18,12(sp)
 200ab58:	dc400217 	ldw	r17,8(sp)
 200ab5c:	dc000117 	ldw	r16,4(sp)
 200ab60:	dec00804 	addi	sp,sp,32
 200ab64:	f800283a 	ret
 200ab68:	800d883a 	mov	r6,r16
 200ab6c:	29403fcc 	andi	r5,r5,255
 200ab70:	9809883a 	mov	r4,r19
 200ab74:	200ac640 	call	200ac64 <__swbuf_r>
 200ab78:	10bfffe0 	cmpeqi	r2,r2,-1
 200ab7c:	10803fcc 	andi	r2,r2,255
 200ab80:	103fd626 	beq	r2,zero,200aadc <__alt_data_end+0xfe00aadc>
 200ab84:	00bfffc4 	movi	r2,-1
 200ab88:	003fee06 	br	200ab44 <__alt_data_end+0xfe00ab44>
 200ab8c:	90ffffc4 	addi	r3,r18,-1
 200ab90:	01003f84 	movi	r4,254
 200ab94:	20ffbf36 	bltu	r4,r3,200aa94 <__alt_data_end+0xfe00aa94>
 200ab98:	900b883a 	mov	r5,r18
 200ab9c:	dc800005 	stb	r18,0(sp)
 200aba0:	1029883a 	mov	r20,r2
 200aba4:	003fc506 	br	200aabc <__alt_data_end+0xfe00aabc>
 200aba8:	800d883a 	mov	r6,r16
 200abac:	a80b883a 	mov	r5,r21
 200abb0:	9809883a 	mov	r4,r19
 200abb4:	200ac640 	call	200ac64 <__swbuf_r>
 200abb8:	10bfffe0 	cmpeqi	r2,r2,-1
 200abbc:	003fef06 	br	200ab7c <__alt_data_end+0xfe00ab7c>

0200abc0 <_fputwc_r>:
 200abc0:	3080030b 	ldhu	r2,12(r6)
 200abc4:	10c8000c 	andi	r3,r2,8192
 200abc8:	1800051e 	bne	r3,zero,200abe0 <_fputwc_r+0x20>
 200abcc:	30c01917 	ldw	r3,100(r6)
 200abd0:	10880014 	ori	r2,r2,8192
 200abd4:	3080030d 	sth	r2,12(r6)
 200abd8:	18880014 	ori	r2,r3,8192
 200abdc:	30801915 	stw	r2,100(r6)
 200abe0:	200aa5c1 	jmpi	200aa5c <__fputwc>

0200abe4 <fputwc>:
 200abe4:	00808074 	movhi	r2,513
 200abe8:	defffc04 	addi	sp,sp,-16
 200abec:	108d1404 	addi	r2,r2,13392
 200abf0:	dc000115 	stw	r16,4(sp)
 200abf4:	14000017 	ldw	r16,0(r2)
 200abf8:	dc400215 	stw	r17,8(sp)
 200abfc:	dfc00315 	stw	ra,12(sp)
 200ac00:	2023883a 	mov	r17,r4
 200ac04:	80000226 	beq	r16,zero,200ac10 <fputwc+0x2c>
 200ac08:	80800e17 	ldw	r2,56(r16)
 200ac0c:	10001026 	beq	r2,zero,200ac50 <fputwc+0x6c>
 200ac10:	2880030b 	ldhu	r2,12(r5)
 200ac14:	10c8000c 	andi	r3,r2,8192
 200ac18:	1800051e 	bne	r3,zero,200ac30 <fputwc+0x4c>
 200ac1c:	28c01917 	ldw	r3,100(r5)
 200ac20:	10880014 	ori	r2,r2,8192
 200ac24:	2880030d 	sth	r2,12(r5)
 200ac28:	18880014 	ori	r2,r3,8192
 200ac2c:	28801915 	stw	r2,100(r5)
 200ac30:	280d883a 	mov	r6,r5
 200ac34:	8009883a 	mov	r4,r16
 200ac38:	880b883a 	mov	r5,r17
 200ac3c:	dfc00317 	ldw	ra,12(sp)
 200ac40:	dc400217 	ldw	r17,8(sp)
 200ac44:	dc000117 	ldw	r16,4(sp)
 200ac48:	dec00404 	addi	sp,sp,16
 200ac4c:	200aa5c1 	jmpi	200aa5c <__fputwc>
 200ac50:	8009883a 	mov	r4,r16
 200ac54:	d9400015 	stw	r5,0(sp)
 200ac58:	20011800 	call	2001180 <__sinit>
 200ac5c:	d9400017 	ldw	r5,0(sp)
 200ac60:	003feb06 	br	200ac10 <__alt_data_end+0xfe00ac10>

0200ac64 <__swbuf_r>:
 200ac64:	defffb04 	addi	sp,sp,-20
 200ac68:	dcc00315 	stw	r19,12(sp)
 200ac6c:	dc800215 	stw	r18,8(sp)
 200ac70:	dc000015 	stw	r16,0(sp)
 200ac74:	dfc00415 	stw	ra,16(sp)
 200ac78:	dc400115 	stw	r17,4(sp)
 200ac7c:	2025883a 	mov	r18,r4
 200ac80:	2827883a 	mov	r19,r5
 200ac84:	3021883a 	mov	r16,r6
 200ac88:	20000226 	beq	r4,zero,200ac94 <__swbuf_r+0x30>
 200ac8c:	20800e17 	ldw	r2,56(r4)
 200ac90:	10004226 	beq	r2,zero,200ad9c <__swbuf_r+0x138>
 200ac94:	80800617 	ldw	r2,24(r16)
 200ac98:	8100030b 	ldhu	r4,12(r16)
 200ac9c:	80800215 	stw	r2,8(r16)
 200aca0:	2080020c 	andi	r2,r4,8
 200aca4:	10003626 	beq	r2,zero,200ad80 <__swbuf_r+0x11c>
 200aca8:	80c00417 	ldw	r3,16(r16)
 200acac:	18003426 	beq	r3,zero,200ad80 <__swbuf_r+0x11c>
 200acb0:	2088000c 	andi	r2,r4,8192
 200acb4:	9c403fcc 	andi	r17,r19,255
 200acb8:	10001a26 	beq	r2,zero,200ad24 <__swbuf_r+0xc0>
 200acbc:	80800017 	ldw	r2,0(r16)
 200acc0:	81000517 	ldw	r4,20(r16)
 200acc4:	10c7c83a 	sub	r3,r2,r3
 200acc8:	1900200e 	bge	r3,r4,200ad4c <__swbuf_r+0xe8>
 200accc:	18c00044 	addi	r3,r3,1
 200acd0:	81000217 	ldw	r4,8(r16)
 200acd4:	11400044 	addi	r5,r2,1
 200acd8:	81400015 	stw	r5,0(r16)
 200acdc:	213fffc4 	addi	r4,r4,-1
 200ace0:	81000215 	stw	r4,8(r16)
 200ace4:	14c00005 	stb	r19,0(r2)
 200ace8:	80800517 	ldw	r2,20(r16)
 200acec:	10c01e26 	beq	r2,r3,200ad68 <__swbuf_r+0x104>
 200acf0:	8080030b 	ldhu	r2,12(r16)
 200acf4:	1080004c 	andi	r2,r2,1
 200acf8:	10000226 	beq	r2,zero,200ad04 <__swbuf_r+0xa0>
 200acfc:	00800284 	movi	r2,10
 200ad00:	88801926 	beq	r17,r2,200ad68 <__swbuf_r+0x104>
 200ad04:	8805883a 	mov	r2,r17
 200ad08:	dfc00417 	ldw	ra,16(sp)
 200ad0c:	dcc00317 	ldw	r19,12(sp)
 200ad10:	dc800217 	ldw	r18,8(sp)
 200ad14:	dc400117 	ldw	r17,4(sp)
 200ad18:	dc000017 	ldw	r16,0(sp)
 200ad1c:	dec00504 	addi	sp,sp,20
 200ad20:	f800283a 	ret
 200ad24:	81401917 	ldw	r5,100(r16)
 200ad28:	00b7ffc4 	movi	r2,-8193
 200ad2c:	21080014 	ori	r4,r4,8192
 200ad30:	2884703a 	and	r2,r5,r2
 200ad34:	80801915 	stw	r2,100(r16)
 200ad38:	80800017 	ldw	r2,0(r16)
 200ad3c:	8100030d 	sth	r4,12(r16)
 200ad40:	81000517 	ldw	r4,20(r16)
 200ad44:	10c7c83a 	sub	r3,r2,r3
 200ad48:	193fe016 	blt	r3,r4,200accc <__alt_data_end+0xfe00accc>
 200ad4c:	800b883a 	mov	r5,r16
 200ad50:	9009883a 	mov	r4,r18
 200ad54:	2000d940 	call	2000d94 <_fflush_r>
 200ad58:	1000071e 	bne	r2,zero,200ad78 <__swbuf_r+0x114>
 200ad5c:	80800017 	ldw	r2,0(r16)
 200ad60:	00c00044 	movi	r3,1
 200ad64:	003fda06 	br	200acd0 <__alt_data_end+0xfe00acd0>
 200ad68:	800b883a 	mov	r5,r16
 200ad6c:	9009883a 	mov	r4,r18
 200ad70:	2000d940 	call	2000d94 <_fflush_r>
 200ad74:	103fe326 	beq	r2,zero,200ad04 <__alt_data_end+0xfe00ad04>
 200ad78:	00bfffc4 	movi	r2,-1
 200ad7c:	003fe206 	br	200ad08 <__alt_data_end+0xfe00ad08>
 200ad80:	800b883a 	mov	r5,r16
 200ad84:	9009883a 	mov	r4,r18
 200ad88:	20057200 	call	2005720 <__swsetup_r>
 200ad8c:	103ffa1e 	bne	r2,zero,200ad78 <__alt_data_end+0xfe00ad78>
 200ad90:	8100030b 	ldhu	r4,12(r16)
 200ad94:	80c00417 	ldw	r3,16(r16)
 200ad98:	003fc506 	br	200acb0 <__alt_data_end+0xfe00acb0>
 200ad9c:	20011800 	call	2001180 <__sinit>
 200ada0:	003fbc06 	br	200ac94 <__alt_data_end+0xfe00ac94>

0200ada4 <__swbuf>:
 200ada4:	00808074 	movhi	r2,513
 200ada8:	108d1404 	addi	r2,r2,13392
 200adac:	280d883a 	mov	r6,r5
 200adb0:	200b883a 	mov	r5,r4
 200adb4:	11000017 	ldw	r4,0(r2)
 200adb8:	200ac641 	jmpi	200ac64 <__swbuf_r>

0200adbc <_wcrtomb_r>:
 200adbc:	defff604 	addi	sp,sp,-40
 200adc0:	00808074 	movhi	r2,513
 200adc4:	dc800815 	stw	r18,32(sp)
 200adc8:	dc400715 	stw	r17,28(sp)
 200adcc:	dc000615 	stw	r16,24(sp)
 200add0:	108d1804 	addi	r2,r2,13408
 200add4:	dfc00915 	stw	ra,36(sp)
 200add8:	2021883a 	mov	r16,r4
 200addc:	3823883a 	mov	r17,r7
 200ade0:	14800017 	ldw	r18,0(r2)
 200ade4:	28001426 	beq	r5,zero,200ae38 <_wcrtomb_r+0x7c>
 200ade8:	d9400415 	stw	r5,16(sp)
 200adec:	d9800515 	stw	r6,20(sp)
 200adf0:	20077bc0 	call	20077bc <__locale_charset>
 200adf4:	d9800517 	ldw	r6,20(sp)
 200adf8:	d9400417 	ldw	r5,16(sp)
 200adfc:	100f883a 	mov	r7,r2
 200ae00:	dc400015 	stw	r17,0(sp)
 200ae04:	8009883a 	mov	r4,r16
 200ae08:	903ee83a 	callr	r18
 200ae0c:	00ffffc4 	movi	r3,-1
 200ae10:	10c0031e 	bne	r2,r3,200ae20 <_wcrtomb_r+0x64>
 200ae14:	88000015 	stw	zero,0(r17)
 200ae18:	00c02284 	movi	r3,138
 200ae1c:	80c00015 	stw	r3,0(r16)
 200ae20:	dfc00917 	ldw	ra,36(sp)
 200ae24:	dc800817 	ldw	r18,32(sp)
 200ae28:	dc400717 	ldw	r17,28(sp)
 200ae2c:	dc000617 	ldw	r16,24(sp)
 200ae30:	dec00a04 	addi	sp,sp,40
 200ae34:	f800283a 	ret
 200ae38:	20077bc0 	call	20077bc <__locale_charset>
 200ae3c:	100f883a 	mov	r7,r2
 200ae40:	dc400015 	stw	r17,0(sp)
 200ae44:	000d883a 	mov	r6,zero
 200ae48:	d9400104 	addi	r5,sp,4
 200ae4c:	8009883a 	mov	r4,r16
 200ae50:	903ee83a 	callr	r18
 200ae54:	003fed06 	br	200ae0c <__alt_data_end+0xfe00ae0c>

0200ae58 <wcrtomb>:
 200ae58:	defff604 	addi	sp,sp,-40
 200ae5c:	00808074 	movhi	r2,513
 200ae60:	dc800615 	stw	r18,24(sp)
 200ae64:	dc400515 	stw	r17,20(sp)
 200ae68:	108d1404 	addi	r2,r2,13392
 200ae6c:	dfc00915 	stw	ra,36(sp)
 200ae70:	dd000815 	stw	r20,32(sp)
 200ae74:	dcc00715 	stw	r19,28(sp)
 200ae78:	dc000415 	stw	r16,16(sp)
 200ae7c:	3025883a 	mov	r18,r6
 200ae80:	14400017 	ldw	r17,0(r2)
 200ae84:	20001926 	beq	r4,zero,200aeec <wcrtomb+0x94>
 200ae88:	00808074 	movhi	r2,513
 200ae8c:	108d1804 	addi	r2,r2,13408
 200ae90:	15000017 	ldw	r20,0(r2)
 200ae94:	2021883a 	mov	r16,r4
 200ae98:	2827883a 	mov	r19,r5
 200ae9c:	20077bc0 	call	20077bc <__locale_charset>
 200aea0:	100f883a 	mov	r7,r2
 200aea4:	dc800015 	stw	r18,0(sp)
 200aea8:	980d883a 	mov	r6,r19
 200aeac:	800b883a 	mov	r5,r16
 200aeb0:	8809883a 	mov	r4,r17
 200aeb4:	a03ee83a 	callr	r20
 200aeb8:	00ffffc4 	movi	r3,-1
 200aebc:	10c0031e 	bne	r2,r3,200aecc <wcrtomb+0x74>
 200aec0:	90000015 	stw	zero,0(r18)
 200aec4:	00c02284 	movi	r3,138
 200aec8:	88c00015 	stw	r3,0(r17)
 200aecc:	dfc00917 	ldw	ra,36(sp)
 200aed0:	dd000817 	ldw	r20,32(sp)
 200aed4:	dcc00717 	ldw	r19,28(sp)
 200aed8:	dc800617 	ldw	r18,24(sp)
 200aedc:	dc400517 	ldw	r17,20(sp)
 200aee0:	dc000417 	ldw	r16,16(sp)
 200aee4:	dec00a04 	addi	sp,sp,40
 200aee8:	f800283a 	ret
 200aeec:	00808074 	movhi	r2,513
 200aef0:	108d1804 	addi	r2,r2,13408
 200aef4:	14000017 	ldw	r16,0(r2)
 200aef8:	20077bc0 	call	20077bc <__locale_charset>
 200aefc:	100f883a 	mov	r7,r2
 200af00:	dc800015 	stw	r18,0(sp)
 200af04:	000d883a 	mov	r6,zero
 200af08:	d9400104 	addi	r5,sp,4
 200af0c:	8809883a 	mov	r4,r17
 200af10:	803ee83a 	callr	r16
 200af14:	003fe806 	br	200aeb8 <__alt_data_end+0xfe00aeb8>

0200af18 <__ascii_wctomb>:
 200af18:	28000526 	beq	r5,zero,200af30 <__ascii_wctomb+0x18>
 200af1c:	00803fc4 	movi	r2,255
 200af20:	11800536 	bltu	r2,r6,200af38 <__ascii_wctomb+0x20>
 200af24:	29800005 	stb	r6,0(r5)
 200af28:	00800044 	movi	r2,1
 200af2c:	f800283a 	ret
 200af30:	0005883a 	mov	r2,zero
 200af34:	f800283a 	ret
 200af38:	00802284 	movi	r2,138
 200af3c:	20800015 	stw	r2,0(r4)
 200af40:	00bfffc4 	movi	r2,-1
 200af44:	f800283a 	ret

0200af48 <_wctomb_r>:
 200af48:	00808074 	movhi	r2,513
 200af4c:	defff904 	addi	sp,sp,-28
 200af50:	108d1804 	addi	r2,r2,13408
 200af54:	dfc00615 	stw	ra,24(sp)
 200af58:	dc400515 	stw	r17,20(sp)
 200af5c:	dc000415 	stw	r16,16(sp)
 200af60:	3823883a 	mov	r17,r7
 200af64:	14000017 	ldw	r16,0(r2)
 200af68:	d9000115 	stw	r4,4(sp)
 200af6c:	d9400215 	stw	r5,8(sp)
 200af70:	d9800315 	stw	r6,12(sp)
 200af74:	20077bc0 	call	20077bc <__locale_charset>
 200af78:	d9800317 	ldw	r6,12(sp)
 200af7c:	d9400217 	ldw	r5,8(sp)
 200af80:	d9000117 	ldw	r4,4(sp)
 200af84:	100f883a 	mov	r7,r2
 200af88:	dc400015 	stw	r17,0(sp)
 200af8c:	803ee83a 	callr	r16
 200af90:	dfc00617 	ldw	ra,24(sp)
 200af94:	dc400517 	ldw	r17,20(sp)
 200af98:	dc000417 	ldw	r16,16(sp)
 200af9c:	dec00704 	addi	sp,sp,28
 200afa0:	f800283a 	ret

0200afa4 <__udivdi3>:
 200afa4:	defff404 	addi	sp,sp,-48
 200afa8:	dcc00515 	stw	r19,20(sp)
 200afac:	dc000215 	stw	r16,8(sp)
 200afb0:	dfc00b15 	stw	ra,44(sp)
 200afb4:	df000a15 	stw	fp,40(sp)
 200afb8:	ddc00915 	stw	r23,36(sp)
 200afbc:	dd800815 	stw	r22,32(sp)
 200afc0:	dd400715 	stw	r21,28(sp)
 200afc4:	dd000615 	stw	r20,24(sp)
 200afc8:	dc800415 	stw	r18,16(sp)
 200afcc:	dc400315 	stw	r17,12(sp)
 200afd0:	2027883a 	mov	r19,r4
 200afd4:	2821883a 	mov	r16,r5
 200afd8:	3800461e 	bne	r7,zero,200b0f4 <__udivdi3+0x150>
 200afdc:	3023883a 	mov	r17,r6
 200afe0:	2025883a 	mov	r18,r4
 200afe4:	2980572e 	bgeu	r5,r6,200b144 <__udivdi3+0x1a0>
 200afe8:	00bfffd4 	movui	r2,65535
 200afec:	282d883a 	mov	r22,r5
 200aff0:	1180b236 	bltu	r2,r6,200b2bc <__udivdi3+0x318>
 200aff4:	00803fc4 	movi	r2,255
 200aff8:	1185803a 	cmpltu	r2,r2,r6
 200affc:	100490fa 	slli	r2,r2,3
 200b000:	3086d83a 	srl	r3,r6,r2
 200b004:	01008074 	movhi	r4,513
 200b008:	2105ce04 	addi	r4,r4,5944
 200b00c:	20c7883a 	add	r3,r4,r3
 200b010:	18c00003 	ldbu	r3,0(r3)
 200b014:	1885883a 	add	r2,r3,r2
 200b018:	00c00804 	movi	r3,32
 200b01c:	1887c83a 	sub	r3,r3,r2
 200b020:	18000526 	beq	r3,zero,200b038 <__udivdi3+0x94>
 200b024:	80e0983a 	sll	r16,r16,r3
 200b028:	9884d83a 	srl	r2,r19,r2
 200b02c:	30e2983a 	sll	r17,r6,r3
 200b030:	98e4983a 	sll	r18,r19,r3
 200b034:	142cb03a 	or	r22,r2,r16
 200b038:	882ad43a 	srli	r21,r17,16
 200b03c:	b009883a 	mov	r4,r22
 200b040:	8d3fffcc 	andi	r20,r17,65535
 200b044:	a80b883a 	mov	r5,r21
 200b048:	20009f40 	call	20009f4 <__umodsi3>
 200b04c:	b009883a 	mov	r4,r22
 200b050:	a80b883a 	mov	r5,r21
 200b054:	1027883a 	mov	r19,r2
 200b058:	20009900 	call	2000990 <__udivsi3>
 200b05c:	100b883a 	mov	r5,r2
 200b060:	a009883a 	mov	r4,r20
 200b064:	102d883a 	mov	r22,r2
 200b068:	2000a4c0 	call	2000a4c <__mulsi3>
 200b06c:	9826943a 	slli	r19,r19,16
 200b070:	9006d43a 	srli	r3,r18,16
 200b074:	1cc6b03a 	or	r3,r3,r19
 200b078:	1880052e 	bgeu	r3,r2,200b090 <__udivdi3+0xec>
 200b07c:	1c47883a 	add	r3,r3,r17
 200b080:	b13fffc4 	addi	r4,r22,-1
 200b084:	1c400136 	bltu	r3,r17,200b08c <__udivdi3+0xe8>
 200b088:	18814236 	bltu	r3,r2,200b594 <__udivdi3+0x5f0>
 200b08c:	202d883a 	mov	r22,r4
 200b090:	18a1c83a 	sub	r16,r3,r2
 200b094:	8009883a 	mov	r4,r16
 200b098:	a80b883a 	mov	r5,r21
 200b09c:	20009f40 	call	20009f4 <__umodsi3>
 200b0a0:	1027883a 	mov	r19,r2
 200b0a4:	8009883a 	mov	r4,r16
 200b0a8:	a80b883a 	mov	r5,r21
 200b0ac:	9826943a 	slli	r19,r19,16
 200b0b0:	20009900 	call	2000990 <__udivsi3>
 200b0b4:	100b883a 	mov	r5,r2
 200b0b8:	a009883a 	mov	r4,r20
 200b0bc:	94bfffcc 	andi	r18,r18,65535
 200b0c0:	1021883a 	mov	r16,r2
 200b0c4:	94e4b03a 	or	r18,r18,r19
 200b0c8:	2000a4c0 	call	2000a4c <__mulsi3>
 200b0cc:	9080052e 	bgeu	r18,r2,200b0e4 <__udivdi3+0x140>
 200b0d0:	8ca5883a 	add	r18,r17,r18
 200b0d4:	80ffffc4 	addi	r3,r16,-1
 200b0d8:	94410c36 	bltu	r18,r17,200b50c <__udivdi3+0x568>
 200b0dc:	90810b2e 	bgeu	r18,r2,200b50c <__udivdi3+0x568>
 200b0e0:	843fff84 	addi	r16,r16,-2
 200b0e4:	b004943a 	slli	r2,r22,16
 200b0e8:	0007883a 	mov	r3,zero
 200b0ec:	1404b03a 	or	r2,r2,r16
 200b0f0:	00005e06 	br	200b26c <__udivdi3+0x2c8>
 200b0f4:	29c05b36 	bltu	r5,r7,200b264 <__udivdi3+0x2c0>
 200b0f8:	00bfffd4 	movui	r2,65535
 200b0fc:	11c0672e 	bgeu	r2,r7,200b29c <__udivdi3+0x2f8>
 200b100:	00804034 	movhi	r2,256
 200b104:	10bfffc4 	addi	r2,r2,-1
 200b108:	11c10a36 	bltu	r2,r7,200b534 <__udivdi3+0x590>
 200b10c:	00800404 	movi	r2,16
 200b110:	3886d83a 	srl	r3,r7,r2
 200b114:	01008074 	movhi	r4,513
 200b118:	2105ce04 	addi	r4,r4,5944
 200b11c:	20c7883a 	add	r3,r4,r3
 200b120:	18c00003 	ldbu	r3,0(r3)
 200b124:	05c00804 	movi	r23,32
 200b128:	1885883a 	add	r2,r3,r2
 200b12c:	b8afc83a 	sub	r23,r23,r2
 200b130:	b800671e 	bne	r23,zero,200b2d0 <__udivdi3+0x32c>
 200b134:	3c010536 	bltu	r7,r16,200b54c <__udivdi3+0x5a8>
 200b138:	9985403a 	cmpgeu	r2,r19,r6
 200b13c:	0007883a 	mov	r3,zero
 200b140:	00004a06 	br	200b26c <__udivdi3+0x2c8>
 200b144:	3000041e 	bne	r6,zero,200b158 <__udivdi3+0x1b4>
 200b148:	000b883a 	mov	r5,zero
 200b14c:	01000044 	movi	r4,1
 200b150:	20009900 	call	2000990 <__udivsi3>
 200b154:	1023883a 	mov	r17,r2
 200b158:	00bfffd4 	movui	r2,65535
 200b15c:	1440532e 	bgeu	r2,r17,200b2ac <__udivdi3+0x308>
 200b160:	00804034 	movhi	r2,256
 200b164:	10bfffc4 	addi	r2,r2,-1
 200b168:	1440f436 	bltu	r2,r17,200b53c <__udivdi3+0x598>
 200b16c:	00800404 	movi	r2,16
 200b170:	8886d83a 	srl	r3,r17,r2
 200b174:	01008074 	movhi	r4,513
 200b178:	2105ce04 	addi	r4,r4,5944
 200b17c:	20c7883a 	add	r3,r4,r3
 200b180:	18c00003 	ldbu	r3,0(r3)
 200b184:	1885883a 	add	r2,r3,r2
 200b188:	00c00804 	movi	r3,32
 200b18c:	1887c83a 	sub	r3,r3,r2
 200b190:	1800a51e 	bne	r3,zero,200b428 <__udivdi3+0x484>
 200b194:	882ad43a 	srli	r21,r17,16
 200b198:	8461c83a 	sub	r16,r16,r17
 200b19c:	8d3fffcc 	andi	r20,r17,65535
 200b1a0:	00c00044 	movi	r3,1
 200b1a4:	a80b883a 	mov	r5,r21
 200b1a8:	8009883a 	mov	r4,r16
 200b1ac:	d8c00115 	stw	r3,4(sp)
 200b1b0:	20009f40 	call	20009f4 <__umodsi3>
 200b1b4:	a80b883a 	mov	r5,r21
 200b1b8:	8009883a 	mov	r4,r16
 200b1bc:	1027883a 	mov	r19,r2
 200b1c0:	20009900 	call	2000990 <__udivsi3>
 200b1c4:	a00b883a 	mov	r5,r20
 200b1c8:	1009883a 	mov	r4,r2
 200b1cc:	102d883a 	mov	r22,r2
 200b1d0:	2000a4c0 	call	2000a4c <__mulsi3>
 200b1d4:	9826943a 	slli	r19,r19,16
 200b1d8:	900ed43a 	srli	r7,r18,16
 200b1dc:	d8c00117 	ldw	r3,4(sp)
 200b1e0:	3cceb03a 	or	r7,r7,r19
 200b1e4:	3880052e 	bgeu	r7,r2,200b1fc <__udivdi3+0x258>
 200b1e8:	3c4f883a 	add	r7,r7,r17
 200b1ec:	b13fffc4 	addi	r4,r22,-1
 200b1f0:	3c400136 	bltu	r7,r17,200b1f8 <__udivdi3+0x254>
 200b1f4:	3880e436 	bltu	r7,r2,200b588 <__udivdi3+0x5e4>
 200b1f8:	202d883a 	mov	r22,r4
 200b1fc:	38a1c83a 	sub	r16,r7,r2
 200b200:	8009883a 	mov	r4,r16
 200b204:	a80b883a 	mov	r5,r21
 200b208:	d8c00115 	stw	r3,4(sp)
 200b20c:	20009f40 	call	20009f4 <__umodsi3>
 200b210:	1027883a 	mov	r19,r2
 200b214:	8009883a 	mov	r4,r16
 200b218:	a80b883a 	mov	r5,r21
 200b21c:	9826943a 	slli	r19,r19,16
 200b220:	20009900 	call	2000990 <__udivsi3>
 200b224:	a00b883a 	mov	r5,r20
 200b228:	1009883a 	mov	r4,r2
 200b22c:	94bfffcc 	andi	r18,r18,65535
 200b230:	1021883a 	mov	r16,r2
 200b234:	94e4b03a 	or	r18,r18,r19
 200b238:	2000a4c0 	call	2000a4c <__mulsi3>
 200b23c:	d8c00117 	ldw	r3,4(sp)
 200b240:	9080052e 	bgeu	r18,r2,200b258 <__udivdi3+0x2b4>
 200b244:	8ca5883a 	add	r18,r17,r18
 200b248:	813fffc4 	addi	r4,r16,-1
 200b24c:	9440ad36 	bltu	r18,r17,200b504 <__udivdi3+0x560>
 200b250:	9080ac2e 	bgeu	r18,r2,200b504 <__udivdi3+0x560>
 200b254:	843fff84 	addi	r16,r16,-2
 200b258:	b004943a 	slli	r2,r22,16
 200b25c:	1404b03a 	or	r2,r2,r16
 200b260:	00000206 	br	200b26c <__udivdi3+0x2c8>
 200b264:	0007883a 	mov	r3,zero
 200b268:	0005883a 	mov	r2,zero
 200b26c:	dfc00b17 	ldw	ra,44(sp)
 200b270:	df000a17 	ldw	fp,40(sp)
 200b274:	ddc00917 	ldw	r23,36(sp)
 200b278:	dd800817 	ldw	r22,32(sp)
 200b27c:	dd400717 	ldw	r21,28(sp)
 200b280:	dd000617 	ldw	r20,24(sp)
 200b284:	dcc00517 	ldw	r19,20(sp)
 200b288:	dc800417 	ldw	r18,16(sp)
 200b28c:	dc400317 	ldw	r17,12(sp)
 200b290:	dc000217 	ldw	r16,8(sp)
 200b294:	dec00c04 	addi	sp,sp,48
 200b298:	f800283a 	ret
 200b29c:	00803fc4 	movi	r2,255
 200b2a0:	11c5803a 	cmpltu	r2,r2,r7
 200b2a4:	100490fa 	slli	r2,r2,3
 200b2a8:	003f9906 	br	200b110 <__alt_data_end+0xfe00b110>
 200b2ac:	00803fc4 	movi	r2,255
 200b2b0:	1445803a 	cmpltu	r2,r2,r17
 200b2b4:	100490fa 	slli	r2,r2,3
 200b2b8:	003fad06 	br	200b170 <__alt_data_end+0xfe00b170>
 200b2bc:	00804034 	movhi	r2,256
 200b2c0:	10bfffc4 	addi	r2,r2,-1
 200b2c4:	11809f36 	bltu	r2,r6,200b544 <__udivdi3+0x5a0>
 200b2c8:	00800404 	movi	r2,16
 200b2cc:	003f4c06 	br	200b000 <__alt_data_end+0xfe00b000>
 200b2d0:	3dce983a 	sll	r7,r7,r23
 200b2d4:	30b8d83a 	srl	fp,r6,r2
 200b2d8:	80a2d83a 	srl	r17,r16,r2
 200b2dc:	35cc983a 	sll	r6,r6,r23
 200b2e0:	3f38b03a 	or	fp,r7,fp
 200b2e4:	e024d43a 	srli	r18,fp,16
 200b2e8:	9884d83a 	srl	r2,r19,r2
 200b2ec:	85e0983a 	sll	r16,r16,r23
 200b2f0:	8809883a 	mov	r4,r17
 200b2f4:	900b883a 	mov	r5,r18
 200b2f8:	d9800015 	stw	r6,0(sp)
 200b2fc:	1420b03a 	or	r16,r2,r16
 200b300:	20009f40 	call	20009f4 <__umodsi3>
 200b304:	900b883a 	mov	r5,r18
 200b308:	8809883a 	mov	r4,r17
 200b30c:	1029883a 	mov	r20,r2
 200b310:	e5bfffcc 	andi	r22,fp,65535
 200b314:	20009900 	call	2000990 <__udivsi3>
 200b318:	100b883a 	mov	r5,r2
 200b31c:	b009883a 	mov	r4,r22
 200b320:	102b883a 	mov	r21,r2
 200b324:	2000a4c0 	call	2000a4c <__mulsi3>
 200b328:	a028943a 	slli	r20,r20,16
 200b32c:	8006d43a 	srli	r3,r16,16
 200b330:	1d06b03a 	or	r3,r3,r20
 200b334:	1880042e 	bgeu	r3,r2,200b348 <__udivdi3+0x3a4>
 200b338:	1f07883a 	add	r3,r3,fp
 200b33c:	a93fffc4 	addi	r4,r21,-1
 200b340:	1f00892e 	bgeu	r3,fp,200b568 <__udivdi3+0x5c4>
 200b344:	202b883a 	mov	r21,r4
 200b348:	18a3c83a 	sub	r17,r3,r2
 200b34c:	8809883a 	mov	r4,r17
 200b350:	900b883a 	mov	r5,r18
 200b354:	20009f40 	call	20009f4 <__umodsi3>
 200b358:	1029883a 	mov	r20,r2
 200b35c:	8809883a 	mov	r4,r17
 200b360:	900b883a 	mov	r5,r18
 200b364:	a028943a 	slli	r20,r20,16
 200b368:	20009900 	call	2000990 <__udivsi3>
 200b36c:	100b883a 	mov	r5,r2
 200b370:	b009883a 	mov	r4,r22
 200b374:	843fffcc 	andi	r16,r16,65535
 200b378:	1023883a 	mov	r17,r2
 200b37c:	8520b03a 	or	r16,r16,r20
 200b380:	2000a4c0 	call	2000a4c <__mulsi3>
 200b384:	8080042e 	bgeu	r16,r2,200b398 <__udivdi3+0x3f4>
 200b388:	8721883a 	add	r16,r16,fp
 200b38c:	88ffffc4 	addi	r3,r17,-1
 200b390:	8700712e 	bgeu	r16,fp,200b558 <__udivdi3+0x5b4>
 200b394:	1823883a 	mov	r17,r3
 200b398:	a80e943a 	slli	r7,r21,16
 200b39c:	d8c00017 	ldw	r3,0(sp)
 200b3a0:	80a1c83a 	sub	r16,r16,r2
 200b3a4:	3c64b03a 	or	r18,r7,r17
 200b3a8:	1d3fffcc 	andi	r20,r3,65535
 200b3ac:	9022d43a 	srli	r17,r18,16
 200b3b0:	95bfffcc 	andi	r22,r18,65535
 200b3b4:	a00b883a 	mov	r5,r20
 200b3b8:	b009883a 	mov	r4,r22
 200b3bc:	182ad43a 	srli	r21,r3,16
 200b3c0:	2000a4c0 	call	2000a4c <__mulsi3>
 200b3c4:	a00b883a 	mov	r5,r20
 200b3c8:	8809883a 	mov	r4,r17
 200b3cc:	1039883a 	mov	fp,r2
 200b3d0:	2000a4c0 	call	2000a4c <__mulsi3>
 200b3d4:	8809883a 	mov	r4,r17
 200b3d8:	a80b883a 	mov	r5,r21
 200b3dc:	1029883a 	mov	r20,r2
 200b3e0:	2000a4c0 	call	2000a4c <__mulsi3>
 200b3e4:	a80b883a 	mov	r5,r21
 200b3e8:	b009883a 	mov	r4,r22
 200b3ec:	1023883a 	mov	r17,r2
 200b3f0:	2000a4c0 	call	2000a4c <__mulsi3>
 200b3f4:	e006d43a 	srli	r3,fp,16
 200b3f8:	1505883a 	add	r2,r2,r20
 200b3fc:	1887883a 	add	r3,r3,r2
 200b400:	1d00022e 	bgeu	r3,r20,200b40c <__udivdi3+0x468>
 200b404:	00800074 	movhi	r2,1
 200b408:	88a3883a 	add	r17,r17,r2
 200b40c:	1804d43a 	srli	r2,r3,16
 200b410:	1463883a 	add	r17,r2,r17
 200b414:	84404436 	bltu	r16,r17,200b528 <__udivdi3+0x584>
 200b418:	84403e26 	beq	r16,r17,200b514 <__udivdi3+0x570>
 200b41c:	9005883a 	mov	r2,r18
 200b420:	0007883a 	mov	r3,zero
 200b424:	003f9106 	br	200b26c <__alt_data_end+0xfe00b26c>
 200b428:	88e2983a 	sll	r17,r17,r3
 200b42c:	80aed83a 	srl	r23,r16,r2
 200b430:	80e0983a 	sll	r16,r16,r3
 200b434:	882ad43a 	srli	r21,r17,16
 200b438:	9884d83a 	srl	r2,r19,r2
 200b43c:	b809883a 	mov	r4,r23
 200b440:	a80b883a 	mov	r5,r21
 200b444:	98e4983a 	sll	r18,r19,r3
 200b448:	142cb03a 	or	r22,r2,r16
 200b44c:	20009f40 	call	20009f4 <__umodsi3>
 200b450:	b809883a 	mov	r4,r23
 200b454:	a80b883a 	mov	r5,r21
 200b458:	1027883a 	mov	r19,r2
 200b45c:	8d3fffcc 	andi	r20,r17,65535
 200b460:	20009900 	call	2000990 <__udivsi3>
 200b464:	a009883a 	mov	r4,r20
 200b468:	100b883a 	mov	r5,r2
 200b46c:	102f883a 	mov	r23,r2
 200b470:	2000a4c0 	call	2000a4c <__mulsi3>
 200b474:	9826943a 	slli	r19,r19,16
 200b478:	b008d43a 	srli	r4,r22,16
 200b47c:	24c8b03a 	or	r4,r4,r19
 200b480:	2080062e 	bgeu	r4,r2,200b49c <__udivdi3+0x4f8>
 200b484:	2449883a 	add	r4,r4,r17
 200b488:	b8ffffc4 	addi	r3,r23,-1
 200b48c:	24403c36 	bltu	r4,r17,200b580 <__udivdi3+0x5dc>
 200b490:	20803b2e 	bgeu	r4,r2,200b580 <__udivdi3+0x5dc>
 200b494:	bdffff84 	addi	r23,r23,-2
 200b498:	2449883a 	add	r4,r4,r17
 200b49c:	20a1c83a 	sub	r16,r4,r2
 200b4a0:	a80b883a 	mov	r5,r21
 200b4a4:	8009883a 	mov	r4,r16
 200b4a8:	20009f40 	call	20009f4 <__umodsi3>
 200b4ac:	a80b883a 	mov	r5,r21
 200b4b0:	8009883a 	mov	r4,r16
 200b4b4:	1027883a 	mov	r19,r2
 200b4b8:	20009900 	call	2000990 <__udivsi3>
 200b4bc:	a009883a 	mov	r4,r20
 200b4c0:	100b883a 	mov	r5,r2
 200b4c4:	9826943a 	slli	r19,r19,16
 200b4c8:	1039883a 	mov	fp,r2
 200b4cc:	2000a4c0 	call	2000a4c <__mulsi3>
 200b4d0:	b13fffcc 	andi	r4,r22,65535
 200b4d4:	24c8b03a 	or	r4,r4,r19
 200b4d8:	2080062e 	bgeu	r4,r2,200b4f4 <__udivdi3+0x550>
 200b4dc:	2449883a 	add	r4,r4,r17
 200b4e0:	e0ffffc4 	addi	r3,fp,-1
 200b4e4:	24402436 	bltu	r4,r17,200b578 <__udivdi3+0x5d4>
 200b4e8:	2080232e 	bgeu	r4,r2,200b578 <__udivdi3+0x5d4>
 200b4ec:	e73fff84 	addi	fp,fp,-2
 200b4f0:	2449883a 	add	r4,r4,r17
 200b4f4:	b82e943a 	slli	r23,r23,16
 200b4f8:	20a1c83a 	sub	r16,r4,r2
 200b4fc:	bf06b03a 	or	r3,r23,fp
 200b500:	003f2806 	br	200b1a4 <__alt_data_end+0xfe00b1a4>
 200b504:	2021883a 	mov	r16,r4
 200b508:	003f5306 	br	200b258 <__alt_data_end+0xfe00b258>
 200b50c:	1821883a 	mov	r16,r3
 200b510:	003ef406 	br	200b0e4 <__alt_data_end+0xfe00b0e4>
 200b514:	1806943a 	slli	r3,r3,16
 200b518:	9de6983a 	sll	r19,r19,r23
 200b51c:	e73fffcc 	andi	fp,fp,65535
 200b520:	1f07883a 	add	r3,r3,fp
 200b524:	98ffbd2e 	bgeu	r19,r3,200b41c <__alt_data_end+0xfe00b41c>
 200b528:	90bfffc4 	addi	r2,r18,-1
 200b52c:	0007883a 	mov	r3,zero
 200b530:	003f4e06 	br	200b26c <__alt_data_end+0xfe00b26c>
 200b534:	00800604 	movi	r2,24
 200b538:	003ef506 	br	200b110 <__alt_data_end+0xfe00b110>
 200b53c:	00800604 	movi	r2,24
 200b540:	003f0b06 	br	200b170 <__alt_data_end+0xfe00b170>
 200b544:	00800604 	movi	r2,24
 200b548:	003ead06 	br	200b000 <__alt_data_end+0xfe00b000>
 200b54c:	0007883a 	mov	r3,zero
 200b550:	00800044 	movi	r2,1
 200b554:	003f4506 	br	200b26c <__alt_data_end+0xfe00b26c>
 200b558:	80bf8e2e 	bgeu	r16,r2,200b394 <__alt_data_end+0xfe00b394>
 200b55c:	8c7fff84 	addi	r17,r17,-2
 200b560:	8721883a 	add	r16,r16,fp
 200b564:	003f8c06 	br	200b398 <__alt_data_end+0xfe00b398>
 200b568:	18bf762e 	bgeu	r3,r2,200b344 <__alt_data_end+0xfe00b344>
 200b56c:	ad7fff84 	addi	r21,r21,-2
 200b570:	1f07883a 	add	r3,r3,fp
 200b574:	003f7406 	br	200b348 <__alt_data_end+0xfe00b348>
 200b578:	1839883a 	mov	fp,r3
 200b57c:	003fdd06 	br	200b4f4 <__alt_data_end+0xfe00b4f4>
 200b580:	182f883a 	mov	r23,r3
 200b584:	003fc506 	br	200b49c <__alt_data_end+0xfe00b49c>
 200b588:	b5bfff84 	addi	r22,r22,-2
 200b58c:	3c4f883a 	add	r7,r7,r17
 200b590:	003f1a06 	br	200b1fc <__alt_data_end+0xfe00b1fc>
 200b594:	b5bfff84 	addi	r22,r22,-2
 200b598:	1c47883a 	add	r3,r3,r17
 200b59c:	003ebc06 	br	200b090 <__alt_data_end+0xfe00b090>

0200b5a0 <__umoddi3>:
 200b5a0:	defff304 	addi	sp,sp,-52
 200b5a4:	df000b15 	stw	fp,44(sp)
 200b5a8:	dc400415 	stw	r17,16(sp)
 200b5ac:	dc000315 	stw	r16,12(sp)
 200b5b0:	dfc00c15 	stw	ra,48(sp)
 200b5b4:	ddc00a15 	stw	r23,40(sp)
 200b5b8:	dd800915 	stw	r22,36(sp)
 200b5bc:	dd400815 	stw	r21,32(sp)
 200b5c0:	dd000715 	stw	r20,28(sp)
 200b5c4:	dcc00615 	stw	r19,24(sp)
 200b5c8:	dc800515 	stw	r18,20(sp)
 200b5cc:	2021883a 	mov	r16,r4
 200b5d0:	2823883a 	mov	r17,r5
 200b5d4:	2839883a 	mov	fp,r5
 200b5d8:	3800401e 	bne	r7,zero,200b6dc <__umoddi3+0x13c>
 200b5dc:	3027883a 	mov	r19,r6
 200b5e0:	2029883a 	mov	r20,r4
 200b5e4:	2980552e 	bgeu	r5,r6,200b73c <__umoddi3+0x19c>
 200b5e8:	00bfffd4 	movui	r2,65535
 200b5ec:	1180a236 	bltu	r2,r6,200b878 <__umoddi3+0x2d8>
 200b5f0:	01003fc4 	movi	r4,255
 200b5f4:	2189803a 	cmpltu	r4,r4,r6
 200b5f8:	200890fa 	slli	r4,r4,3
 200b5fc:	3104d83a 	srl	r2,r6,r4
 200b600:	00c08074 	movhi	r3,513
 200b604:	18c5ce04 	addi	r3,r3,5944
 200b608:	1885883a 	add	r2,r3,r2
 200b60c:	10c00003 	ldbu	r3,0(r2)
 200b610:	00800804 	movi	r2,32
 200b614:	1909883a 	add	r4,r3,r4
 200b618:	1125c83a 	sub	r18,r2,r4
 200b61c:	90000526 	beq	r18,zero,200b634 <__umoddi3+0x94>
 200b620:	8ca2983a 	sll	r17,r17,r18
 200b624:	8108d83a 	srl	r4,r16,r4
 200b628:	34a6983a 	sll	r19,r6,r18
 200b62c:	84a8983a 	sll	r20,r16,r18
 200b630:	2478b03a 	or	fp,r4,r17
 200b634:	982cd43a 	srli	r22,r19,16
 200b638:	e009883a 	mov	r4,fp
 200b63c:	9dffffcc 	andi	r23,r19,65535
 200b640:	b00b883a 	mov	r5,r22
 200b644:	20009f40 	call	20009f4 <__umodsi3>
 200b648:	b00b883a 	mov	r5,r22
 200b64c:	e009883a 	mov	r4,fp
 200b650:	102b883a 	mov	r21,r2
 200b654:	20009900 	call	2000990 <__udivsi3>
 200b658:	100b883a 	mov	r5,r2
 200b65c:	b809883a 	mov	r4,r23
 200b660:	2000a4c0 	call	2000a4c <__mulsi3>
 200b664:	a82a943a 	slli	r21,r21,16
 200b668:	a006d43a 	srli	r3,r20,16
 200b66c:	1d46b03a 	or	r3,r3,r21
 200b670:	1880032e 	bgeu	r3,r2,200b680 <__umoddi3+0xe0>
 200b674:	1cc7883a 	add	r3,r3,r19
 200b678:	1cc00136 	bltu	r3,r19,200b680 <__umoddi3+0xe0>
 200b67c:	18813136 	bltu	r3,r2,200bb44 <__umoddi3+0x5a4>
 200b680:	18a1c83a 	sub	r16,r3,r2
 200b684:	b00b883a 	mov	r5,r22
 200b688:	8009883a 	mov	r4,r16
 200b68c:	20009f40 	call	20009f4 <__umodsi3>
 200b690:	b00b883a 	mov	r5,r22
 200b694:	8009883a 	mov	r4,r16
 200b698:	1023883a 	mov	r17,r2
 200b69c:	20009900 	call	2000990 <__udivsi3>
 200b6a0:	100b883a 	mov	r5,r2
 200b6a4:	b809883a 	mov	r4,r23
 200b6a8:	8822943a 	slli	r17,r17,16
 200b6ac:	2000a4c0 	call	2000a4c <__mulsi3>
 200b6b0:	a0ffffcc 	andi	r3,r20,65535
 200b6b4:	1c46b03a 	or	r3,r3,r17
 200b6b8:	1880042e 	bgeu	r3,r2,200b6cc <__umoddi3+0x12c>
 200b6bc:	1cc7883a 	add	r3,r3,r19
 200b6c0:	1cc00236 	bltu	r3,r19,200b6cc <__umoddi3+0x12c>
 200b6c4:	1880012e 	bgeu	r3,r2,200b6cc <__umoddi3+0x12c>
 200b6c8:	1cc7883a 	add	r3,r3,r19
 200b6cc:	1885c83a 	sub	r2,r3,r2
 200b6d0:	1484d83a 	srl	r2,r2,r18
 200b6d4:	0007883a 	mov	r3,zero
 200b6d8:	00005306 	br	200b828 <__umoddi3+0x288>
 200b6dc:	29c05036 	bltu	r5,r7,200b820 <__umoddi3+0x280>
 200b6e0:	00bfffd4 	movui	r2,65535
 200b6e4:	11c05c2e 	bgeu	r2,r7,200b858 <__umoddi3+0x2b8>
 200b6e8:	00804034 	movhi	r2,256
 200b6ec:	10bfffc4 	addi	r2,r2,-1
 200b6f0:	11c10636 	bltu	r2,r7,200bb0c <__umoddi3+0x56c>
 200b6f4:	01000404 	movi	r4,16
 200b6f8:	3904d83a 	srl	r2,r7,r4
 200b6fc:	00c08074 	movhi	r3,513
 200b700:	18c5ce04 	addi	r3,r3,5944
 200b704:	1885883a 	add	r2,r3,r2
 200b708:	14c00003 	ldbu	r19,0(r2)
 200b70c:	00c00804 	movi	r3,32
 200b710:	9927883a 	add	r19,r19,r4
 200b714:	1ce9c83a 	sub	r20,r3,r19
 200b718:	a0005c1e 	bne	r20,zero,200b88c <__umoddi3+0x2ec>
 200b71c:	3c400136 	bltu	r7,r17,200b724 <__umoddi3+0x184>
 200b720:	81810a36 	bltu	r16,r6,200bb4c <__umoddi3+0x5ac>
 200b724:	8185c83a 	sub	r2,r16,r6
 200b728:	89e3c83a 	sub	r17,r17,r7
 200b72c:	8089803a 	cmpltu	r4,r16,r2
 200b730:	8939c83a 	sub	fp,r17,r4
 200b734:	e007883a 	mov	r3,fp
 200b738:	00003b06 	br	200b828 <__umoddi3+0x288>
 200b73c:	3000041e 	bne	r6,zero,200b750 <__umoddi3+0x1b0>
 200b740:	000b883a 	mov	r5,zero
 200b744:	01000044 	movi	r4,1
 200b748:	20009900 	call	2000990 <__udivsi3>
 200b74c:	1027883a 	mov	r19,r2
 200b750:	00bfffd4 	movui	r2,65535
 200b754:	14c0442e 	bgeu	r2,r19,200b868 <__umoddi3+0x2c8>
 200b758:	00804034 	movhi	r2,256
 200b75c:	10bfffc4 	addi	r2,r2,-1
 200b760:	14c0ec36 	bltu	r2,r19,200bb14 <__umoddi3+0x574>
 200b764:	00800404 	movi	r2,16
 200b768:	9886d83a 	srl	r3,r19,r2
 200b76c:	01008074 	movhi	r4,513
 200b770:	2105ce04 	addi	r4,r4,5944
 200b774:	20c7883a 	add	r3,r4,r3
 200b778:	18c00003 	ldbu	r3,0(r3)
 200b77c:	1887883a 	add	r3,r3,r2
 200b780:	00800804 	movi	r2,32
 200b784:	10e5c83a 	sub	r18,r2,r3
 200b788:	9000ab1e 	bne	r18,zero,200ba38 <__umoddi3+0x498>
 200b78c:	982cd43a 	srli	r22,r19,16
 200b790:	8ce3c83a 	sub	r17,r17,r19
 200b794:	9dffffcc 	andi	r23,r19,65535
 200b798:	b00b883a 	mov	r5,r22
 200b79c:	8809883a 	mov	r4,r17
 200b7a0:	20009f40 	call	20009f4 <__umodsi3>
 200b7a4:	b00b883a 	mov	r5,r22
 200b7a8:	8809883a 	mov	r4,r17
 200b7ac:	102b883a 	mov	r21,r2
 200b7b0:	20009900 	call	2000990 <__udivsi3>
 200b7b4:	b80b883a 	mov	r5,r23
 200b7b8:	1009883a 	mov	r4,r2
 200b7bc:	2000a4c0 	call	2000a4c <__mulsi3>
 200b7c0:	a82a943a 	slli	r21,r21,16
 200b7c4:	a006d43a 	srli	r3,r20,16
 200b7c8:	1d46b03a 	or	r3,r3,r21
 200b7cc:	1880042e 	bgeu	r3,r2,200b7e0 <__umoddi3+0x240>
 200b7d0:	1cc7883a 	add	r3,r3,r19
 200b7d4:	1cc00236 	bltu	r3,r19,200b7e0 <__umoddi3+0x240>
 200b7d8:	1880012e 	bgeu	r3,r2,200b7e0 <__umoddi3+0x240>
 200b7dc:	1cc7883a 	add	r3,r3,r19
 200b7e0:	18a1c83a 	sub	r16,r3,r2
 200b7e4:	b00b883a 	mov	r5,r22
 200b7e8:	8009883a 	mov	r4,r16
 200b7ec:	20009f40 	call	20009f4 <__umodsi3>
 200b7f0:	1023883a 	mov	r17,r2
 200b7f4:	b00b883a 	mov	r5,r22
 200b7f8:	8009883a 	mov	r4,r16
 200b7fc:	20009900 	call	2000990 <__udivsi3>
 200b800:	8822943a 	slli	r17,r17,16
 200b804:	b80b883a 	mov	r5,r23
 200b808:	1009883a 	mov	r4,r2
 200b80c:	2000a4c0 	call	2000a4c <__mulsi3>
 200b810:	a53fffcc 	andi	r20,r20,65535
 200b814:	a446b03a 	or	r3,r20,r17
 200b818:	18bfac2e 	bgeu	r3,r2,200b6cc <__alt_data_end+0xfe00b6cc>
 200b81c:	003fa706 	br	200b6bc <__alt_data_end+0xfe00b6bc>
 200b820:	2005883a 	mov	r2,r4
 200b824:	2807883a 	mov	r3,r5
 200b828:	dfc00c17 	ldw	ra,48(sp)
 200b82c:	df000b17 	ldw	fp,44(sp)
 200b830:	ddc00a17 	ldw	r23,40(sp)
 200b834:	dd800917 	ldw	r22,36(sp)
 200b838:	dd400817 	ldw	r21,32(sp)
 200b83c:	dd000717 	ldw	r20,28(sp)
 200b840:	dcc00617 	ldw	r19,24(sp)
 200b844:	dc800517 	ldw	r18,20(sp)
 200b848:	dc400417 	ldw	r17,16(sp)
 200b84c:	dc000317 	ldw	r16,12(sp)
 200b850:	dec00d04 	addi	sp,sp,52
 200b854:	f800283a 	ret
 200b858:	04c03fc4 	movi	r19,255
 200b85c:	99c9803a 	cmpltu	r4,r19,r7
 200b860:	200890fa 	slli	r4,r4,3
 200b864:	003fa406 	br	200b6f8 <__alt_data_end+0xfe00b6f8>
 200b868:	00803fc4 	movi	r2,255
 200b86c:	14c5803a 	cmpltu	r2,r2,r19
 200b870:	100490fa 	slli	r2,r2,3
 200b874:	003fbc06 	br	200b768 <__alt_data_end+0xfe00b768>
 200b878:	00804034 	movhi	r2,256
 200b87c:	10bfffc4 	addi	r2,r2,-1
 200b880:	1180a636 	bltu	r2,r6,200bb1c <__umoddi3+0x57c>
 200b884:	01000404 	movi	r4,16
 200b888:	003f5c06 	br	200b5fc <__alt_data_end+0xfe00b5fc>
 200b88c:	3d0e983a 	sll	r7,r7,r20
 200b890:	34ead83a 	srl	r21,r6,r19
 200b894:	8cc6d83a 	srl	r3,r17,r19
 200b898:	8d10983a 	sll	r8,r17,r20
 200b89c:	3d6ab03a 	or	r21,r7,r21
 200b8a0:	a82cd43a 	srli	r22,r21,16
 200b8a4:	84e2d83a 	srl	r17,r16,r19
 200b8a8:	1809883a 	mov	r4,r3
 200b8ac:	b00b883a 	mov	r5,r22
 200b8b0:	8a22b03a 	or	r17,r17,r8
 200b8b4:	3524983a 	sll	r18,r6,r20
 200b8b8:	dc400015 	stw	r17,0(sp)
 200b8bc:	d8c00115 	stw	r3,4(sp)
 200b8c0:	20009f40 	call	20009f4 <__umodsi3>
 200b8c4:	d8c00117 	ldw	r3,4(sp)
 200b8c8:	b00b883a 	mov	r5,r22
 200b8cc:	1039883a 	mov	fp,r2
 200b8d0:	1809883a 	mov	r4,r3
 200b8d4:	20009900 	call	2000990 <__udivsi3>
 200b8d8:	adffffcc 	andi	r23,r21,65535
 200b8dc:	100b883a 	mov	r5,r2
 200b8e0:	b809883a 	mov	r4,r23
 200b8e4:	1023883a 	mov	r17,r2
 200b8e8:	2000a4c0 	call	2000a4c <__mulsi3>
 200b8ec:	d9400017 	ldw	r5,0(sp)
 200b8f0:	e008943a 	slli	r4,fp,16
 200b8f4:	8520983a 	sll	r16,r16,r20
 200b8f8:	2806d43a 	srli	r3,r5,16
 200b8fc:	1906b03a 	or	r3,r3,r4
 200b900:	1880042e 	bgeu	r3,r2,200b914 <__umoddi3+0x374>
 200b904:	1d47883a 	add	r3,r3,r21
 200b908:	893fffc4 	addi	r4,r17,-1
 200b90c:	1d40892e 	bgeu	r3,r21,200bb34 <__umoddi3+0x594>
 200b910:	2023883a 	mov	r17,r4
 200b914:	18b9c83a 	sub	fp,r3,r2
 200b918:	b00b883a 	mov	r5,r22
 200b91c:	e009883a 	mov	r4,fp
 200b920:	20009f40 	call	20009f4 <__umodsi3>
 200b924:	b00b883a 	mov	r5,r22
 200b928:	e009883a 	mov	r4,fp
 200b92c:	d8800215 	stw	r2,8(sp)
 200b930:	20009900 	call	2000990 <__udivsi3>
 200b934:	100b883a 	mov	r5,r2
 200b938:	b809883a 	mov	r4,r23
 200b93c:	102d883a 	mov	r22,r2
 200b940:	2000a4c0 	call	2000a4c <__mulsi3>
 200b944:	d9800217 	ldw	r6,8(sp)
 200b948:	d8c00017 	ldw	r3,0(sp)
 200b94c:	300c943a 	slli	r6,r6,16
 200b950:	1a3fffcc 	andi	r8,r3,65535
 200b954:	4190b03a 	or	r8,r8,r6
 200b958:	4080042e 	bgeu	r8,r2,200b96c <__umoddi3+0x3cc>
 200b95c:	4551883a 	add	r8,r8,r21
 200b960:	b0ffffc4 	addi	r3,r22,-1
 200b964:	45406f2e 	bgeu	r8,r21,200bb24 <__umoddi3+0x584>
 200b968:	182d883a 	mov	r22,r3
 200b96c:	880e943a 	slli	r7,r17,16
 200b970:	9006d43a 	srli	r3,r18,16
 200b974:	91bfffcc 	andi	r6,r18,65535
 200b978:	3dacb03a 	or	r22,r7,r22
 200b97c:	b02ed43a 	srli	r23,r22,16
 200b980:	b5bfffcc 	andi	r22,r22,65535
 200b984:	300b883a 	mov	r5,r6
 200b988:	b009883a 	mov	r4,r22
 200b98c:	40a3c83a 	sub	r17,r8,r2
 200b990:	d8c00115 	stw	r3,4(sp)
 200b994:	d9800215 	stw	r6,8(sp)
 200b998:	2000a4c0 	call	2000a4c <__mulsi3>
 200b99c:	d9800217 	ldw	r6,8(sp)
 200b9a0:	b809883a 	mov	r4,r23
 200b9a4:	1039883a 	mov	fp,r2
 200b9a8:	300b883a 	mov	r5,r6
 200b9ac:	2000a4c0 	call	2000a4c <__mulsi3>
 200b9b0:	d8c00117 	ldw	r3,4(sp)
 200b9b4:	b809883a 	mov	r4,r23
 200b9b8:	d8800215 	stw	r2,8(sp)
 200b9bc:	180b883a 	mov	r5,r3
 200b9c0:	2000a4c0 	call	2000a4c <__mulsi3>
 200b9c4:	d8c00117 	ldw	r3,4(sp)
 200b9c8:	b009883a 	mov	r4,r22
 200b9cc:	102f883a 	mov	r23,r2
 200b9d0:	180b883a 	mov	r5,r3
 200b9d4:	2000a4c0 	call	2000a4c <__mulsi3>
 200b9d8:	d9800217 	ldw	r6,8(sp)
 200b9dc:	e006d43a 	srli	r3,fp,16
 200b9e0:	1185883a 	add	r2,r2,r6
 200b9e4:	1885883a 	add	r2,r3,r2
 200b9e8:	1180022e 	bgeu	r2,r6,200b9f4 <__umoddi3+0x454>
 200b9ec:	00c00074 	movhi	r3,1
 200b9f0:	b8ef883a 	add	r23,r23,r3
 200b9f4:	1006d43a 	srli	r3,r2,16
 200b9f8:	1004943a 	slli	r2,r2,16
 200b9fc:	e73fffcc 	andi	fp,fp,65535
 200ba00:	1dc7883a 	add	r3,r3,r23
 200ba04:	1739883a 	add	fp,r2,fp
 200ba08:	88c03a36 	bltu	r17,r3,200baf4 <__umoddi3+0x554>
 200ba0c:	88c05126 	beq	r17,r3,200bb54 <__umoddi3+0x5b4>
 200ba10:	88c9c83a 	sub	r4,r17,r3
 200ba14:	e00f883a 	mov	r7,fp
 200ba18:	81cfc83a 	sub	r7,r16,r7
 200ba1c:	81c7803a 	cmpltu	r3,r16,r7
 200ba20:	20c7c83a 	sub	r3,r4,r3
 200ba24:	1cc4983a 	sll	r2,r3,r19
 200ba28:	3d0ed83a 	srl	r7,r7,r20
 200ba2c:	1d06d83a 	srl	r3,r3,r20
 200ba30:	11c4b03a 	or	r2,r2,r7
 200ba34:	003f7c06 	br	200b828 <__alt_data_end+0xfe00b828>
 200ba38:	9ca6983a 	sll	r19,r19,r18
 200ba3c:	88f8d83a 	srl	fp,r17,r3
 200ba40:	80c4d83a 	srl	r2,r16,r3
 200ba44:	982cd43a 	srli	r22,r19,16
 200ba48:	8ca2983a 	sll	r17,r17,r18
 200ba4c:	e009883a 	mov	r4,fp
 200ba50:	b00b883a 	mov	r5,r22
 200ba54:	146ab03a 	or	r21,r2,r17
 200ba58:	20009f40 	call	20009f4 <__umodsi3>
 200ba5c:	b00b883a 	mov	r5,r22
 200ba60:	e009883a 	mov	r4,fp
 200ba64:	1029883a 	mov	r20,r2
 200ba68:	9dffffcc 	andi	r23,r19,65535
 200ba6c:	20009900 	call	2000990 <__udivsi3>
 200ba70:	b809883a 	mov	r4,r23
 200ba74:	100b883a 	mov	r5,r2
 200ba78:	2000a4c0 	call	2000a4c <__mulsi3>
 200ba7c:	a008943a 	slli	r4,r20,16
 200ba80:	a806d43a 	srli	r3,r21,16
 200ba84:	84a8983a 	sll	r20,r16,r18
 200ba88:	1906b03a 	or	r3,r3,r4
 200ba8c:	1880042e 	bgeu	r3,r2,200baa0 <__umoddi3+0x500>
 200ba90:	1cc7883a 	add	r3,r3,r19
 200ba94:	1cc00236 	bltu	r3,r19,200baa0 <__umoddi3+0x500>
 200ba98:	1880012e 	bgeu	r3,r2,200baa0 <__umoddi3+0x500>
 200ba9c:	1cc7883a 	add	r3,r3,r19
 200baa0:	18a3c83a 	sub	r17,r3,r2
 200baa4:	b00b883a 	mov	r5,r22
 200baa8:	8809883a 	mov	r4,r17
 200baac:	20009f40 	call	20009f4 <__umodsi3>
 200bab0:	b00b883a 	mov	r5,r22
 200bab4:	8809883a 	mov	r4,r17
 200bab8:	1021883a 	mov	r16,r2
 200babc:	20009900 	call	2000990 <__udivsi3>
 200bac0:	100b883a 	mov	r5,r2
 200bac4:	b809883a 	mov	r4,r23
 200bac8:	8020943a 	slli	r16,r16,16
 200bacc:	2000a4c0 	call	2000a4c <__mulsi3>
 200bad0:	a8ffffcc 	andi	r3,r21,65535
 200bad4:	1c06b03a 	or	r3,r3,r16
 200bad8:	1880042e 	bgeu	r3,r2,200baec <__umoddi3+0x54c>
 200badc:	1cc7883a 	add	r3,r3,r19
 200bae0:	1cc00236 	bltu	r3,r19,200baec <__umoddi3+0x54c>
 200bae4:	1880012e 	bgeu	r3,r2,200baec <__umoddi3+0x54c>
 200bae8:	1cc7883a 	add	r3,r3,r19
 200baec:	18a3c83a 	sub	r17,r3,r2
 200baf0:	003f2906 	br	200b798 <__alt_data_end+0xfe00b798>
 200baf4:	e48fc83a 	sub	r7,fp,r18
 200baf8:	1d49c83a 	sub	r4,r3,r21
 200bafc:	e1f9803a 	cmpltu	fp,fp,r7
 200bb00:	2739c83a 	sub	fp,r4,fp
 200bb04:	8f09c83a 	sub	r4,r17,fp
 200bb08:	003fc306 	br	200ba18 <__alt_data_end+0xfe00ba18>
 200bb0c:	01000604 	movi	r4,24
 200bb10:	003ef906 	br	200b6f8 <__alt_data_end+0xfe00b6f8>
 200bb14:	00800604 	movi	r2,24
 200bb18:	003f1306 	br	200b768 <__alt_data_end+0xfe00b768>
 200bb1c:	01000604 	movi	r4,24
 200bb20:	003eb606 	br	200b5fc <__alt_data_end+0xfe00b5fc>
 200bb24:	40bf902e 	bgeu	r8,r2,200b968 <__alt_data_end+0xfe00b968>
 200bb28:	b5bfff84 	addi	r22,r22,-2
 200bb2c:	4551883a 	add	r8,r8,r21
 200bb30:	003f8e06 	br	200b96c <__alt_data_end+0xfe00b96c>
 200bb34:	18bf762e 	bgeu	r3,r2,200b910 <__alt_data_end+0xfe00b910>
 200bb38:	8c7fff84 	addi	r17,r17,-2
 200bb3c:	1d47883a 	add	r3,r3,r21
 200bb40:	003f7406 	br	200b914 <__alt_data_end+0xfe00b914>
 200bb44:	1cc7883a 	add	r3,r3,r19
 200bb48:	003ecd06 	br	200b680 <__alt_data_end+0xfe00b680>
 200bb4c:	8005883a 	mov	r2,r16
 200bb50:	003ef806 	br	200b734 <__alt_data_end+0xfe00b734>
 200bb54:	873fe736 	bltu	r16,fp,200baf4 <__alt_data_end+0xfe00baf4>
 200bb58:	e00f883a 	mov	r7,fp
 200bb5c:	0009883a 	mov	r4,zero
 200bb60:	003fad06 	br	200ba18 <__alt_data_end+0xfe00ba18>

0200bb64 <__adddf3>:
 200bb64:	02c00434 	movhi	r11,16
 200bb68:	5affffc4 	addi	r11,r11,-1
 200bb6c:	2806d7fa 	srli	r3,r5,31
 200bb70:	2ad4703a 	and	r10,r5,r11
 200bb74:	3ad2703a 	and	r9,r7,r11
 200bb78:	3804d53a 	srli	r2,r7,20
 200bb7c:	3018d77a 	srli	r12,r6,29
 200bb80:	280ad53a 	srli	r5,r5,20
 200bb84:	501490fa 	slli	r10,r10,3
 200bb88:	2010d77a 	srli	r8,r4,29
 200bb8c:	481290fa 	slli	r9,r9,3
 200bb90:	380ed7fa 	srli	r7,r7,31
 200bb94:	defffb04 	addi	sp,sp,-20
 200bb98:	dc800215 	stw	r18,8(sp)
 200bb9c:	dc400115 	stw	r17,4(sp)
 200bba0:	dc000015 	stw	r16,0(sp)
 200bba4:	dfc00415 	stw	ra,16(sp)
 200bba8:	dcc00315 	stw	r19,12(sp)
 200bbac:	1c803fcc 	andi	r18,r3,255
 200bbb0:	2c01ffcc 	andi	r16,r5,2047
 200bbb4:	5210b03a 	or	r8,r10,r8
 200bbb8:	202290fa 	slli	r17,r4,3
 200bbbc:	1081ffcc 	andi	r2,r2,2047
 200bbc0:	4b12b03a 	or	r9,r9,r12
 200bbc4:	300c90fa 	slli	r6,r6,3
 200bbc8:	91c07526 	beq	r18,r7,200bda0 <__adddf3+0x23c>
 200bbcc:	8087c83a 	sub	r3,r16,r2
 200bbd0:	00c0ab0e 	bge	zero,r3,200be80 <__adddf3+0x31c>
 200bbd4:	10002a1e 	bne	r2,zero,200bc80 <__adddf3+0x11c>
 200bbd8:	4984b03a 	or	r2,r9,r6
 200bbdc:	1000961e 	bne	r2,zero,200be38 <__adddf3+0x2d4>
 200bbe0:	888001cc 	andi	r2,r17,7
 200bbe4:	10000726 	beq	r2,zero,200bc04 <__adddf3+0xa0>
 200bbe8:	888003cc 	andi	r2,r17,15
 200bbec:	00c00104 	movi	r3,4
 200bbf0:	10c00426 	beq	r2,r3,200bc04 <__adddf3+0xa0>
 200bbf4:	88c7883a 	add	r3,r17,r3
 200bbf8:	1c63803a 	cmpltu	r17,r3,r17
 200bbfc:	4451883a 	add	r8,r8,r17
 200bc00:	1823883a 	mov	r17,r3
 200bc04:	4080202c 	andhi	r2,r8,128
 200bc08:	10005926 	beq	r2,zero,200bd70 <__adddf3+0x20c>
 200bc0c:	84000044 	addi	r16,r16,1
 200bc10:	0081ffc4 	movi	r2,2047
 200bc14:	8080ba26 	beq	r16,r2,200bf00 <__adddf3+0x39c>
 200bc18:	00bfe034 	movhi	r2,65408
 200bc1c:	10bfffc4 	addi	r2,r2,-1
 200bc20:	4090703a 	and	r8,r8,r2
 200bc24:	4004977a 	slli	r2,r8,29
 200bc28:	4010927a 	slli	r8,r8,9
 200bc2c:	8822d0fa 	srli	r17,r17,3
 200bc30:	8401ffcc 	andi	r16,r16,2047
 200bc34:	4010d33a 	srli	r8,r8,12
 200bc38:	9007883a 	mov	r3,r18
 200bc3c:	1444b03a 	or	r2,r2,r17
 200bc40:	8401ffcc 	andi	r16,r16,2047
 200bc44:	8020953a 	slli	r16,r16,20
 200bc48:	18c03fcc 	andi	r3,r3,255
 200bc4c:	01000434 	movhi	r4,16
 200bc50:	213fffc4 	addi	r4,r4,-1
 200bc54:	180697fa 	slli	r3,r3,31
 200bc58:	4110703a 	and	r8,r8,r4
 200bc5c:	4410b03a 	or	r8,r8,r16
 200bc60:	40c6b03a 	or	r3,r8,r3
 200bc64:	dfc00417 	ldw	ra,16(sp)
 200bc68:	dcc00317 	ldw	r19,12(sp)
 200bc6c:	dc800217 	ldw	r18,8(sp)
 200bc70:	dc400117 	ldw	r17,4(sp)
 200bc74:	dc000017 	ldw	r16,0(sp)
 200bc78:	dec00504 	addi	sp,sp,20
 200bc7c:	f800283a 	ret
 200bc80:	0081ffc4 	movi	r2,2047
 200bc84:	80bfd626 	beq	r16,r2,200bbe0 <__alt_data_end+0xfe00bbe0>
 200bc88:	4a402034 	orhi	r9,r9,128
 200bc8c:	00800e04 	movi	r2,56
 200bc90:	10c09f16 	blt	r2,r3,200bf10 <__adddf3+0x3ac>
 200bc94:	008007c4 	movi	r2,31
 200bc98:	10c0c216 	blt	r2,r3,200bfa4 <__adddf3+0x440>
 200bc9c:	00800804 	movi	r2,32
 200bca0:	10c5c83a 	sub	r2,r2,r3
 200bca4:	488a983a 	sll	r5,r9,r2
 200bca8:	30c8d83a 	srl	r4,r6,r3
 200bcac:	3084983a 	sll	r2,r6,r2
 200bcb0:	48c6d83a 	srl	r3,r9,r3
 200bcb4:	290cb03a 	or	r6,r5,r4
 200bcb8:	1004c03a 	cmpne	r2,r2,zero
 200bcbc:	308cb03a 	or	r6,r6,r2
 200bcc0:	898dc83a 	sub	r6,r17,r6
 200bcc4:	89a3803a 	cmpltu	r17,r17,r6
 200bcc8:	40d1c83a 	sub	r8,r8,r3
 200bccc:	4451c83a 	sub	r8,r8,r17
 200bcd0:	3023883a 	mov	r17,r6
 200bcd4:	4080202c 	andhi	r2,r8,128
 200bcd8:	10002326 	beq	r2,zero,200bd68 <__adddf3+0x204>
 200bcdc:	04c02034 	movhi	r19,128
 200bce0:	9cffffc4 	addi	r19,r19,-1
 200bce4:	44e6703a 	and	r19,r8,r19
 200bce8:	98007626 	beq	r19,zero,200bec4 <__adddf3+0x360>
 200bcec:	9809883a 	mov	r4,r19
 200bcf0:	200e3a40 	call	200e3a4 <__clzsi2>
 200bcf4:	10fffe04 	addi	r3,r2,-8
 200bcf8:	010007c4 	movi	r4,31
 200bcfc:	20c07716 	blt	r4,r3,200bedc <__adddf3+0x378>
 200bd00:	00800804 	movi	r2,32
 200bd04:	10c5c83a 	sub	r2,r2,r3
 200bd08:	8884d83a 	srl	r2,r17,r2
 200bd0c:	98d0983a 	sll	r8,r19,r3
 200bd10:	88e2983a 	sll	r17,r17,r3
 200bd14:	1204b03a 	or	r2,r2,r8
 200bd18:	1c007416 	blt	r3,r16,200beec <__adddf3+0x388>
 200bd1c:	1c21c83a 	sub	r16,r3,r16
 200bd20:	82000044 	addi	r8,r16,1
 200bd24:	00c007c4 	movi	r3,31
 200bd28:	1a009116 	blt	r3,r8,200bf70 <__adddf3+0x40c>
 200bd2c:	00c00804 	movi	r3,32
 200bd30:	1a07c83a 	sub	r3,r3,r8
 200bd34:	8a08d83a 	srl	r4,r17,r8
 200bd38:	88e2983a 	sll	r17,r17,r3
 200bd3c:	10c6983a 	sll	r3,r2,r3
 200bd40:	1210d83a 	srl	r8,r2,r8
 200bd44:	8804c03a 	cmpne	r2,r17,zero
 200bd48:	1906b03a 	or	r3,r3,r4
 200bd4c:	18a2b03a 	or	r17,r3,r2
 200bd50:	0021883a 	mov	r16,zero
 200bd54:	003fa206 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200bd58:	1890b03a 	or	r8,r3,r2
 200bd5c:	40017d26 	beq	r8,zero,200c354 <__adddf3+0x7f0>
 200bd60:	1011883a 	mov	r8,r2
 200bd64:	1823883a 	mov	r17,r3
 200bd68:	888001cc 	andi	r2,r17,7
 200bd6c:	103f9e1e 	bne	r2,zero,200bbe8 <__alt_data_end+0xfe00bbe8>
 200bd70:	4004977a 	slli	r2,r8,29
 200bd74:	8822d0fa 	srli	r17,r17,3
 200bd78:	4010d0fa 	srli	r8,r8,3
 200bd7c:	9007883a 	mov	r3,r18
 200bd80:	1444b03a 	or	r2,r2,r17
 200bd84:	0101ffc4 	movi	r4,2047
 200bd88:	81002426 	beq	r16,r4,200be1c <__adddf3+0x2b8>
 200bd8c:	8120703a 	and	r16,r16,r4
 200bd90:	01000434 	movhi	r4,16
 200bd94:	213fffc4 	addi	r4,r4,-1
 200bd98:	4110703a 	and	r8,r8,r4
 200bd9c:	003fa806 	br	200bc40 <__alt_data_end+0xfe00bc40>
 200bda0:	8089c83a 	sub	r4,r16,r2
 200bda4:	01005e0e 	bge	zero,r4,200bf20 <__adddf3+0x3bc>
 200bda8:	10002b26 	beq	r2,zero,200be58 <__adddf3+0x2f4>
 200bdac:	0081ffc4 	movi	r2,2047
 200bdb0:	80bf8b26 	beq	r16,r2,200bbe0 <__alt_data_end+0xfe00bbe0>
 200bdb4:	4a402034 	orhi	r9,r9,128
 200bdb8:	00800e04 	movi	r2,56
 200bdbc:	1100a40e 	bge	r2,r4,200c050 <__adddf3+0x4ec>
 200bdc0:	498cb03a 	or	r6,r9,r6
 200bdc4:	300ac03a 	cmpne	r5,r6,zero
 200bdc8:	0013883a 	mov	r9,zero
 200bdcc:	2c4b883a 	add	r5,r5,r17
 200bdd0:	2c63803a 	cmpltu	r17,r5,r17
 200bdd4:	4a11883a 	add	r8,r9,r8
 200bdd8:	8a11883a 	add	r8,r17,r8
 200bddc:	2823883a 	mov	r17,r5
 200bde0:	4080202c 	andhi	r2,r8,128
 200bde4:	103fe026 	beq	r2,zero,200bd68 <__alt_data_end+0xfe00bd68>
 200bde8:	84000044 	addi	r16,r16,1
 200bdec:	0081ffc4 	movi	r2,2047
 200bdf0:	8080d226 	beq	r16,r2,200c13c <__adddf3+0x5d8>
 200bdf4:	00bfe034 	movhi	r2,65408
 200bdf8:	10bfffc4 	addi	r2,r2,-1
 200bdfc:	4090703a 	and	r8,r8,r2
 200be00:	880ad07a 	srli	r5,r17,1
 200be04:	400897fa 	slli	r4,r8,31
 200be08:	88c0004c 	andi	r3,r17,1
 200be0c:	28e2b03a 	or	r17,r5,r3
 200be10:	4010d07a 	srli	r8,r8,1
 200be14:	2462b03a 	or	r17,r4,r17
 200be18:	003f7106 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200be1c:	4088b03a 	or	r4,r8,r2
 200be20:	20014526 	beq	r4,zero,200c338 <__adddf3+0x7d4>
 200be24:	01000434 	movhi	r4,16
 200be28:	42000234 	orhi	r8,r8,8
 200be2c:	213fffc4 	addi	r4,r4,-1
 200be30:	4110703a 	and	r8,r8,r4
 200be34:	003f8206 	br	200bc40 <__alt_data_end+0xfe00bc40>
 200be38:	18ffffc4 	addi	r3,r3,-1
 200be3c:	1800491e 	bne	r3,zero,200bf64 <__adddf3+0x400>
 200be40:	898bc83a 	sub	r5,r17,r6
 200be44:	8963803a 	cmpltu	r17,r17,r5
 200be48:	4251c83a 	sub	r8,r8,r9
 200be4c:	4451c83a 	sub	r8,r8,r17
 200be50:	2823883a 	mov	r17,r5
 200be54:	003f9f06 	br	200bcd4 <__alt_data_end+0xfe00bcd4>
 200be58:	4984b03a 	or	r2,r9,r6
 200be5c:	103f6026 	beq	r2,zero,200bbe0 <__alt_data_end+0xfe00bbe0>
 200be60:	213fffc4 	addi	r4,r4,-1
 200be64:	2000931e 	bne	r4,zero,200c0b4 <__adddf3+0x550>
 200be68:	898d883a 	add	r6,r17,r6
 200be6c:	3463803a 	cmpltu	r17,r6,r17
 200be70:	4251883a 	add	r8,r8,r9
 200be74:	8a11883a 	add	r8,r17,r8
 200be78:	3023883a 	mov	r17,r6
 200be7c:	003fd806 	br	200bde0 <__alt_data_end+0xfe00bde0>
 200be80:	1800541e 	bne	r3,zero,200bfd4 <__adddf3+0x470>
 200be84:	80800044 	addi	r2,r16,1
 200be88:	1081ffcc 	andi	r2,r2,2047
 200be8c:	00c00044 	movi	r3,1
 200be90:	1880a00e 	bge	r3,r2,200c114 <__adddf3+0x5b0>
 200be94:	8989c83a 	sub	r4,r17,r6
 200be98:	8905803a 	cmpltu	r2,r17,r4
 200be9c:	4267c83a 	sub	r19,r8,r9
 200bea0:	98a7c83a 	sub	r19,r19,r2
 200bea4:	9880202c 	andhi	r2,r19,128
 200bea8:	10006326 	beq	r2,zero,200c038 <__adddf3+0x4d4>
 200beac:	3463c83a 	sub	r17,r6,r17
 200beb0:	4a07c83a 	sub	r3,r9,r8
 200beb4:	344d803a 	cmpltu	r6,r6,r17
 200beb8:	19a7c83a 	sub	r19,r3,r6
 200bebc:	3825883a 	mov	r18,r7
 200bec0:	983f8a1e 	bne	r19,zero,200bcec <__alt_data_end+0xfe00bcec>
 200bec4:	8809883a 	mov	r4,r17
 200bec8:	200e3a40 	call	200e3a4 <__clzsi2>
 200becc:	10800804 	addi	r2,r2,32
 200bed0:	10fffe04 	addi	r3,r2,-8
 200bed4:	010007c4 	movi	r4,31
 200bed8:	20ff890e 	bge	r4,r3,200bd00 <__alt_data_end+0xfe00bd00>
 200bedc:	10bff604 	addi	r2,r2,-40
 200bee0:	8884983a 	sll	r2,r17,r2
 200bee4:	0023883a 	mov	r17,zero
 200bee8:	1c3f8c0e 	bge	r3,r16,200bd1c <__alt_data_end+0xfe00bd1c>
 200beec:	023fe034 	movhi	r8,65408
 200bef0:	423fffc4 	addi	r8,r8,-1
 200bef4:	80e1c83a 	sub	r16,r16,r3
 200bef8:	1210703a 	and	r8,r2,r8
 200befc:	003f3806 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200bf00:	9007883a 	mov	r3,r18
 200bf04:	0011883a 	mov	r8,zero
 200bf08:	0005883a 	mov	r2,zero
 200bf0c:	003f4c06 	br	200bc40 <__alt_data_end+0xfe00bc40>
 200bf10:	498cb03a 	or	r6,r9,r6
 200bf14:	300cc03a 	cmpne	r6,r6,zero
 200bf18:	0007883a 	mov	r3,zero
 200bf1c:	003f6806 	br	200bcc0 <__alt_data_end+0xfe00bcc0>
 200bf20:	20009c1e 	bne	r4,zero,200c194 <__adddf3+0x630>
 200bf24:	80800044 	addi	r2,r16,1
 200bf28:	1141ffcc 	andi	r5,r2,2047
 200bf2c:	01000044 	movi	r4,1
 200bf30:	2140670e 	bge	r4,r5,200c0d0 <__adddf3+0x56c>
 200bf34:	0101ffc4 	movi	r4,2047
 200bf38:	11007f26 	beq	r2,r4,200c138 <__adddf3+0x5d4>
 200bf3c:	898d883a 	add	r6,r17,r6
 200bf40:	4247883a 	add	r3,r8,r9
 200bf44:	3451803a 	cmpltu	r8,r6,r17
 200bf48:	40d1883a 	add	r8,r8,r3
 200bf4c:	402297fa 	slli	r17,r8,31
 200bf50:	300cd07a 	srli	r6,r6,1
 200bf54:	4010d07a 	srli	r8,r8,1
 200bf58:	1021883a 	mov	r16,r2
 200bf5c:	89a2b03a 	or	r17,r17,r6
 200bf60:	003f1f06 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200bf64:	0081ffc4 	movi	r2,2047
 200bf68:	80bf481e 	bne	r16,r2,200bc8c <__alt_data_end+0xfe00bc8c>
 200bf6c:	003f1c06 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200bf70:	843ff844 	addi	r16,r16,-31
 200bf74:	01000804 	movi	r4,32
 200bf78:	1406d83a 	srl	r3,r2,r16
 200bf7c:	41005026 	beq	r8,r4,200c0c0 <__adddf3+0x55c>
 200bf80:	01001004 	movi	r4,64
 200bf84:	2211c83a 	sub	r8,r4,r8
 200bf88:	1204983a 	sll	r2,r2,r8
 200bf8c:	88a2b03a 	or	r17,r17,r2
 200bf90:	8822c03a 	cmpne	r17,r17,zero
 200bf94:	1c62b03a 	or	r17,r3,r17
 200bf98:	0011883a 	mov	r8,zero
 200bf9c:	0021883a 	mov	r16,zero
 200bfa0:	003f7106 	br	200bd68 <__alt_data_end+0xfe00bd68>
 200bfa4:	193ff804 	addi	r4,r3,-32
 200bfa8:	00800804 	movi	r2,32
 200bfac:	4908d83a 	srl	r4,r9,r4
 200bfb0:	18804526 	beq	r3,r2,200c0c8 <__adddf3+0x564>
 200bfb4:	00801004 	movi	r2,64
 200bfb8:	10c5c83a 	sub	r2,r2,r3
 200bfbc:	4886983a 	sll	r3,r9,r2
 200bfc0:	198cb03a 	or	r6,r3,r6
 200bfc4:	300cc03a 	cmpne	r6,r6,zero
 200bfc8:	218cb03a 	or	r6,r4,r6
 200bfcc:	0007883a 	mov	r3,zero
 200bfd0:	003f3b06 	br	200bcc0 <__alt_data_end+0xfe00bcc0>
 200bfd4:	80002a26 	beq	r16,zero,200c080 <__adddf3+0x51c>
 200bfd8:	0101ffc4 	movi	r4,2047
 200bfdc:	11006826 	beq	r2,r4,200c180 <__adddf3+0x61c>
 200bfe0:	00c7c83a 	sub	r3,zero,r3
 200bfe4:	42002034 	orhi	r8,r8,128
 200bfe8:	01000e04 	movi	r4,56
 200bfec:	20c07c16 	blt	r4,r3,200c1e0 <__adddf3+0x67c>
 200bff0:	010007c4 	movi	r4,31
 200bff4:	20c0da16 	blt	r4,r3,200c360 <__adddf3+0x7fc>
 200bff8:	01000804 	movi	r4,32
 200bffc:	20c9c83a 	sub	r4,r4,r3
 200c000:	4114983a 	sll	r10,r8,r4
 200c004:	88cad83a 	srl	r5,r17,r3
 200c008:	8908983a 	sll	r4,r17,r4
 200c00c:	40c6d83a 	srl	r3,r8,r3
 200c010:	5162b03a 	or	r17,r10,r5
 200c014:	2008c03a 	cmpne	r4,r4,zero
 200c018:	8922b03a 	or	r17,r17,r4
 200c01c:	3463c83a 	sub	r17,r6,r17
 200c020:	48c7c83a 	sub	r3,r9,r3
 200c024:	344d803a 	cmpltu	r6,r6,r17
 200c028:	1991c83a 	sub	r8,r3,r6
 200c02c:	1021883a 	mov	r16,r2
 200c030:	3825883a 	mov	r18,r7
 200c034:	003f2706 	br	200bcd4 <__alt_data_end+0xfe00bcd4>
 200c038:	24d0b03a 	or	r8,r4,r19
 200c03c:	40001b1e 	bne	r8,zero,200c0ac <__adddf3+0x548>
 200c040:	0005883a 	mov	r2,zero
 200c044:	0007883a 	mov	r3,zero
 200c048:	0021883a 	mov	r16,zero
 200c04c:	003f4d06 	br	200bd84 <__alt_data_end+0xfe00bd84>
 200c050:	008007c4 	movi	r2,31
 200c054:	11003c16 	blt	r2,r4,200c148 <__adddf3+0x5e4>
 200c058:	00800804 	movi	r2,32
 200c05c:	1105c83a 	sub	r2,r2,r4
 200c060:	488e983a 	sll	r7,r9,r2
 200c064:	310ad83a 	srl	r5,r6,r4
 200c068:	3084983a 	sll	r2,r6,r2
 200c06c:	4912d83a 	srl	r9,r9,r4
 200c070:	394ab03a 	or	r5,r7,r5
 200c074:	1004c03a 	cmpne	r2,r2,zero
 200c078:	288ab03a 	or	r5,r5,r2
 200c07c:	003f5306 	br	200bdcc <__alt_data_end+0xfe00bdcc>
 200c080:	4448b03a 	or	r4,r8,r17
 200c084:	20003e26 	beq	r4,zero,200c180 <__adddf3+0x61c>
 200c088:	00c6303a 	nor	r3,zero,r3
 200c08c:	18003a1e 	bne	r3,zero,200c178 <__adddf3+0x614>
 200c090:	3463c83a 	sub	r17,r6,r17
 200c094:	4a07c83a 	sub	r3,r9,r8
 200c098:	344d803a 	cmpltu	r6,r6,r17
 200c09c:	1991c83a 	sub	r8,r3,r6
 200c0a0:	1021883a 	mov	r16,r2
 200c0a4:	3825883a 	mov	r18,r7
 200c0a8:	003f0a06 	br	200bcd4 <__alt_data_end+0xfe00bcd4>
 200c0ac:	2023883a 	mov	r17,r4
 200c0b0:	003f0d06 	br	200bce8 <__alt_data_end+0xfe00bce8>
 200c0b4:	0081ffc4 	movi	r2,2047
 200c0b8:	80bf3f1e 	bne	r16,r2,200bdb8 <__alt_data_end+0xfe00bdb8>
 200c0bc:	003ec806 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c0c0:	0005883a 	mov	r2,zero
 200c0c4:	003fb106 	br	200bf8c <__alt_data_end+0xfe00bf8c>
 200c0c8:	0007883a 	mov	r3,zero
 200c0cc:	003fbc06 	br	200bfc0 <__alt_data_end+0xfe00bfc0>
 200c0d0:	4444b03a 	or	r2,r8,r17
 200c0d4:	8000871e 	bne	r16,zero,200c2f4 <__adddf3+0x790>
 200c0d8:	1000ba26 	beq	r2,zero,200c3c4 <__adddf3+0x860>
 200c0dc:	4984b03a 	or	r2,r9,r6
 200c0e0:	103ebf26 	beq	r2,zero,200bbe0 <__alt_data_end+0xfe00bbe0>
 200c0e4:	8985883a 	add	r2,r17,r6
 200c0e8:	4247883a 	add	r3,r8,r9
 200c0ec:	1451803a 	cmpltu	r8,r2,r17
 200c0f0:	40d1883a 	add	r8,r8,r3
 200c0f4:	40c0202c 	andhi	r3,r8,128
 200c0f8:	1023883a 	mov	r17,r2
 200c0fc:	183f1a26 	beq	r3,zero,200bd68 <__alt_data_end+0xfe00bd68>
 200c100:	00bfe034 	movhi	r2,65408
 200c104:	10bfffc4 	addi	r2,r2,-1
 200c108:	2021883a 	mov	r16,r4
 200c10c:	4090703a 	and	r8,r8,r2
 200c110:	003eb306 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c114:	4444b03a 	or	r2,r8,r17
 200c118:	8000291e 	bne	r16,zero,200c1c0 <__adddf3+0x65c>
 200c11c:	10004b1e 	bne	r2,zero,200c24c <__adddf3+0x6e8>
 200c120:	4990b03a 	or	r8,r9,r6
 200c124:	40008b26 	beq	r8,zero,200c354 <__adddf3+0x7f0>
 200c128:	4811883a 	mov	r8,r9
 200c12c:	3023883a 	mov	r17,r6
 200c130:	3825883a 	mov	r18,r7
 200c134:	003eaa06 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c138:	1021883a 	mov	r16,r2
 200c13c:	0011883a 	mov	r8,zero
 200c140:	0005883a 	mov	r2,zero
 200c144:	003f0f06 	br	200bd84 <__alt_data_end+0xfe00bd84>
 200c148:	217ff804 	addi	r5,r4,-32
 200c14c:	00800804 	movi	r2,32
 200c150:	494ad83a 	srl	r5,r9,r5
 200c154:	20807d26 	beq	r4,r2,200c34c <__adddf3+0x7e8>
 200c158:	00801004 	movi	r2,64
 200c15c:	1109c83a 	sub	r4,r2,r4
 200c160:	4912983a 	sll	r9,r9,r4
 200c164:	498cb03a 	or	r6,r9,r6
 200c168:	300cc03a 	cmpne	r6,r6,zero
 200c16c:	298ab03a 	or	r5,r5,r6
 200c170:	0013883a 	mov	r9,zero
 200c174:	003f1506 	br	200bdcc <__alt_data_end+0xfe00bdcc>
 200c178:	0101ffc4 	movi	r4,2047
 200c17c:	113f9a1e 	bne	r2,r4,200bfe8 <__alt_data_end+0xfe00bfe8>
 200c180:	4811883a 	mov	r8,r9
 200c184:	3023883a 	mov	r17,r6
 200c188:	1021883a 	mov	r16,r2
 200c18c:	3825883a 	mov	r18,r7
 200c190:	003e9306 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c194:	8000161e 	bne	r16,zero,200c1f0 <__adddf3+0x68c>
 200c198:	444ab03a 	or	r5,r8,r17
 200c19c:	28005126 	beq	r5,zero,200c2e4 <__adddf3+0x780>
 200c1a0:	0108303a 	nor	r4,zero,r4
 200c1a4:	20004d1e 	bne	r4,zero,200c2dc <__adddf3+0x778>
 200c1a8:	89a3883a 	add	r17,r17,r6
 200c1ac:	4253883a 	add	r9,r8,r9
 200c1b0:	898d803a 	cmpltu	r6,r17,r6
 200c1b4:	3251883a 	add	r8,r6,r9
 200c1b8:	1021883a 	mov	r16,r2
 200c1bc:	003f0806 	br	200bde0 <__alt_data_end+0xfe00bde0>
 200c1c0:	1000301e 	bne	r2,zero,200c284 <__adddf3+0x720>
 200c1c4:	4984b03a 	or	r2,r9,r6
 200c1c8:	10007126 	beq	r2,zero,200c390 <__adddf3+0x82c>
 200c1cc:	4811883a 	mov	r8,r9
 200c1d0:	3023883a 	mov	r17,r6
 200c1d4:	3825883a 	mov	r18,r7
 200c1d8:	0401ffc4 	movi	r16,2047
 200c1dc:	003e8006 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c1e0:	4462b03a 	or	r17,r8,r17
 200c1e4:	8822c03a 	cmpne	r17,r17,zero
 200c1e8:	0007883a 	mov	r3,zero
 200c1ec:	003f8b06 	br	200c01c <__alt_data_end+0xfe00c01c>
 200c1f0:	0141ffc4 	movi	r5,2047
 200c1f4:	11403b26 	beq	r2,r5,200c2e4 <__adddf3+0x780>
 200c1f8:	0109c83a 	sub	r4,zero,r4
 200c1fc:	42002034 	orhi	r8,r8,128
 200c200:	01400e04 	movi	r5,56
 200c204:	29006716 	blt	r5,r4,200c3a4 <__adddf3+0x840>
 200c208:	014007c4 	movi	r5,31
 200c20c:	29007016 	blt	r5,r4,200c3d0 <__adddf3+0x86c>
 200c210:	01400804 	movi	r5,32
 200c214:	290bc83a 	sub	r5,r5,r4
 200c218:	4154983a 	sll	r10,r8,r5
 200c21c:	890ed83a 	srl	r7,r17,r4
 200c220:	894a983a 	sll	r5,r17,r5
 200c224:	4108d83a 	srl	r4,r8,r4
 200c228:	51e2b03a 	or	r17,r10,r7
 200c22c:	280ac03a 	cmpne	r5,r5,zero
 200c230:	8962b03a 	or	r17,r17,r5
 200c234:	89a3883a 	add	r17,r17,r6
 200c238:	2253883a 	add	r9,r4,r9
 200c23c:	898d803a 	cmpltu	r6,r17,r6
 200c240:	3251883a 	add	r8,r6,r9
 200c244:	1021883a 	mov	r16,r2
 200c248:	003ee506 	br	200bde0 <__alt_data_end+0xfe00bde0>
 200c24c:	4984b03a 	or	r2,r9,r6
 200c250:	103e6326 	beq	r2,zero,200bbe0 <__alt_data_end+0xfe00bbe0>
 200c254:	8987c83a 	sub	r3,r17,r6
 200c258:	88c9803a 	cmpltu	r4,r17,r3
 200c25c:	4245c83a 	sub	r2,r8,r9
 200c260:	1105c83a 	sub	r2,r2,r4
 200c264:	1100202c 	andhi	r4,r2,128
 200c268:	203ebb26 	beq	r4,zero,200bd58 <__alt_data_end+0xfe00bd58>
 200c26c:	3463c83a 	sub	r17,r6,r17
 200c270:	4a07c83a 	sub	r3,r9,r8
 200c274:	344d803a 	cmpltu	r6,r6,r17
 200c278:	1991c83a 	sub	r8,r3,r6
 200c27c:	3825883a 	mov	r18,r7
 200c280:	003e5706 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c284:	4984b03a 	or	r2,r9,r6
 200c288:	10002e26 	beq	r2,zero,200c344 <__adddf3+0x7e0>
 200c28c:	4004d0fa 	srli	r2,r8,3
 200c290:	8822d0fa 	srli	r17,r17,3
 200c294:	4010977a 	slli	r8,r8,29
 200c298:	10c0022c 	andhi	r3,r2,8
 200c29c:	4462b03a 	or	r17,r8,r17
 200c2a0:	18000826 	beq	r3,zero,200c2c4 <__adddf3+0x760>
 200c2a4:	4808d0fa 	srli	r4,r9,3
 200c2a8:	20c0022c 	andhi	r3,r4,8
 200c2ac:	1800051e 	bne	r3,zero,200c2c4 <__adddf3+0x760>
 200c2b0:	300cd0fa 	srli	r6,r6,3
 200c2b4:	4806977a 	slli	r3,r9,29
 200c2b8:	2005883a 	mov	r2,r4
 200c2bc:	3825883a 	mov	r18,r7
 200c2c0:	19a2b03a 	or	r17,r3,r6
 200c2c4:	8810d77a 	srli	r8,r17,29
 200c2c8:	100490fa 	slli	r2,r2,3
 200c2cc:	882290fa 	slli	r17,r17,3
 200c2d0:	0401ffc4 	movi	r16,2047
 200c2d4:	4090b03a 	or	r8,r8,r2
 200c2d8:	003e4106 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c2dc:	0141ffc4 	movi	r5,2047
 200c2e0:	117fc71e 	bne	r2,r5,200c200 <__alt_data_end+0xfe00c200>
 200c2e4:	4811883a 	mov	r8,r9
 200c2e8:	3023883a 	mov	r17,r6
 200c2ec:	1021883a 	mov	r16,r2
 200c2f0:	003e3b06 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c2f4:	10002f26 	beq	r2,zero,200c3b4 <__adddf3+0x850>
 200c2f8:	4984b03a 	or	r2,r9,r6
 200c2fc:	10001126 	beq	r2,zero,200c344 <__adddf3+0x7e0>
 200c300:	4004d0fa 	srli	r2,r8,3
 200c304:	8822d0fa 	srli	r17,r17,3
 200c308:	4010977a 	slli	r8,r8,29
 200c30c:	10c0022c 	andhi	r3,r2,8
 200c310:	4462b03a 	or	r17,r8,r17
 200c314:	183feb26 	beq	r3,zero,200c2c4 <__alt_data_end+0xfe00c2c4>
 200c318:	4808d0fa 	srli	r4,r9,3
 200c31c:	20c0022c 	andhi	r3,r4,8
 200c320:	183fe81e 	bne	r3,zero,200c2c4 <__alt_data_end+0xfe00c2c4>
 200c324:	300cd0fa 	srli	r6,r6,3
 200c328:	4806977a 	slli	r3,r9,29
 200c32c:	2005883a 	mov	r2,r4
 200c330:	19a2b03a 	or	r17,r3,r6
 200c334:	003fe306 	br	200c2c4 <__alt_data_end+0xfe00c2c4>
 200c338:	0011883a 	mov	r8,zero
 200c33c:	0005883a 	mov	r2,zero
 200c340:	003e3f06 	br	200bc40 <__alt_data_end+0xfe00bc40>
 200c344:	0401ffc4 	movi	r16,2047
 200c348:	003e2506 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c34c:	0013883a 	mov	r9,zero
 200c350:	003f8406 	br	200c164 <__alt_data_end+0xfe00c164>
 200c354:	0005883a 	mov	r2,zero
 200c358:	0007883a 	mov	r3,zero
 200c35c:	003e8906 	br	200bd84 <__alt_data_end+0xfe00bd84>
 200c360:	197ff804 	addi	r5,r3,-32
 200c364:	01000804 	movi	r4,32
 200c368:	414ad83a 	srl	r5,r8,r5
 200c36c:	19002426 	beq	r3,r4,200c400 <__adddf3+0x89c>
 200c370:	01001004 	movi	r4,64
 200c374:	20c7c83a 	sub	r3,r4,r3
 200c378:	40c6983a 	sll	r3,r8,r3
 200c37c:	1c46b03a 	or	r3,r3,r17
 200c380:	1806c03a 	cmpne	r3,r3,zero
 200c384:	28e2b03a 	or	r17,r5,r3
 200c388:	0007883a 	mov	r3,zero
 200c38c:	003f2306 	br	200c01c <__alt_data_end+0xfe00c01c>
 200c390:	0007883a 	mov	r3,zero
 200c394:	5811883a 	mov	r8,r11
 200c398:	00bfffc4 	movi	r2,-1
 200c39c:	0401ffc4 	movi	r16,2047
 200c3a0:	003e7806 	br	200bd84 <__alt_data_end+0xfe00bd84>
 200c3a4:	4462b03a 	or	r17,r8,r17
 200c3a8:	8822c03a 	cmpne	r17,r17,zero
 200c3ac:	0009883a 	mov	r4,zero
 200c3b0:	003fa006 	br	200c234 <__alt_data_end+0xfe00c234>
 200c3b4:	4811883a 	mov	r8,r9
 200c3b8:	3023883a 	mov	r17,r6
 200c3bc:	0401ffc4 	movi	r16,2047
 200c3c0:	003e0706 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c3c4:	4811883a 	mov	r8,r9
 200c3c8:	3023883a 	mov	r17,r6
 200c3cc:	003e0406 	br	200bbe0 <__alt_data_end+0xfe00bbe0>
 200c3d0:	21fff804 	addi	r7,r4,-32
 200c3d4:	01400804 	movi	r5,32
 200c3d8:	41ced83a 	srl	r7,r8,r7
 200c3dc:	21400a26 	beq	r4,r5,200c408 <__adddf3+0x8a4>
 200c3e0:	01401004 	movi	r5,64
 200c3e4:	2909c83a 	sub	r4,r5,r4
 200c3e8:	4108983a 	sll	r4,r8,r4
 200c3ec:	2448b03a 	or	r4,r4,r17
 200c3f0:	2008c03a 	cmpne	r4,r4,zero
 200c3f4:	3922b03a 	or	r17,r7,r4
 200c3f8:	0009883a 	mov	r4,zero
 200c3fc:	003f8d06 	br	200c234 <__alt_data_end+0xfe00c234>
 200c400:	0007883a 	mov	r3,zero
 200c404:	003fdd06 	br	200c37c <__alt_data_end+0xfe00c37c>
 200c408:	0009883a 	mov	r4,zero
 200c40c:	003ff706 	br	200c3ec <__alt_data_end+0xfe00c3ec>

0200c410 <__divdf3>:
 200c410:	defff004 	addi	sp,sp,-64
 200c414:	dc800815 	stw	r18,32(sp)
 200c418:	2824d53a 	srli	r18,r5,20
 200c41c:	dd800c15 	stw	r22,48(sp)
 200c420:	282cd7fa 	srli	r22,r5,31
 200c424:	dc000615 	stw	r16,24(sp)
 200c428:	04000434 	movhi	r16,16
 200c42c:	843fffc4 	addi	r16,r16,-1
 200c430:	dfc00f15 	stw	ra,60(sp)
 200c434:	df000e15 	stw	fp,56(sp)
 200c438:	ddc00d15 	stw	r23,52(sp)
 200c43c:	dd400b15 	stw	r21,44(sp)
 200c440:	dd000a15 	stw	r20,40(sp)
 200c444:	dcc00915 	stw	r19,36(sp)
 200c448:	dc400715 	stw	r17,28(sp)
 200c44c:	9481ffcc 	andi	r18,r18,2047
 200c450:	2c20703a 	and	r16,r5,r16
 200c454:	b2003fcc 	andi	r8,r22,255
 200c458:	90006126 	beq	r18,zero,200c5e0 <__divdf3+0x1d0>
 200c45c:	0081ffc4 	movi	r2,2047
 200c460:	202b883a 	mov	r21,r4
 200c464:	90803726 	beq	r18,r2,200c544 <__divdf3+0x134>
 200c468:	80800434 	orhi	r2,r16,16
 200c46c:	100490fa 	slli	r2,r2,3
 200c470:	2020d77a 	srli	r16,r4,29
 200c474:	202a90fa 	slli	r21,r4,3
 200c478:	94bf0044 	addi	r18,r18,-1023
 200c47c:	80a0b03a 	or	r16,r16,r2
 200c480:	0013883a 	mov	r9,zero
 200c484:	000b883a 	mov	r5,zero
 200c488:	3806d53a 	srli	r3,r7,20
 200c48c:	382ed7fa 	srli	r23,r7,31
 200c490:	04400434 	movhi	r17,16
 200c494:	8c7fffc4 	addi	r17,r17,-1
 200c498:	18c1ffcc 	andi	r3,r3,2047
 200c49c:	3029883a 	mov	r20,r6
 200c4a0:	3c62703a 	and	r17,r7,r17
 200c4a4:	bf003fcc 	andi	fp,r23,255
 200c4a8:	18006e26 	beq	r3,zero,200c664 <__divdf3+0x254>
 200c4ac:	0081ffc4 	movi	r2,2047
 200c4b0:	18806626 	beq	r3,r2,200c64c <__divdf3+0x23c>
 200c4b4:	88800434 	orhi	r2,r17,16
 200c4b8:	100490fa 	slli	r2,r2,3
 200c4bc:	3022d77a 	srli	r17,r6,29
 200c4c0:	302890fa 	slli	r20,r6,3
 200c4c4:	18ff0044 	addi	r3,r3,-1023
 200c4c8:	88a2b03a 	or	r17,r17,r2
 200c4cc:	000f883a 	mov	r7,zero
 200c4d0:	b5e6f03a 	xor	r19,r22,r23
 200c4d4:	3a4cb03a 	or	r6,r7,r9
 200c4d8:	008003c4 	movi	r2,15
 200c4dc:	9809883a 	mov	r4,r19
 200c4e0:	90c7c83a 	sub	r3,r18,r3
 200c4e4:	9cc03fcc 	andi	r19,r19,255
 200c4e8:	11809636 	bltu	r2,r6,200c744 <__divdf3+0x334>
 200c4ec:	300c90ba 	slli	r6,r6,2
 200c4f0:	00808074 	movhi	r2,513
 200c4f4:	10b14104 	addi	r2,r2,-15100
 200c4f8:	308d883a 	add	r6,r6,r2
 200c4fc:	30800017 	ldw	r2,0(r6)
 200c500:	1000683a 	jmp	r2
 200c504:	0200c744 	movi	r8,797
 200c508:	0200c57c 	xorhi	r8,zero,789
 200c50c:	0200c734 	movhi	r8,796
 200c510:	0200c570 	cmpltui	r8,zero,789
 200c514:	0200c734 	movhi	r8,796
 200c518:	0200c708 	cmpgei	r8,zero,796
 200c51c:	0200c734 	movhi	r8,796
 200c520:	0200c570 	cmpltui	r8,zero,789
 200c524:	0200c57c 	xorhi	r8,zero,789
 200c528:	0200c57c 	xorhi	r8,zero,789
 200c52c:	0200c708 	cmpgei	r8,zero,796
 200c530:	0200c570 	cmpltui	r8,zero,789
 200c534:	0200c560 	cmpeqi	r8,zero,789
 200c538:	0200c560 	cmpeqi	r8,zero,789
 200c53c:	0200c560 	cmpeqi	r8,zero,789
 200c540:	0200cacc 	andi	r8,zero,811
 200c544:	2404b03a 	or	r2,r4,r16
 200c548:	10006c1e 	bne	r2,zero,200c6fc <__divdf3+0x2ec>
 200c54c:	02400204 	movi	r9,8
 200c550:	0021883a 	mov	r16,zero
 200c554:	002b883a 	mov	r21,zero
 200c558:	01400084 	movi	r5,2
 200c55c:	003fca06 	br	200c488 <__alt_data_end+0xfe00c488>
 200c560:	8023883a 	mov	r17,r16
 200c564:	a829883a 	mov	r20,r21
 200c568:	4039883a 	mov	fp,r8
 200c56c:	280f883a 	mov	r7,r5
 200c570:	00800084 	movi	r2,2
 200c574:	3881601e 	bne	r7,r2,200caf8 <__divdf3+0x6e8>
 200c578:	e027883a 	mov	r19,fp
 200c57c:	9900004c 	andi	r4,r19,1
 200c580:	0081ffc4 	movi	r2,2047
 200c584:	0021883a 	mov	r16,zero
 200c588:	002b883a 	mov	r21,zero
 200c58c:	1004953a 	slli	r2,r2,20
 200c590:	20c03fcc 	andi	r3,r4,255
 200c594:	01400434 	movhi	r5,16
 200c598:	297fffc4 	addi	r5,r5,-1
 200c59c:	180697fa 	slli	r3,r3,31
 200c5a0:	8160703a 	and	r16,r16,r5
 200c5a4:	80a0b03a 	or	r16,r16,r2
 200c5a8:	80c6b03a 	or	r3,r16,r3
 200c5ac:	a805883a 	mov	r2,r21
 200c5b0:	dfc00f17 	ldw	ra,60(sp)
 200c5b4:	df000e17 	ldw	fp,56(sp)
 200c5b8:	ddc00d17 	ldw	r23,52(sp)
 200c5bc:	dd800c17 	ldw	r22,48(sp)
 200c5c0:	dd400b17 	ldw	r21,44(sp)
 200c5c4:	dd000a17 	ldw	r20,40(sp)
 200c5c8:	dcc00917 	ldw	r19,36(sp)
 200c5cc:	dc800817 	ldw	r18,32(sp)
 200c5d0:	dc400717 	ldw	r17,28(sp)
 200c5d4:	dc000617 	ldw	r16,24(sp)
 200c5d8:	dec01004 	addi	sp,sp,64
 200c5dc:	f800283a 	ret
 200c5e0:	2404b03a 	or	r2,r4,r16
 200c5e4:	2023883a 	mov	r17,r4
 200c5e8:	10003f26 	beq	r2,zero,200c6e8 <__divdf3+0x2d8>
 200c5ec:	80015e26 	beq	r16,zero,200cb68 <__divdf3+0x758>
 200c5f0:	8009883a 	mov	r4,r16
 200c5f4:	d9800215 	stw	r6,8(sp)
 200c5f8:	d9c00515 	stw	r7,20(sp)
 200c5fc:	da000415 	stw	r8,16(sp)
 200c600:	200e3a40 	call	200e3a4 <__clzsi2>
 200c604:	d9800217 	ldw	r6,8(sp)
 200c608:	d9c00517 	ldw	r7,20(sp)
 200c60c:	da000417 	ldw	r8,16(sp)
 200c610:	113ffd44 	addi	r4,r2,-11
 200c614:	00c00704 	movi	r3,28
 200c618:	19014f16 	blt	r3,r4,200cb58 <__divdf3+0x748>
 200c61c:	00c00744 	movi	r3,29
 200c620:	157ffe04 	addi	r21,r2,-8
 200c624:	1907c83a 	sub	r3,r3,r4
 200c628:	8560983a 	sll	r16,r16,r21
 200c62c:	88c6d83a 	srl	r3,r17,r3
 200c630:	8d6a983a 	sll	r21,r17,r21
 200c634:	1c20b03a 	or	r16,r3,r16
 200c638:	1080fcc4 	addi	r2,r2,1011
 200c63c:	00a5c83a 	sub	r18,zero,r2
 200c640:	0013883a 	mov	r9,zero
 200c644:	000b883a 	mov	r5,zero
 200c648:	003f8f06 	br	200c488 <__alt_data_end+0xfe00c488>
 200c64c:	3444b03a 	or	r2,r6,r17
 200c650:	1000231e 	bne	r2,zero,200c6e0 <__divdf3+0x2d0>
 200c654:	0023883a 	mov	r17,zero
 200c658:	0029883a 	mov	r20,zero
 200c65c:	01c00084 	movi	r7,2
 200c660:	003f9b06 	br	200c4d0 <__alt_data_end+0xfe00c4d0>
 200c664:	3444b03a 	or	r2,r6,r17
 200c668:	10001926 	beq	r2,zero,200c6d0 <__divdf3+0x2c0>
 200c66c:	88014b26 	beq	r17,zero,200cb9c <__divdf3+0x78c>
 200c670:	8809883a 	mov	r4,r17
 200c674:	d9400115 	stw	r5,4(sp)
 200c678:	d9800215 	stw	r6,8(sp)
 200c67c:	da000415 	stw	r8,16(sp)
 200c680:	da400315 	stw	r9,12(sp)
 200c684:	200e3a40 	call	200e3a4 <__clzsi2>
 200c688:	d9400117 	ldw	r5,4(sp)
 200c68c:	d9800217 	ldw	r6,8(sp)
 200c690:	da000417 	ldw	r8,16(sp)
 200c694:	da400317 	ldw	r9,12(sp)
 200c698:	113ffd44 	addi	r4,r2,-11
 200c69c:	00c00704 	movi	r3,28
 200c6a0:	19013a16 	blt	r3,r4,200cb8c <__divdf3+0x77c>
 200c6a4:	00c00744 	movi	r3,29
 200c6a8:	153ffe04 	addi	r20,r2,-8
 200c6ac:	1907c83a 	sub	r3,r3,r4
 200c6b0:	8d22983a 	sll	r17,r17,r20
 200c6b4:	30c6d83a 	srl	r3,r6,r3
 200c6b8:	3528983a 	sll	r20,r6,r20
 200c6bc:	1c62b03a 	or	r17,r3,r17
 200c6c0:	1080fcc4 	addi	r2,r2,1011
 200c6c4:	0087c83a 	sub	r3,zero,r2
 200c6c8:	000f883a 	mov	r7,zero
 200c6cc:	003f8006 	br	200c4d0 <__alt_data_end+0xfe00c4d0>
 200c6d0:	0023883a 	mov	r17,zero
 200c6d4:	0029883a 	mov	r20,zero
 200c6d8:	01c00044 	movi	r7,1
 200c6dc:	003f7c06 	br	200c4d0 <__alt_data_end+0xfe00c4d0>
 200c6e0:	01c000c4 	movi	r7,3
 200c6e4:	003f7a06 	br	200c4d0 <__alt_data_end+0xfe00c4d0>
 200c6e8:	02400104 	movi	r9,4
 200c6ec:	0021883a 	mov	r16,zero
 200c6f0:	002b883a 	mov	r21,zero
 200c6f4:	01400044 	movi	r5,1
 200c6f8:	003f6306 	br	200c488 <__alt_data_end+0xfe00c488>
 200c6fc:	02400304 	movi	r9,12
 200c700:	014000c4 	movi	r5,3
 200c704:	003f6006 	br	200c488 <__alt_data_end+0xfe00c488>
 200c708:	04000434 	movhi	r16,16
 200c70c:	0009883a 	mov	r4,zero
 200c710:	843fffc4 	addi	r16,r16,-1
 200c714:	057fffc4 	movi	r21,-1
 200c718:	0081ffc4 	movi	r2,2047
 200c71c:	003f9b06 	br	200c58c <__alt_data_end+0xfe00c58c>
 200c720:	00c00044 	movi	r3,1
 200c724:	1887c83a 	sub	r3,r3,r2
 200c728:	01000e04 	movi	r4,56
 200c72c:	20c1530e 	bge	r4,r3,200cc7c <__divdf3+0x86c>
 200c730:	9900004c 	andi	r4,r19,1
 200c734:	0005883a 	mov	r2,zero
 200c738:	0021883a 	mov	r16,zero
 200c73c:	002b883a 	mov	r21,zero
 200c740:	003f9206 	br	200c58c <__alt_data_end+0xfe00c58c>
 200c744:	8c012e36 	bltu	r17,r16,200cc00 <__divdf3+0x7f0>
 200c748:	84412c26 	beq	r16,r17,200cbfc <__divdf3+0x7ec>
 200c74c:	a82f883a 	mov	r23,r21
 200c750:	18ffffc4 	addi	r3,r3,-1
 200c754:	002b883a 	mov	r21,zero
 200c758:	a004d63a 	srli	r2,r20,24
 200c75c:	8822923a 	slli	r17,r17,8
 200c760:	a028923a 	slli	r20,r20,8
 200c764:	8009883a 	mov	r4,r16
 200c768:	88acb03a 	or	r22,r17,r2
 200c76c:	dd000015 	stw	r20,0(sp)
 200c770:	b028d43a 	srli	r20,r22,16
 200c774:	d8c00215 	stw	r3,8(sp)
 200c778:	b4bfffcc 	andi	r18,r22,65535
 200c77c:	a00b883a 	mov	r5,r20
 200c780:	20009900 	call	2000990 <__udivsi3>
 200c784:	100b883a 	mov	r5,r2
 200c788:	9009883a 	mov	r4,r18
 200c78c:	1023883a 	mov	r17,r2
 200c790:	2000a4c0 	call	2000a4c <__mulsi3>
 200c794:	8009883a 	mov	r4,r16
 200c798:	a00b883a 	mov	r5,r20
 200c79c:	1039883a 	mov	fp,r2
 200c7a0:	20009f40 	call	20009f4 <__umodsi3>
 200c7a4:	1004943a 	slli	r2,r2,16
 200c7a8:	b808d43a 	srli	r4,r23,16
 200c7ac:	d8c00217 	ldw	r3,8(sp)
 200c7b0:	2084b03a 	or	r2,r4,r2
 200c7b4:	1700062e 	bgeu	r2,fp,200c7d0 <__divdf3+0x3c0>
 200c7b8:	1585883a 	add	r2,r2,r22
 200c7bc:	893fffc4 	addi	r4,r17,-1
 200c7c0:	15811d36 	bltu	r2,r22,200cc38 <__divdf3+0x828>
 200c7c4:	17011c2e 	bgeu	r2,fp,200cc38 <__divdf3+0x828>
 200c7c8:	8c7fff84 	addi	r17,r17,-2
 200c7cc:	1585883a 	add	r2,r2,r22
 200c7d0:	1739c83a 	sub	fp,r2,fp
 200c7d4:	a00b883a 	mov	r5,r20
 200c7d8:	e009883a 	mov	r4,fp
 200c7dc:	d8c00215 	stw	r3,8(sp)
 200c7e0:	20009900 	call	2000990 <__udivsi3>
 200c7e4:	100b883a 	mov	r5,r2
 200c7e8:	9009883a 	mov	r4,r18
 200c7ec:	1021883a 	mov	r16,r2
 200c7f0:	2000a4c0 	call	2000a4c <__mulsi3>
 200c7f4:	a00b883a 	mov	r5,r20
 200c7f8:	e009883a 	mov	r4,fp
 200c7fc:	d8800415 	stw	r2,16(sp)
 200c800:	20009f40 	call	20009f4 <__umodsi3>
 200c804:	1004943a 	slli	r2,r2,16
 200c808:	da000417 	ldw	r8,16(sp)
 200c80c:	bdffffcc 	andi	r23,r23,65535
 200c810:	b884b03a 	or	r2,r23,r2
 200c814:	d8c00217 	ldw	r3,8(sp)
 200c818:	1200062e 	bgeu	r2,r8,200c834 <__divdf3+0x424>
 200c81c:	1585883a 	add	r2,r2,r22
 200c820:	813fffc4 	addi	r4,r16,-1
 200c824:	15810236 	bltu	r2,r22,200cc30 <__divdf3+0x820>
 200c828:	1201012e 	bgeu	r2,r8,200cc30 <__divdf3+0x820>
 200c82c:	843fff84 	addi	r16,r16,-2
 200c830:	1585883a 	add	r2,r2,r22
 200c834:	8822943a 	slli	r17,r17,16
 200c838:	d9800017 	ldw	r6,0(sp)
 200c83c:	1211c83a 	sub	r8,r2,r8
 200c840:	8c22b03a 	or	r17,r17,r16
 200c844:	373fffcc 	andi	fp,r6,65535
 200c848:	8abfffcc 	andi	r10,r17,65535
 200c84c:	8820d43a 	srli	r16,r17,16
 200c850:	5009883a 	mov	r4,r10
 200c854:	e00b883a 	mov	r5,fp
 200c858:	302ed43a 	srli	r23,r6,16
 200c85c:	d8c00215 	stw	r3,8(sp)
 200c860:	da000415 	stw	r8,16(sp)
 200c864:	da800115 	stw	r10,4(sp)
 200c868:	2000a4c0 	call	2000a4c <__mulsi3>
 200c86c:	800b883a 	mov	r5,r16
 200c870:	e009883a 	mov	r4,fp
 200c874:	d8800515 	stw	r2,20(sp)
 200c878:	2000a4c0 	call	2000a4c <__mulsi3>
 200c87c:	8009883a 	mov	r4,r16
 200c880:	b80b883a 	mov	r5,r23
 200c884:	d8800315 	stw	r2,12(sp)
 200c888:	2000a4c0 	call	2000a4c <__mulsi3>
 200c88c:	da800117 	ldw	r10,4(sp)
 200c890:	b80b883a 	mov	r5,r23
 200c894:	1021883a 	mov	r16,r2
 200c898:	5009883a 	mov	r4,r10
 200c89c:	2000a4c0 	call	2000a4c <__mulsi3>
 200c8a0:	d9c00517 	ldw	r7,20(sp)
 200c8a4:	da400317 	ldw	r9,12(sp)
 200c8a8:	d8c00217 	ldw	r3,8(sp)
 200c8ac:	3808d43a 	srli	r4,r7,16
 200c8b0:	1245883a 	add	r2,r2,r9
 200c8b4:	da000417 	ldw	r8,16(sp)
 200c8b8:	2085883a 	add	r2,r4,r2
 200c8bc:	1240022e 	bgeu	r2,r9,200c8c8 <__divdf3+0x4b8>
 200c8c0:	01000074 	movhi	r4,1
 200c8c4:	8121883a 	add	r16,r16,r4
 200c8c8:	1008d43a 	srli	r4,r2,16
 200c8cc:	1004943a 	slli	r2,r2,16
 200c8d0:	39ffffcc 	andi	r7,r7,65535
 200c8d4:	2409883a 	add	r4,r4,r16
 200c8d8:	11c5883a 	add	r2,r2,r7
 200c8dc:	4100bb36 	bltu	r8,r4,200cbcc <__divdf3+0x7bc>
 200c8e0:	4100d726 	beq	r8,r4,200cc40 <__divdf3+0x830>
 200c8e4:	4109c83a 	sub	r4,r8,r4
 200c8e8:	a8a1c83a 	sub	r16,r21,r2
 200c8ec:	ac2b803a 	cmpltu	r21,r21,r16
 200c8f0:	256bc83a 	sub	r21,r4,r21
 200c8f4:	b540d926 	beq	r22,r21,200cc5c <__divdf3+0x84c>
 200c8f8:	a00b883a 	mov	r5,r20
 200c8fc:	a809883a 	mov	r4,r21
 200c900:	d8c00215 	stw	r3,8(sp)
 200c904:	20009900 	call	2000990 <__udivsi3>
 200c908:	100b883a 	mov	r5,r2
 200c90c:	9009883a 	mov	r4,r18
 200c910:	d8800515 	stw	r2,20(sp)
 200c914:	2000a4c0 	call	2000a4c <__mulsi3>
 200c918:	a809883a 	mov	r4,r21
 200c91c:	a00b883a 	mov	r5,r20
 200c920:	d8800415 	stw	r2,16(sp)
 200c924:	20009f40 	call	20009f4 <__umodsi3>
 200c928:	1004943a 	slli	r2,r2,16
 200c92c:	8008d43a 	srli	r4,r16,16
 200c930:	da000417 	ldw	r8,16(sp)
 200c934:	d8c00217 	ldw	r3,8(sp)
 200c938:	2084b03a 	or	r2,r4,r2
 200c93c:	d9c00517 	ldw	r7,20(sp)
 200c940:	1200062e 	bgeu	r2,r8,200c95c <__divdf3+0x54c>
 200c944:	1585883a 	add	r2,r2,r22
 200c948:	393fffc4 	addi	r4,r7,-1
 200c94c:	1580c536 	bltu	r2,r22,200cc64 <__divdf3+0x854>
 200c950:	1200c42e 	bgeu	r2,r8,200cc64 <__divdf3+0x854>
 200c954:	39ffff84 	addi	r7,r7,-2
 200c958:	1585883a 	add	r2,r2,r22
 200c95c:	122bc83a 	sub	r21,r2,r8
 200c960:	a00b883a 	mov	r5,r20
 200c964:	a809883a 	mov	r4,r21
 200c968:	d8c00215 	stw	r3,8(sp)
 200c96c:	d9c00515 	stw	r7,20(sp)
 200c970:	20009900 	call	2000990 <__udivsi3>
 200c974:	9009883a 	mov	r4,r18
 200c978:	100b883a 	mov	r5,r2
 200c97c:	d8800415 	stw	r2,16(sp)
 200c980:	2000a4c0 	call	2000a4c <__mulsi3>
 200c984:	a809883a 	mov	r4,r21
 200c988:	a00b883a 	mov	r5,r20
 200c98c:	1025883a 	mov	r18,r2
 200c990:	20009f40 	call	20009f4 <__umodsi3>
 200c994:	1004943a 	slli	r2,r2,16
 200c998:	813fffcc 	andi	r4,r16,65535
 200c99c:	d8c00217 	ldw	r3,8(sp)
 200c9a0:	20a0b03a 	or	r16,r4,r2
 200c9a4:	d9c00517 	ldw	r7,20(sp)
 200c9a8:	da000417 	ldw	r8,16(sp)
 200c9ac:	8480062e 	bgeu	r16,r18,200c9c8 <__divdf3+0x5b8>
 200c9b0:	85a1883a 	add	r16,r16,r22
 200c9b4:	40bfffc4 	addi	r2,r8,-1
 200c9b8:	8580ac36 	bltu	r16,r22,200cc6c <__divdf3+0x85c>
 200c9bc:	8480ab2e 	bgeu	r16,r18,200cc6c <__divdf3+0x85c>
 200c9c0:	423fff84 	addi	r8,r8,-2
 200c9c4:	85a1883a 	add	r16,r16,r22
 200c9c8:	3804943a 	slli	r2,r7,16
 200c9cc:	84a1c83a 	sub	r16,r16,r18
 200c9d0:	e009883a 	mov	r4,fp
 200c9d4:	1228b03a 	or	r20,r2,r8
 200c9d8:	a1ffffcc 	andi	r7,r20,65535
 200c9dc:	a024d43a 	srli	r18,r20,16
 200c9e0:	380b883a 	mov	r5,r7
 200c9e4:	d8c00215 	stw	r3,8(sp)
 200c9e8:	d9c00515 	stw	r7,20(sp)
 200c9ec:	2000a4c0 	call	2000a4c <__mulsi3>
 200c9f0:	900b883a 	mov	r5,r18
 200c9f4:	e009883a 	mov	r4,fp
 200c9f8:	102b883a 	mov	r21,r2
 200c9fc:	2000a4c0 	call	2000a4c <__mulsi3>
 200ca00:	900b883a 	mov	r5,r18
 200ca04:	b809883a 	mov	r4,r23
 200ca08:	1039883a 	mov	fp,r2
 200ca0c:	2000a4c0 	call	2000a4c <__mulsi3>
 200ca10:	d9c00517 	ldw	r7,20(sp)
 200ca14:	b80b883a 	mov	r5,r23
 200ca18:	1025883a 	mov	r18,r2
 200ca1c:	3809883a 	mov	r4,r7
 200ca20:	2000a4c0 	call	2000a4c <__mulsi3>
 200ca24:	a808d43a 	srli	r4,r21,16
 200ca28:	1705883a 	add	r2,r2,fp
 200ca2c:	d8c00217 	ldw	r3,8(sp)
 200ca30:	2085883a 	add	r2,r4,r2
 200ca34:	1700022e 	bgeu	r2,fp,200ca40 <__divdf3+0x630>
 200ca38:	01000074 	movhi	r4,1
 200ca3c:	9125883a 	add	r18,r18,r4
 200ca40:	1008d43a 	srli	r4,r2,16
 200ca44:	1004943a 	slli	r2,r2,16
 200ca48:	ad7fffcc 	andi	r21,r21,65535
 200ca4c:	2489883a 	add	r4,r4,r18
 200ca50:	1545883a 	add	r2,r2,r21
 200ca54:	81003836 	bltu	r16,r4,200cb38 <__divdf3+0x728>
 200ca58:	81003626 	beq	r16,r4,200cb34 <__divdf3+0x724>
 200ca5c:	a5000054 	ori	r20,r20,1
 200ca60:	1880ffc4 	addi	r2,r3,1023
 200ca64:	00bf2e0e 	bge	zero,r2,200c720 <__alt_data_end+0xfe00c720>
 200ca68:	a10001cc 	andi	r4,r20,7
 200ca6c:	20000726 	beq	r4,zero,200ca8c <__divdf3+0x67c>
 200ca70:	a10003cc 	andi	r4,r20,15
 200ca74:	01400104 	movi	r5,4
 200ca78:	21400426 	beq	r4,r5,200ca8c <__divdf3+0x67c>
 200ca7c:	a149883a 	add	r4,r20,r5
 200ca80:	2529803a 	cmpltu	r20,r4,r20
 200ca84:	8d23883a 	add	r17,r17,r20
 200ca88:	2029883a 	mov	r20,r4
 200ca8c:	8900402c 	andhi	r4,r17,256
 200ca90:	20000426 	beq	r4,zero,200caa4 <__divdf3+0x694>
 200ca94:	18810004 	addi	r2,r3,1024
 200ca98:	00ffc034 	movhi	r3,65280
 200ca9c:	18ffffc4 	addi	r3,r3,-1
 200caa0:	88e2703a 	and	r17,r17,r3
 200caa4:	00c1ff84 	movi	r3,2046
 200caa8:	18beb416 	blt	r3,r2,200c57c <__alt_data_end+0xfe00c57c>
 200caac:	a028d0fa 	srli	r20,r20,3
 200cab0:	882a977a 	slli	r21,r17,29
 200cab4:	8820927a 	slli	r16,r17,9
 200cab8:	1081ffcc 	andi	r2,r2,2047
 200cabc:	ad2ab03a 	or	r21,r21,r20
 200cac0:	8020d33a 	srli	r16,r16,12
 200cac4:	9900004c 	andi	r4,r19,1
 200cac8:	003eb006 	br	200c58c <__alt_data_end+0xfe00c58c>
 200cacc:	8080022c 	andhi	r2,r16,8
 200cad0:	10001226 	beq	r2,zero,200cb1c <__divdf3+0x70c>
 200cad4:	8880022c 	andhi	r2,r17,8
 200cad8:	1000101e 	bne	r2,zero,200cb1c <__divdf3+0x70c>
 200cadc:	00800434 	movhi	r2,16
 200cae0:	8c000234 	orhi	r16,r17,8
 200cae4:	10bfffc4 	addi	r2,r2,-1
 200cae8:	b809883a 	mov	r4,r23
 200caec:	80a0703a 	and	r16,r16,r2
 200caf0:	a02b883a 	mov	r21,r20
 200caf4:	003f0806 	br	200c718 <__alt_data_end+0xfe00c718>
 200caf8:	008000c4 	movi	r2,3
 200cafc:	3880b126 	beq	r7,r2,200cdc4 <__divdf3+0x9b4>
 200cb00:	00800044 	movi	r2,1
 200cb04:	38805b1e 	bne	r7,r2,200cc74 <__divdf3+0x864>
 200cb08:	e009883a 	mov	r4,fp
 200cb0c:	0005883a 	mov	r2,zero
 200cb10:	0021883a 	mov	r16,zero
 200cb14:	002b883a 	mov	r21,zero
 200cb18:	003e9c06 	br	200c58c <__alt_data_end+0xfe00c58c>
 200cb1c:	00800434 	movhi	r2,16
 200cb20:	84000234 	orhi	r16,r16,8
 200cb24:	10bfffc4 	addi	r2,r2,-1
 200cb28:	b009883a 	mov	r4,r22
 200cb2c:	80a0703a 	and	r16,r16,r2
 200cb30:	003ef906 	br	200c718 <__alt_data_end+0xfe00c718>
 200cb34:	103fca26 	beq	r2,zero,200ca60 <__alt_data_end+0xfe00ca60>
 200cb38:	b421883a 	add	r16,r22,r16
 200cb3c:	a17fffc4 	addi	r5,r20,-1
 200cb40:	8580422e 	bgeu	r16,r22,200cc4c <__divdf3+0x83c>
 200cb44:	2829883a 	mov	r20,r5
 200cb48:	813fc41e 	bne	r16,r4,200ca5c <__alt_data_end+0xfe00ca5c>
 200cb4c:	d9800017 	ldw	r6,0(sp)
 200cb50:	30bfc21e 	bne	r6,r2,200ca5c <__alt_data_end+0xfe00ca5c>
 200cb54:	003fc206 	br	200ca60 <__alt_data_end+0xfe00ca60>
 200cb58:	143ff604 	addi	r16,r2,-40
 200cb5c:	8c20983a 	sll	r16,r17,r16
 200cb60:	002b883a 	mov	r21,zero
 200cb64:	003eb406 	br	200c638 <__alt_data_end+0xfe00c638>
 200cb68:	d9800215 	stw	r6,8(sp)
 200cb6c:	d9c00515 	stw	r7,20(sp)
 200cb70:	da000415 	stw	r8,16(sp)
 200cb74:	200e3a40 	call	200e3a4 <__clzsi2>
 200cb78:	10800804 	addi	r2,r2,32
 200cb7c:	da000417 	ldw	r8,16(sp)
 200cb80:	d9c00517 	ldw	r7,20(sp)
 200cb84:	d9800217 	ldw	r6,8(sp)
 200cb88:	003ea106 	br	200c610 <__alt_data_end+0xfe00c610>
 200cb8c:	147ff604 	addi	r17,r2,-40
 200cb90:	3462983a 	sll	r17,r6,r17
 200cb94:	0029883a 	mov	r20,zero
 200cb98:	003ec906 	br	200c6c0 <__alt_data_end+0xfe00c6c0>
 200cb9c:	3009883a 	mov	r4,r6
 200cba0:	d9400115 	stw	r5,4(sp)
 200cba4:	d9800215 	stw	r6,8(sp)
 200cba8:	da000415 	stw	r8,16(sp)
 200cbac:	da400315 	stw	r9,12(sp)
 200cbb0:	200e3a40 	call	200e3a4 <__clzsi2>
 200cbb4:	10800804 	addi	r2,r2,32
 200cbb8:	da400317 	ldw	r9,12(sp)
 200cbbc:	da000417 	ldw	r8,16(sp)
 200cbc0:	d9800217 	ldw	r6,8(sp)
 200cbc4:	d9400117 	ldw	r5,4(sp)
 200cbc8:	003eb306 	br	200c698 <__alt_data_end+0xfe00c698>
 200cbcc:	d9800017 	ldw	r6,0(sp)
 200cbd0:	a9ab883a 	add	r21,r21,r6
 200cbd4:	a98b803a 	cmpltu	r5,r21,r6
 200cbd8:	2d8b883a 	add	r5,r5,r22
 200cbdc:	2a11883a 	add	r8,r5,r8
 200cbe0:	897fffc4 	addi	r5,r17,-1
 200cbe4:	b2000c2e 	bgeu	r22,r8,200cc18 <__divdf3+0x808>
 200cbe8:	41003f36 	bltu	r8,r4,200cce8 <__divdf3+0x8d8>
 200cbec:	22006c26 	beq	r4,r8,200cda0 <__divdf3+0x990>
 200cbf0:	4109c83a 	sub	r4,r8,r4
 200cbf4:	2823883a 	mov	r17,r5
 200cbf8:	003f3b06 	br	200c8e8 <__alt_data_end+0xfe00c8e8>
 200cbfc:	ad3ed336 	bltu	r21,r20,200c74c <__alt_data_end+0xfe00c74c>
 200cc00:	a804d07a 	srli	r2,r21,1
 200cc04:	802e97fa 	slli	r23,r16,31
 200cc08:	a82a97fa 	slli	r21,r21,31
 200cc0c:	8020d07a 	srli	r16,r16,1
 200cc10:	b8aeb03a 	or	r23,r23,r2
 200cc14:	003ed006 	br	200c758 <__alt_data_end+0xfe00c758>
 200cc18:	b23ff51e 	bne	r22,r8,200cbf0 <__alt_data_end+0xfe00cbf0>
 200cc1c:	d9800017 	ldw	r6,0(sp)
 200cc20:	a9bff12e 	bgeu	r21,r6,200cbe8 <__alt_data_end+0xfe00cbe8>
 200cc24:	b109c83a 	sub	r4,r22,r4
 200cc28:	2823883a 	mov	r17,r5
 200cc2c:	003f2e06 	br	200c8e8 <__alt_data_end+0xfe00c8e8>
 200cc30:	2021883a 	mov	r16,r4
 200cc34:	003eff06 	br	200c834 <__alt_data_end+0xfe00c834>
 200cc38:	2023883a 	mov	r17,r4
 200cc3c:	003ee406 	br	200c7d0 <__alt_data_end+0xfe00c7d0>
 200cc40:	a8bfe236 	bltu	r21,r2,200cbcc <__alt_data_end+0xfe00cbcc>
 200cc44:	0009883a 	mov	r4,zero
 200cc48:	003f2706 	br	200c8e8 <__alt_data_end+0xfe00c8e8>
 200cc4c:	81002d36 	bltu	r16,r4,200cd04 <__divdf3+0x8f4>
 200cc50:	24005626 	beq	r4,r16,200cdac <__divdf3+0x99c>
 200cc54:	2829883a 	mov	r20,r5
 200cc58:	003f8006 	br	200ca5c <__alt_data_end+0xfe00ca5c>
 200cc5c:	053fffc4 	movi	r20,-1
 200cc60:	003f7f06 	br	200ca60 <__alt_data_end+0xfe00ca60>
 200cc64:	200f883a 	mov	r7,r4
 200cc68:	003f3c06 	br	200c95c <__alt_data_end+0xfe00c95c>
 200cc6c:	1011883a 	mov	r8,r2
 200cc70:	003f5506 	br	200c9c8 <__alt_data_end+0xfe00c9c8>
 200cc74:	e027883a 	mov	r19,fp
 200cc78:	003f7906 	br	200ca60 <__alt_data_end+0xfe00ca60>
 200cc7c:	010007c4 	movi	r4,31
 200cc80:	20c02816 	blt	r4,r3,200cd24 <__divdf3+0x914>
 200cc84:	00800804 	movi	r2,32
 200cc88:	10c5c83a 	sub	r2,r2,r3
 200cc8c:	888a983a 	sll	r5,r17,r2
 200cc90:	a0c8d83a 	srl	r4,r20,r3
 200cc94:	a084983a 	sll	r2,r20,r2
 200cc98:	88e2d83a 	srl	r17,r17,r3
 200cc9c:	2906b03a 	or	r3,r5,r4
 200cca0:	1004c03a 	cmpne	r2,r2,zero
 200cca4:	1886b03a 	or	r3,r3,r2
 200cca8:	188001cc 	andi	r2,r3,7
 200ccac:	10000726 	beq	r2,zero,200cccc <__divdf3+0x8bc>
 200ccb0:	188003cc 	andi	r2,r3,15
 200ccb4:	01000104 	movi	r4,4
 200ccb8:	11000426 	beq	r2,r4,200cccc <__divdf3+0x8bc>
 200ccbc:	1805883a 	mov	r2,r3
 200ccc0:	10c00104 	addi	r3,r2,4
 200ccc4:	1885803a 	cmpltu	r2,r3,r2
 200ccc8:	88a3883a 	add	r17,r17,r2
 200cccc:	8880202c 	andhi	r2,r17,128
 200ccd0:	10002926 	beq	r2,zero,200cd78 <__divdf3+0x968>
 200ccd4:	9900004c 	andi	r4,r19,1
 200ccd8:	00800044 	movi	r2,1
 200ccdc:	0021883a 	mov	r16,zero
 200cce0:	002b883a 	mov	r21,zero
 200cce4:	003e2906 	br	200c58c <__alt_data_end+0xfe00c58c>
 200cce8:	d9800017 	ldw	r6,0(sp)
 200ccec:	8c7fff84 	addi	r17,r17,-2
 200ccf0:	a9ab883a 	add	r21,r21,r6
 200ccf4:	a98b803a 	cmpltu	r5,r21,r6
 200ccf8:	2d8b883a 	add	r5,r5,r22
 200ccfc:	2a11883a 	add	r8,r5,r8
 200cd00:	003ef806 	br	200c8e4 <__alt_data_end+0xfe00c8e4>
 200cd04:	d9800017 	ldw	r6,0(sp)
 200cd08:	318f883a 	add	r7,r6,r6
 200cd0c:	398b803a 	cmpltu	r5,r7,r6
 200cd10:	2d8d883a 	add	r6,r5,r22
 200cd14:	81a1883a 	add	r16,r16,r6
 200cd18:	a17fff84 	addi	r5,r20,-2
 200cd1c:	d9c00015 	stw	r7,0(sp)
 200cd20:	003f8806 	br	200cb44 <__alt_data_end+0xfe00cb44>
 200cd24:	013ff844 	movi	r4,-31
 200cd28:	2085c83a 	sub	r2,r4,r2
 200cd2c:	8888d83a 	srl	r4,r17,r2
 200cd30:	00800804 	movi	r2,32
 200cd34:	18802126 	beq	r3,r2,200cdbc <__divdf3+0x9ac>
 200cd38:	04001004 	movi	r16,64
 200cd3c:	80c7c83a 	sub	r3,r16,r3
 200cd40:	88e0983a 	sll	r16,r17,r3
 200cd44:	8504b03a 	or	r2,r16,r20
 200cd48:	1004c03a 	cmpne	r2,r2,zero
 200cd4c:	2084b03a 	or	r2,r4,r2
 200cd50:	144001cc 	andi	r17,r2,7
 200cd54:	88000d1e 	bne	r17,zero,200cd8c <__divdf3+0x97c>
 200cd58:	0021883a 	mov	r16,zero
 200cd5c:	102ad0fa 	srli	r21,r2,3
 200cd60:	9900004c 	andi	r4,r19,1
 200cd64:	0005883a 	mov	r2,zero
 200cd68:	ac6ab03a 	or	r21,r21,r17
 200cd6c:	003e0706 	br	200c58c <__alt_data_end+0xfe00c58c>
 200cd70:	1007883a 	mov	r3,r2
 200cd74:	0023883a 	mov	r17,zero
 200cd78:	8820927a 	slli	r16,r17,9
 200cd7c:	1805883a 	mov	r2,r3
 200cd80:	8822977a 	slli	r17,r17,29
 200cd84:	8020d33a 	srli	r16,r16,12
 200cd88:	003ff406 	br	200cd5c <__alt_data_end+0xfe00cd5c>
 200cd8c:	10c003cc 	andi	r3,r2,15
 200cd90:	01000104 	movi	r4,4
 200cd94:	193ff626 	beq	r3,r4,200cd70 <__alt_data_end+0xfe00cd70>
 200cd98:	0023883a 	mov	r17,zero
 200cd9c:	003fc806 	br	200ccc0 <__alt_data_end+0xfe00ccc0>
 200cda0:	a8bfd136 	bltu	r21,r2,200cce8 <__alt_data_end+0xfe00cce8>
 200cda4:	2823883a 	mov	r17,r5
 200cda8:	003fa606 	br	200cc44 <__alt_data_end+0xfe00cc44>
 200cdac:	d9800017 	ldw	r6,0(sp)
 200cdb0:	30bfd436 	bltu	r6,r2,200cd04 <__alt_data_end+0xfe00cd04>
 200cdb4:	2829883a 	mov	r20,r5
 200cdb8:	003f6406 	br	200cb4c <__alt_data_end+0xfe00cb4c>
 200cdbc:	0021883a 	mov	r16,zero
 200cdc0:	003fe006 	br	200cd44 <__alt_data_end+0xfe00cd44>
 200cdc4:	00800434 	movhi	r2,16
 200cdc8:	8c000234 	orhi	r16,r17,8
 200cdcc:	10bfffc4 	addi	r2,r2,-1
 200cdd0:	e009883a 	mov	r4,fp
 200cdd4:	80a0703a 	and	r16,r16,r2
 200cdd8:	a02b883a 	mov	r21,r20
 200cddc:	003e4e06 	br	200c718 <__alt_data_end+0xfe00c718>

0200cde0 <__eqdf2>:
 200cde0:	2804d53a 	srli	r2,r5,20
 200cde4:	3806d53a 	srli	r3,r7,20
 200cde8:	02000434 	movhi	r8,16
 200cdec:	423fffc4 	addi	r8,r8,-1
 200cdf0:	1081ffcc 	andi	r2,r2,2047
 200cdf4:	0281ffc4 	movi	r10,2047
 200cdf8:	2a12703a 	and	r9,r5,r8
 200cdfc:	18c1ffcc 	andi	r3,r3,2047
 200ce00:	3a10703a 	and	r8,r7,r8
 200ce04:	280ad7fa 	srli	r5,r5,31
 200ce08:	380ed7fa 	srli	r7,r7,31
 200ce0c:	12801026 	beq	r2,r10,200ce50 <__eqdf2+0x70>
 200ce10:	0281ffc4 	movi	r10,2047
 200ce14:	1a800a26 	beq	r3,r10,200ce40 <__eqdf2+0x60>
 200ce18:	10c00226 	beq	r2,r3,200ce24 <__eqdf2+0x44>
 200ce1c:	00800044 	movi	r2,1
 200ce20:	f800283a 	ret
 200ce24:	4a3ffd1e 	bne	r9,r8,200ce1c <__alt_data_end+0xfe00ce1c>
 200ce28:	21bffc1e 	bne	r4,r6,200ce1c <__alt_data_end+0xfe00ce1c>
 200ce2c:	29c00c26 	beq	r5,r7,200ce60 <__eqdf2+0x80>
 200ce30:	103ffa1e 	bne	r2,zero,200ce1c <__alt_data_end+0xfe00ce1c>
 200ce34:	2244b03a 	or	r2,r4,r9
 200ce38:	1004c03a 	cmpne	r2,r2,zero
 200ce3c:	f800283a 	ret
 200ce40:	3214b03a 	or	r10,r6,r8
 200ce44:	503ff426 	beq	r10,zero,200ce18 <__alt_data_end+0xfe00ce18>
 200ce48:	00800044 	movi	r2,1
 200ce4c:	f800283a 	ret
 200ce50:	2254b03a 	or	r10,r4,r9
 200ce54:	503fee26 	beq	r10,zero,200ce10 <__alt_data_end+0xfe00ce10>
 200ce58:	00800044 	movi	r2,1
 200ce5c:	f800283a 	ret
 200ce60:	0005883a 	mov	r2,zero
 200ce64:	f800283a 	ret

0200ce68 <__gedf2>:
 200ce68:	2804d53a 	srli	r2,r5,20
 200ce6c:	3806d53a 	srli	r3,r7,20
 200ce70:	02000434 	movhi	r8,16
 200ce74:	423fffc4 	addi	r8,r8,-1
 200ce78:	1081ffcc 	andi	r2,r2,2047
 200ce7c:	0241ffc4 	movi	r9,2047
 200ce80:	2a14703a 	and	r10,r5,r8
 200ce84:	18c1ffcc 	andi	r3,r3,2047
 200ce88:	3a10703a 	and	r8,r7,r8
 200ce8c:	280ad7fa 	srli	r5,r5,31
 200ce90:	380ed7fa 	srli	r7,r7,31
 200ce94:	12401d26 	beq	r2,r9,200cf0c <__gedf2+0xa4>
 200ce98:	0241ffc4 	movi	r9,2047
 200ce9c:	1a401226 	beq	r3,r9,200cee8 <__gedf2+0x80>
 200cea0:	1000081e 	bne	r2,zero,200cec4 <__gedf2+0x5c>
 200cea4:	2296b03a 	or	r11,r4,r10
 200cea8:	5813003a 	cmpeq	r9,r11,zero
 200ceac:	1800091e 	bne	r3,zero,200ced4 <__gedf2+0x6c>
 200ceb0:	3218b03a 	or	r12,r6,r8
 200ceb4:	6000071e 	bne	r12,zero,200ced4 <__gedf2+0x6c>
 200ceb8:	0005883a 	mov	r2,zero
 200cebc:	5800101e 	bne	r11,zero,200cf00 <__gedf2+0x98>
 200cec0:	f800283a 	ret
 200cec4:	18000c1e 	bne	r3,zero,200cef8 <__gedf2+0x90>
 200cec8:	3212b03a 	or	r9,r6,r8
 200cecc:	48000c26 	beq	r9,zero,200cf00 <__gedf2+0x98>
 200ced0:	0013883a 	mov	r9,zero
 200ced4:	39c03fcc 	andi	r7,r7,255
 200ced8:	48000826 	beq	r9,zero,200cefc <__gedf2+0x94>
 200cedc:	38000926 	beq	r7,zero,200cf04 <__gedf2+0x9c>
 200cee0:	00800044 	movi	r2,1
 200cee4:	f800283a 	ret
 200cee8:	3212b03a 	or	r9,r6,r8
 200ceec:	483fec26 	beq	r9,zero,200cea0 <__alt_data_end+0xfe00cea0>
 200cef0:	00bfff84 	movi	r2,-2
 200cef4:	f800283a 	ret
 200cef8:	39c03fcc 	andi	r7,r7,255
 200cefc:	29c00626 	beq	r5,r7,200cf18 <__gedf2+0xb0>
 200cf00:	283ff726 	beq	r5,zero,200cee0 <__alt_data_end+0xfe00cee0>
 200cf04:	00bfffc4 	movi	r2,-1
 200cf08:	f800283a 	ret
 200cf0c:	2292b03a 	or	r9,r4,r10
 200cf10:	483fe126 	beq	r9,zero,200ce98 <__alt_data_end+0xfe00ce98>
 200cf14:	003ff606 	br	200cef0 <__alt_data_end+0xfe00cef0>
 200cf18:	18bff916 	blt	r3,r2,200cf00 <__alt_data_end+0xfe00cf00>
 200cf1c:	10c00316 	blt	r2,r3,200cf2c <__gedf2+0xc4>
 200cf20:	42bff736 	bltu	r8,r10,200cf00 <__alt_data_end+0xfe00cf00>
 200cf24:	52000326 	beq	r10,r8,200cf34 <__gedf2+0xcc>
 200cf28:	5200042e 	bgeu	r10,r8,200cf3c <__gedf2+0xd4>
 200cf2c:	283fec1e 	bne	r5,zero,200cee0 <__alt_data_end+0xfe00cee0>
 200cf30:	003ff406 	br	200cf04 <__alt_data_end+0xfe00cf04>
 200cf34:	313ff236 	bltu	r6,r4,200cf00 <__alt_data_end+0xfe00cf00>
 200cf38:	21bffc36 	bltu	r4,r6,200cf2c <__alt_data_end+0xfe00cf2c>
 200cf3c:	0005883a 	mov	r2,zero
 200cf40:	f800283a 	ret

0200cf44 <__ledf2>:
 200cf44:	2804d53a 	srli	r2,r5,20
 200cf48:	3810d53a 	srli	r8,r7,20
 200cf4c:	00c00434 	movhi	r3,16
 200cf50:	18ffffc4 	addi	r3,r3,-1
 200cf54:	1081ffcc 	andi	r2,r2,2047
 200cf58:	0241ffc4 	movi	r9,2047
 200cf5c:	28d4703a 	and	r10,r5,r3
 200cf60:	4201ffcc 	andi	r8,r8,2047
 200cf64:	38c6703a 	and	r3,r7,r3
 200cf68:	280ad7fa 	srli	r5,r5,31
 200cf6c:	380ed7fa 	srli	r7,r7,31
 200cf70:	12401f26 	beq	r2,r9,200cff0 <__ledf2+0xac>
 200cf74:	0241ffc4 	movi	r9,2047
 200cf78:	42401426 	beq	r8,r9,200cfcc <__ledf2+0x88>
 200cf7c:	1000091e 	bne	r2,zero,200cfa4 <__ledf2+0x60>
 200cf80:	2296b03a 	or	r11,r4,r10
 200cf84:	5813003a 	cmpeq	r9,r11,zero
 200cf88:	29403fcc 	andi	r5,r5,255
 200cf8c:	40000a1e 	bne	r8,zero,200cfb8 <__ledf2+0x74>
 200cf90:	30d8b03a 	or	r12,r6,r3
 200cf94:	6000081e 	bne	r12,zero,200cfb8 <__ledf2+0x74>
 200cf98:	0005883a 	mov	r2,zero
 200cf9c:	5800111e 	bne	r11,zero,200cfe4 <__ledf2+0xa0>
 200cfa0:	f800283a 	ret
 200cfa4:	29403fcc 	andi	r5,r5,255
 200cfa8:	40000c1e 	bne	r8,zero,200cfdc <__ledf2+0x98>
 200cfac:	30d2b03a 	or	r9,r6,r3
 200cfb0:	48000c26 	beq	r9,zero,200cfe4 <__ledf2+0xa0>
 200cfb4:	0013883a 	mov	r9,zero
 200cfb8:	39c03fcc 	andi	r7,r7,255
 200cfbc:	48000826 	beq	r9,zero,200cfe0 <__ledf2+0x9c>
 200cfc0:	38001126 	beq	r7,zero,200d008 <__ledf2+0xc4>
 200cfc4:	00800044 	movi	r2,1
 200cfc8:	f800283a 	ret
 200cfcc:	30d2b03a 	or	r9,r6,r3
 200cfd0:	483fea26 	beq	r9,zero,200cf7c <__alt_data_end+0xfe00cf7c>
 200cfd4:	00800084 	movi	r2,2
 200cfd8:	f800283a 	ret
 200cfdc:	39c03fcc 	andi	r7,r7,255
 200cfe0:	39400726 	beq	r7,r5,200d000 <__ledf2+0xbc>
 200cfe4:	2800081e 	bne	r5,zero,200d008 <__ledf2+0xc4>
 200cfe8:	00800044 	movi	r2,1
 200cfec:	f800283a 	ret
 200cff0:	2292b03a 	or	r9,r4,r10
 200cff4:	483fdf26 	beq	r9,zero,200cf74 <__alt_data_end+0xfe00cf74>
 200cff8:	00800084 	movi	r2,2
 200cffc:	f800283a 	ret
 200d000:	4080030e 	bge	r8,r2,200d010 <__ledf2+0xcc>
 200d004:	383fef26 	beq	r7,zero,200cfc4 <__alt_data_end+0xfe00cfc4>
 200d008:	00bfffc4 	movi	r2,-1
 200d00c:	f800283a 	ret
 200d010:	123feb16 	blt	r2,r8,200cfc0 <__alt_data_end+0xfe00cfc0>
 200d014:	1abff336 	bltu	r3,r10,200cfe4 <__alt_data_end+0xfe00cfe4>
 200d018:	50c00326 	beq	r10,r3,200d028 <__ledf2+0xe4>
 200d01c:	50c0042e 	bgeu	r10,r3,200d030 <__ledf2+0xec>
 200d020:	283fe81e 	bne	r5,zero,200cfc4 <__alt_data_end+0xfe00cfc4>
 200d024:	003ff806 	br	200d008 <__alt_data_end+0xfe00d008>
 200d028:	313fee36 	bltu	r6,r4,200cfe4 <__alt_data_end+0xfe00cfe4>
 200d02c:	21bffc36 	bltu	r4,r6,200d020 <__alt_data_end+0xfe00d020>
 200d030:	0005883a 	mov	r2,zero
 200d034:	f800283a 	ret

0200d038 <__muldf3>:
 200d038:	deffee04 	addi	sp,sp,-72
 200d03c:	dd000c15 	stw	r20,48(sp)
 200d040:	2828d53a 	srli	r20,r5,20
 200d044:	ddc00f15 	stw	r23,60(sp)
 200d048:	282ed7fa 	srli	r23,r5,31
 200d04c:	dc000815 	stw	r16,32(sp)
 200d050:	04000434 	movhi	r16,16
 200d054:	dcc00b15 	stw	r19,44(sp)
 200d058:	843fffc4 	addi	r16,r16,-1
 200d05c:	dfc01115 	stw	ra,68(sp)
 200d060:	df001015 	stw	fp,64(sp)
 200d064:	dd800e15 	stw	r22,56(sp)
 200d068:	dd400d15 	stw	r21,52(sp)
 200d06c:	dc800a15 	stw	r18,40(sp)
 200d070:	dc400915 	stw	r17,36(sp)
 200d074:	a501ffcc 	andi	r20,r20,2047
 200d078:	2c20703a 	and	r16,r5,r16
 200d07c:	b827883a 	mov	r19,r23
 200d080:	ba403fcc 	andi	r9,r23,255
 200d084:	a0006026 	beq	r20,zero,200d208 <__muldf3+0x1d0>
 200d088:	0081ffc4 	movi	r2,2047
 200d08c:	202d883a 	mov	r22,r4
 200d090:	a0803626 	beq	r20,r2,200d16c <__muldf3+0x134>
 200d094:	84000434 	orhi	r16,r16,16
 200d098:	200ad77a 	srli	r5,r4,29
 200d09c:	800490fa 	slli	r2,r16,3
 200d0a0:	202c90fa 	slli	r22,r4,3
 200d0a4:	a53f0044 	addi	r20,r20,-1023
 200d0a8:	28a0b03a 	or	r16,r5,r2
 200d0ac:	002b883a 	mov	r21,zero
 200d0b0:	000b883a 	mov	r5,zero
 200d0b4:	3804d53a 	srli	r2,r7,20
 200d0b8:	3838d7fa 	srli	fp,r7,31
 200d0bc:	04400434 	movhi	r17,16
 200d0c0:	8c7fffc4 	addi	r17,r17,-1
 200d0c4:	1081ffcc 	andi	r2,r2,2047
 200d0c8:	3025883a 	mov	r18,r6
 200d0cc:	3c62703a 	and	r17,r7,r17
 200d0d0:	e2803fcc 	andi	r10,fp,255
 200d0d4:	10006d26 	beq	r2,zero,200d28c <__muldf3+0x254>
 200d0d8:	00c1ffc4 	movi	r3,2047
 200d0dc:	10c06526 	beq	r2,r3,200d274 <__muldf3+0x23c>
 200d0e0:	8c400434 	orhi	r17,r17,16
 200d0e4:	300ed77a 	srli	r7,r6,29
 200d0e8:	880690fa 	slli	r3,r17,3
 200d0ec:	302490fa 	slli	r18,r6,3
 200d0f0:	10bf0044 	addi	r2,r2,-1023
 200d0f4:	38e2b03a 	or	r17,r7,r3
 200d0f8:	000f883a 	mov	r7,zero
 200d0fc:	a087883a 	add	r3,r20,r2
 200d100:	010003c4 	movi	r4,15
 200d104:	3d44b03a 	or	r2,r7,r21
 200d108:	e5ccf03a 	xor	r6,fp,r23
 200d10c:	1a000044 	addi	r8,r3,1
 200d110:	20809b36 	bltu	r4,r2,200d380 <__muldf3+0x348>
 200d114:	100490ba 	slli	r2,r2,2
 200d118:	01008074 	movhi	r4,513
 200d11c:	21344b04 	addi	r4,r4,-11988
 200d120:	1105883a 	add	r2,r2,r4
 200d124:	10800017 	ldw	r2,0(r2)
 200d128:	1000683a 	jmp	r2
 200d12c:	0200d380 	call	200d38 <__alt_mem_sdram-0x1dff2c8>
 200d130:	0200d18c 	andi	r8,zero,838
 200d134:	0200d18c 	andi	r8,zero,838
 200d138:	0200d188 	cmpgei	r8,zero,838
 200d13c:	0200d35c 	xori	r8,zero,845
 200d140:	0200d35c 	xori	r8,zero,845
 200d144:	0200d344 	movi	r8,845
 200d148:	0200d188 	cmpgei	r8,zero,838
 200d14c:	0200d35c 	xori	r8,zero,845
 200d150:	0200d344 	movi	r8,845
 200d154:	0200d35c 	xori	r8,zero,845
 200d158:	0200d188 	cmpgei	r8,zero,838
 200d15c:	0200d36c 	andhi	r8,zero,845
 200d160:	0200d36c 	andhi	r8,zero,845
 200d164:	0200d36c 	andhi	r8,zero,845
 200d168:	0200d6cc 	andi	r8,zero,859
 200d16c:	2404b03a 	or	r2,r4,r16
 200d170:	1000711e 	bne	r2,zero,200d338 <__muldf3+0x300>
 200d174:	05400204 	movi	r21,8
 200d178:	0021883a 	mov	r16,zero
 200d17c:	002d883a 	mov	r22,zero
 200d180:	01400084 	movi	r5,2
 200d184:	003fcb06 	br	200d0b4 <__alt_data_end+0xfe00d0b4>
 200d188:	500d883a 	mov	r6,r10
 200d18c:	00800084 	movi	r2,2
 200d190:	38805926 	beq	r7,r2,200d2f8 <__muldf3+0x2c0>
 200d194:	008000c4 	movi	r2,3
 200d198:	3881bb26 	beq	r7,r2,200d888 <__muldf3+0x850>
 200d19c:	00800044 	movi	r2,1
 200d1a0:	3881961e 	bne	r7,r2,200d7fc <__muldf3+0x7c4>
 200d1a4:	3027883a 	mov	r19,r6
 200d1a8:	0005883a 	mov	r2,zero
 200d1ac:	0021883a 	mov	r16,zero
 200d1b0:	002d883a 	mov	r22,zero
 200d1b4:	1004953a 	slli	r2,r2,20
 200d1b8:	98c03fcc 	andi	r3,r19,255
 200d1bc:	04400434 	movhi	r17,16
 200d1c0:	8c7fffc4 	addi	r17,r17,-1
 200d1c4:	180697fa 	slli	r3,r3,31
 200d1c8:	8460703a 	and	r16,r16,r17
 200d1cc:	80a0b03a 	or	r16,r16,r2
 200d1d0:	80c6b03a 	or	r3,r16,r3
 200d1d4:	b005883a 	mov	r2,r22
 200d1d8:	dfc01117 	ldw	ra,68(sp)
 200d1dc:	df001017 	ldw	fp,64(sp)
 200d1e0:	ddc00f17 	ldw	r23,60(sp)
 200d1e4:	dd800e17 	ldw	r22,56(sp)
 200d1e8:	dd400d17 	ldw	r21,52(sp)
 200d1ec:	dd000c17 	ldw	r20,48(sp)
 200d1f0:	dcc00b17 	ldw	r19,44(sp)
 200d1f4:	dc800a17 	ldw	r18,40(sp)
 200d1f8:	dc400917 	ldw	r17,36(sp)
 200d1fc:	dc000817 	ldw	r16,32(sp)
 200d200:	dec01204 	addi	sp,sp,72
 200d204:	f800283a 	ret
 200d208:	2404b03a 	or	r2,r4,r16
 200d20c:	202b883a 	mov	r21,r4
 200d210:	10004426 	beq	r2,zero,200d324 <__muldf3+0x2ec>
 200d214:	80015126 	beq	r16,zero,200d75c <__muldf3+0x724>
 200d218:	8009883a 	mov	r4,r16
 200d21c:	d9800715 	stw	r6,28(sp)
 200d220:	d9c00215 	stw	r7,8(sp)
 200d224:	da400415 	stw	r9,16(sp)
 200d228:	200e3a40 	call	200e3a4 <__clzsi2>
 200d22c:	d9800717 	ldw	r6,28(sp)
 200d230:	d9c00217 	ldw	r7,8(sp)
 200d234:	da400417 	ldw	r9,16(sp)
 200d238:	113ffd44 	addi	r4,r2,-11
 200d23c:	00c00704 	movi	r3,28
 200d240:	19014216 	blt	r3,r4,200d74c <__muldf3+0x714>
 200d244:	00c00744 	movi	r3,29
 200d248:	15bffe04 	addi	r22,r2,-8
 200d24c:	1907c83a 	sub	r3,r3,r4
 200d250:	85a0983a 	sll	r16,r16,r22
 200d254:	a8c6d83a 	srl	r3,r21,r3
 200d258:	adac983a 	sll	r22,r21,r22
 200d25c:	1c20b03a 	or	r16,r3,r16
 200d260:	1080fcc4 	addi	r2,r2,1011
 200d264:	00a9c83a 	sub	r20,zero,r2
 200d268:	002b883a 	mov	r21,zero
 200d26c:	000b883a 	mov	r5,zero
 200d270:	003f9006 	br	200d0b4 <__alt_data_end+0xfe00d0b4>
 200d274:	3446b03a 	or	r3,r6,r17
 200d278:	1800281e 	bne	r3,zero,200d31c <__muldf3+0x2e4>
 200d27c:	0023883a 	mov	r17,zero
 200d280:	0025883a 	mov	r18,zero
 200d284:	01c00084 	movi	r7,2
 200d288:	003f9c06 	br	200d0fc <__alt_data_end+0xfe00d0fc>
 200d28c:	3446b03a 	or	r3,r6,r17
 200d290:	18001e26 	beq	r3,zero,200d30c <__muldf3+0x2d4>
 200d294:	88012126 	beq	r17,zero,200d71c <__muldf3+0x6e4>
 200d298:	8809883a 	mov	r4,r17
 200d29c:	d9400215 	stw	r5,8(sp)
 200d2a0:	d9800715 	stw	r6,28(sp)
 200d2a4:	da400415 	stw	r9,16(sp)
 200d2a8:	da800315 	stw	r10,12(sp)
 200d2ac:	200e3a40 	call	200e3a4 <__clzsi2>
 200d2b0:	d9400217 	ldw	r5,8(sp)
 200d2b4:	d9800717 	ldw	r6,28(sp)
 200d2b8:	da400417 	ldw	r9,16(sp)
 200d2bc:	da800317 	ldw	r10,12(sp)
 200d2c0:	113ffd44 	addi	r4,r2,-11
 200d2c4:	00c00704 	movi	r3,28
 200d2c8:	19011016 	blt	r3,r4,200d70c <__muldf3+0x6d4>
 200d2cc:	00c00744 	movi	r3,29
 200d2d0:	14bffe04 	addi	r18,r2,-8
 200d2d4:	1907c83a 	sub	r3,r3,r4
 200d2d8:	8ca2983a 	sll	r17,r17,r18
 200d2dc:	30c6d83a 	srl	r3,r6,r3
 200d2e0:	34a4983a 	sll	r18,r6,r18
 200d2e4:	1c62b03a 	or	r17,r3,r17
 200d2e8:	1080fcc4 	addi	r2,r2,1011
 200d2ec:	0085c83a 	sub	r2,zero,r2
 200d2f0:	000f883a 	mov	r7,zero
 200d2f4:	003f8106 	br	200d0fc <__alt_data_end+0xfe00d0fc>
 200d2f8:	3027883a 	mov	r19,r6
 200d2fc:	0081ffc4 	movi	r2,2047
 200d300:	0021883a 	mov	r16,zero
 200d304:	002d883a 	mov	r22,zero
 200d308:	003faa06 	br	200d1b4 <__alt_data_end+0xfe00d1b4>
 200d30c:	0023883a 	mov	r17,zero
 200d310:	0025883a 	mov	r18,zero
 200d314:	01c00044 	movi	r7,1
 200d318:	003f7806 	br	200d0fc <__alt_data_end+0xfe00d0fc>
 200d31c:	01c000c4 	movi	r7,3
 200d320:	003f7606 	br	200d0fc <__alt_data_end+0xfe00d0fc>
 200d324:	05400104 	movi	r21,4
 200d328:	0021883a 	mov	r16,zero
 200d32c:	002d883a 	mov	r22,zero
 200d330:	01400044 	movi	r5,1
 200d334:	003f5f06 	br	200d0b4 <__alt_data_end+0xfe00d0b4>
 200d338:	05400304 	movi	r21,12
 200d33c:	014000c4 	movi	r5,3
 200d340:	003f5c06 	br	200d0b4 <__alt_data_end+0xfe00d0b4>
 200d344:	04000434 	movhi	r16,16
 200d348:	0027883a 	mov	r19,zero
 200d34c:	843fffc4 	addi	r16,r16,-1
 200d350:	05bfffc4 	movi	r22,-1
 200d354:	0081ffc4 	movi	r2,2047
 200d358:	003f9606 	br	200d1b4 <__alt_data_end+0xfe00d1b4>
 200d35c:	8023883a 	mov	r17,r16
 200d360:	b025883a 	mov	r18,r22
 200d364:	280f883a 	mov	r7,r5
 200d368:	003f8806 	br	200d18c <__alt_data_end+0xfe00d18c>
 200d36c:	8023883a 	mov	r17,r16
 200d370:	b025883a 	mov	r18,r22
 200d374:	480d883a 	mov	r6,r9
 200d378:	280f883a 	mov	r7,r5
 200d37c:	003f8306 	br	200d18c <__alt_data_end+0xfe00d18c>
 200d380:	b026d43a 	srli	r19,r22,16
 200d384:	902ed43a 	srli	r23,r18,16
 200d388:	b5bfffcc 	andi	r22,r22,65535
 200d38c:	94bfffcc 	andi	r18,r18,65535
 200d390:	b00b883a 	mov	r5,r22
 200d394:	9009883a 	mov	r4,r18
 200d398:	d8c00515 	stw	r3,20(sp)
 200d39c:	d9800715 	stw	r6,28(sp)
 200d3a0:	da000615 	stw	r8,24(sp)
 200d3a4:	2000a4c0 	call	2000a4c <__mulsi3>
 200d3a8:	980b883a 	mov	r5,r19
 200d3ac:	9009883a 	mov	r4,r18
 200d3b0:	1029883a 	mov	r20,r2
 200d3b4:	2000a4c0 	call	2000a4c <__mulsi3>
 200d3b8:	b80b883a 	mov	r5,r23
 200d3bc:	9809883a 	mov	r4,r19
 200d3c0:	102b883a 	mov	r21,r2
 200d3c4:	2000a4c0 	call	2000a4c <__mulsi3>
 200d3c8:	b809883a 	mov	r4,r23
 200d3cc:	b00b883a 	mov	r5,r22
 200d3d0:	1039883a 	mov	fp,r2
 200d3d4:	2000a4c0 	call	2000a4c <__mulsi3>
 200d3d8:	a008d43a 	srli	r4,r20,16
 200d3dc:	1545883a 	add	r2,r2,r21
 200d3e0:	d8c00517 	ldw	r3,20(sp)
 200d3e4:	2085883a 	add	r2,r4,r2
 200d3e8:	d9800717 	ldw	r6,28(sp)
 200d3ec:	da000617 	ldw	r8,24(sp)
 200d3f0:	1540022e 	bgeu	r2,r21,200d3fc <__muldf3+0x3c4>
 200d3f4:	01000074 	movhi	r4,1
 200d3f8:	e139883a 	add	fp,fp,r4
 200d3fc:	100e943a 	slli	r7,r2,16
 200d400:	1004d43a 	srli	r2,r2,16
 200d404:	882ad43a 	srli	r21,r17,16
 200d408:	a53fffcc 	andi	r20,r20,65535
 200d40c:	8c7fffcc 	andi	r17,r17,65535
 200d410:	3d29883a 	add	r20,r7,r20
 200d414:	b00b883a 	mov	r5,r22
 200d418:	8809883a 	mov	r4,r17
 200d41c:	d8c00515 	stw	r3,20(sp)
 200d420:	d9800715 	stw	r6,28(sp)
 200d424:	da000615 	stw	r8,24(sp)
 200d428:	dd000115 	stw	r20,4(sp)
 200d42c:	d8800015 	stw	r2,0(sp)
 200d430:	2000a4c0 	call	2000a4c <__mulsi3>
 200d434:	980b883a 	mov	r5,r19
 200d438:	8809883a 	mov	r4,r17
 200d43c:	d8800215 	stw	r2,8(sp)
 200d440:	2000a4c0 	call	2000a4c <__mulsi3>
 200d444:	9809883a 	mov	r4,r19
 200d448:	a80b883a 	mov	r5,r21
 200d44c:	1029883a 	mov	r20,r2
 200d450:	2000a4c0 	call	2000a4c <__mulsi3>
 200d454:	b00b883a 	mov	r5,r22
 200d458:	a809883a 	mov	r4,r21
 200d45c:	d8800415 	stw	r2,16(sp)
 200d460:	2000a4c0 	call	2000a4c <__mulsi3>
 200d464:	d9c00217 	ldw	r7,8(sp)
 200d468:	1505883a 	add	r2,r2,r20
 200d46c:	d8c00517 	ldw	r3,20(sp)
 200d470:	3826d43a 	srli	r19,r7,16
 200d474:	d9800717 	ldw	r6,28(sp)
 200d478:	da000617 	ldw	r8,24(sp)
 200d47c:	9885883a 	add	r2,r19,r2
 200d480:	da400417 	ldw	r9,16(sp)
 200d484:	1500022e 	bgeu	r2,r20,200d490 <__muldf3+0x458>
 200d488:	01000074 	movhi	r4,1
 200d48c:	4913883a 	add	r9,r9,r4
 200d490:	1028d43a 	srli	r20,r2,16
 200d494:	1004943a 	slli	r2,r2,16
 200d498:	802cd43a 	srli	r22,r16,16
 200d49c:	843fffcc 	andi	r16,r16,65535
 200d4a0:	3cffffcc 	andi	r19,r7,65535
 200d4a4:	9009883a 	mov	r4,r18
 200d4a8:	800b883a 	mov	r5,r16
 200d4ac:	a269883a 	add	r20,r20,r9
 200d4b0:	d8c00515 	stw	r3,20(sp)
 200d4b4:	d9800715 	stw	r6,28(sp)
 200d4b8:	da000615 	stw	r8,24(sp)
 200d4bc:	14e7883a 	add	r19,r2,r19
 200d4c0:	2000a4c0 	call	2000a4c <__mulsi3>
 200d4c4:	9009883a 	mov	r4,r18
 200d4c8:	b00b883a 	mov	r5,r22
 200d4cc:	d8800315 	stw	r2,12(sp)
 200d4d0:	2000a4c0 	call	2000a4c <__mulsi3>
 200d4d4:	b809883a 	mov	r4,r23
 200d4d8:	b00b883a 	mov	r5,r22
 200d4dc:	d8800215 	stw	r2,8(sp)
 200d4e0:	2000a4c0 	call	2000a4c <__mulsi3>
 200d4e4:	b80b883a 	mov	r5,r23
 200d4e8:	8009883a 	mov	r4,r16
 200d4ec:	d8800415 	stw	r2,16(sp)
 200d4f0:	2000a4c0 	call	2000a4c <__mulsi3>
 200d4f4:	da800317 	ldw	r10,12(sp)
 200d4f8:	d9c00217 	ldw	r7,8(sp)
 200d4fc:	d9000017 	ldw	r4,0(sp)
 200d500:	502ed43a 	srli	r23,r10,16
 200d504:	11c5883a 	add	r2,r2,r7
 200d508:	24e5883a 	add	r18,r4,r19
 200d50c:	b885883a 	add	r2,r23,r2
 200d510:	d8c00517 	ldw	r3,20(sp)
 200d514:	d9800717 	ldw	r6,28(sp)
 200d518:	da000617 	ldw	r8,24(sp)
 200d51c:	da400417 	ldw	r9,16(sp)
 200d520:	11c0022e 	bgeu	r2,r7,200d52c <__muldf3+0x4f4>
 200d524:	01000074 	movhi	r4,1
 200d528:	4913883a 	add	r9,r9,r4
 200d52c:	100ed43a 	srli	r7,r2,16
 200d530:	1004943a 	slli	r2,r2,16
 200d534:	55ffffcc 	andi	r23,r10,65535
 200d538:	3a53883a 	add	r9,r7,r9
 200d53c:	8809883a 	mov	r4,r17
 200d540:	800b883a 	mov	r5,r16
 200d544:	d8c00515 	stw	r3,20(sp)
 200d548:	d9800715 	stw	r6,28(sp)
 200d54c:	da000615 	stw	r8,24(sp)
 200d550:	da400415 	stw	r9,16(sp)
 200d554:	15ef883a 	add	r23,r2,r23
 200d558:	2000a4c0 	call	2000a4c <__mulsi3>
 200d55c:	8809883a 	mov	r4,r17
 200d560:	b00b883a 	mov	r5,r22
 200d564:	d8800215 	stw	r2,8(sp)
 200d568:	2000a4c0 	call	2000a4c <__mulsi3>
 200d56c:	b00b883a 	mov	r5,r22
 200d570:	a809883a 	mov	r4,r21
 200d574:	d8800315 	stw	r2,12(sp)
 200d578:	2000a4c0 	call	2000a4c <__mulsi3>
 200d57c:	8009883a 	mov	r4,r16
 200d580:	a80b883a 	mov	r5,r21
 200d584:	1023883a 	mov	r17,r2
 200d588:	2000a4c0 	call	2000a4c <__mulsi3>
 200d58c:	d9c00217 	ldw	r7,8(sp)
 200d590:	da800317 	ldw	r10,12(sp)
 200d594:	d8c00517 	ldw	r3,20(sp)
 200d598:	3808d43a 	srli	r4,r7,16
 200d59c:	1285883a 	add	r2,r2,r10
 200d5a0:	d9800717 	ldw	r6,28(sp)
 200d5a4:	2085883a 	add	r2,r4,r2
 200d5a8:	da000617 	ldw	r8,24(sp)
 200d5ac:	da400417 	ldw	r9,16(sp)
 200d5b0:	1280022e 	bgeu	r2,r10,200d5bc <__muldf3+0x584>
 200d5b4:	01000074 	movhi	r4,1
 200d5b8:	8923883a 	add	r17,r17,r4
 200d5bc:	1008943a 	slli	r4,r2,16
 200d5c0:	39ffffcc 	andi	r7,r7,65535
 200d5c4:	e4b9883a 	add	fp,fp,r18
 200d5c8:	21cf883a 	add	r7,r4,r7
 200d5cc:	e4e7803a 	cmpltu	r19,fp,r19
 200d5d0:	3d0f883a 	add	r7,r7,r20
 200d5d4:	bf39883a 	add	fp,r23,fp
 200d5d8:	99c9883a 	add	r4,r19,r7
 200d5dc:	e5ef803a 	cmpltu	r23,fp,r23
 200d5e0:	490b883a 	add	r5,r9,r4
 200d5e4:	1004d43a 	srli	r2,r2,16
 200d5e8:	b965883a 	add	r18,r23,r5
 200d5ec:	24c9803a 	cmpltu	r4,r4,r19
 200d5f0:	3d29803a 	cmpltu	r20,r7,r20
 200d5f4:	a128b03a 	or	r20,r20,r4
 200d5f8:	95ef803a 	cmpltu	r23,r18,r23
 200d5fc:	2a53803a 	cmpltu	r9,r5,r9
 200d600:	a0a9883a 	add	r20,r20,r2
 200d604:	4deeb03a 	or	r23,r9,r23
 200d608:	a5ef883a 	add	r23,r20,r23
 200d60c:	bc63883a 	add	r17,r23,r17
 200d610:	e004927a 	slli	r2,fp,9
 200d614:	d9000117 	ldw	r4,4(sp)
 200d618:	882e927a 	slli	r23,r17,9
 200d61c:	9022d5fa 	srli	r17,r18,23
 200d620:	e038d5fa 	srli	fp,fp,23
 200d624:	1104b03a 	or	r2,r2,r4
 200d628:	9024927a 	slli	r18,r18,9
 200d62c:	1004c03a 	cmpne	r2,r2,zero
 200d630:	bc62b03a 	or	r17,r23,r17
 200d634:	1738b03a 	or	fp,r2,fp
 200d638:	8880402c 	andhi	r2,r17,256
 200d63c:	e4a4b03a 	or	r18,fp,r18
 200d640:	10000726 	beq	r2,zero,200d660 <__muldf3+0x628>
 200d644:	9006d07a 	srli	r3,r18,1
 200d648:	880497fa 	slli	r2,r17,31
 200d64c:	9480004c 	andi	r18,r18,1
 200d650:	8822d07a 	srli	r17,r17,1
 200d654:	1ca4b03a 	or	r18,r3,r18
 200d658:	14a4b03a 	or	r18,r2,r18
 200d65c:	4007883a 	mov	r3,r8
 200d660:	1880ffc4 	addi	r2,r3,1023
 200d664:	0080460e 	bge	zero,r2,200d780 <__muldf3+0x748>
 200d668:	910001cc 	andi	r4,r18,7
 200d66c:	20000726 	beq	r4,zero,200d68c <__muldf3+0x654>
 200d670:	910003cc 	andi	r4,r18,15
 200d674:	01400104 	movi	r5,4
 200d678:	21400426 	beq	r4,r5,200d68c <__muldf3+0x654>
 200d67c:	9149883a 	add	r4,r18,r5
 200d680:	24a5803a 	cmpltu	r18,r4,r18
 200d684:	8ca3883a 	add	r17,r17,r18
 200d688:	2025883a 	mov	r18,r4
 200d68c:	8900402c 	andhi	r4,r17,256
 200d690:	20000426 	beq	r4,zero,200d6a4 <__muldf3+0x66c>
 200d694:	18810004 	addi	r2,r3,1024
 200d698:	00ffc034 	movhi	r3,65280
 200d69c:	18ffffc4 	addi	r3,r3,-1
 200d6a0:	88e2703a 	and	r17,r17,r3
 200d6a4:	00c1ff84 	movi	r3,2046
 200d6a8:	18bf1316 	blt	r3,r2,200d2f8 <__alt_data_end+0xfe00d2f8>
 200d6ac:	882c977a 	slli	r22,r17,29
 200d6b0:	9024d0fa 	srli	r18,r18,3
 200d6b4:	8822927a 	slli	r17,r17,9
 200d6b8:	1081ffcc 	andi	r2,r2,2047
 200d6bc:	b4acb03a 	or	r22,r22,r18
 200d6c0:	8820d33a 	srli	r16,r17,12
 200d6c4:	3027883a 	mov	r19,r6
 200d6c8:	003eba06 	br	200d1b4 <__alt_data_end+0xfe00d1b4>
 200d6cc:	8080022c 	andhi	r2,r16,8
 200d6d0:	10000926 	beq	r2,zero,200d6f8 <__muldf3+0x6c0>
 200d6d4:	8880022c 	andhi	r2,r17,8
 200d6d8:	1000071e 	bne	r2,zero,200d6f8 <__muldf3+0x6c0>
 200d6dc:	00800434 	movhi	r2,16
 200d6e0:	8c000234 	orhi	r16,r17,8
 200d6e4:	10bfffc4 	addi	r2,r2,-1
 200d6e8:	e027883a 	mov	r19,fp
 200d6ec:	80a0703a 	and	r16,r16,r2
 200d6f0:	902d883a 	mov	r22,r18
 200d6f4:	003f1706 	br	200d354 <__alt_data_end+0xfe00d354>
 200d6f8:	00800434 	movhi	r2,16
 200d6fc:	84000234 	orhi	r16,r16,8
 200d700:	10bfffc4 	addi	r2,r2,-1
 200d704:	80a0703a 	and	r16,r16,r2
 200d708:	003f1206 	br	200d354 <__alt_data_end+0xfe00d354>
 200d70c:	147ff604 	addi	r17,r2,-40
 200d710:	3462983a 	sll	r17,r6,r17
 200d714:	0025883a 	mov	r18,zero
 200d718:	003ef306 	br	200d2e8 <__alt_data_end+0xfe00d2e8>
 200d71c:	3009883a 	mov	r4,r6
 200d720:	d9400215 	stw	r5,8(sp)
 200d724:	d9800715 	stw	r6,28(sp)
 200d728:	da400415 	stw	r9,16(sp)
 200d72c:	da800315 	stw	r10,12(sp)
 200d730:	200e3a40 	call	200e3a4 <__clzsi2>
 200d734:	10800804 	addi	r2,r2,32
 200d738:	da800317 	ldw	r10,12(sp)
 200d73c:	da400417 	ldw	r9,16(sp)
 200d740:	d9800717 	ldw	r6,28(sp)
 200d744:	d9400217 	ldw	r5,8(sp)
 200d748:	003edd06 	br	200d2c0 <__alt_data_end+0xfe00d2c0>
 200d74c:	143ff604 	addi	r16,r2,-40
 200d750:	ac20983a 	sll	r16,r21,r16
 200d754:	002d883a 	mov	r22,zero
 200d758:	003ec106 	br	200d260 <__alt_data_end+0xfe00d260>
 200d75c:	d9800715 	stw	r6,28(sp)
 200d760:	d9c00215 	stw	r7,8(sp)
 200d764:	da400415 	stw	r9,16(sp)
 200d768:	200e3a40 	call	200e3a4 <__clzsi2>
 200d76c:	10800804 	addi	r2,r2,32
 200d770:	da400417 	ldw	r9,16(sp)
 200d774:	d9c00217 	ldw	r7,8(sp)
 200d778:	d9800717 	ldw	r6,28(sp)
 200d77c:	003eae06 	br	200d238 <__alt_data_end+0xfe00d238>
 200d780:	00c00044 	movi	r3,1
 200d784:	1887c83a 	sub	r3,r3,r2
 200d788:	01000e04 	movi	r4,56
 200d78c:	20fe8516 	blt	r4,r3,200d1a4 <__alt_data_end+0xfe00d1a4>
 200d790:	010007c4 	movi	r4,31
 200d794:	20c01b16 	blt	r4,r3,200d804 <__muldf3+0x7cc>
 200d798:	00800804 	movi	r2,32
 200d79c:	10c5c83a 	sub	r2,r2,r3
 200d7a0:	888a983a 	sll	r5,r17,r2
 200d7a4:	90c8d83a 	srl	r4,r18,r3
 200d7a8:	9084983a 	sll	r2,r18,r2
 200d7ac:	88e2d83a 	srl	r17,r17,r3
 200d7b0:	2906b03a 	or	r3,r5,r4
 200d7b4:	1004c03a 	cmpne	r2,r2,zero
 200d7b8:	1886b03a 	or	r3,r3,r2
 200d7bc:	188001cc 	andi	r2,r3,7
 200d7c0:	10000726 	beq	r2,zero,200d7e0 <__muldf3+0x7a8>
 200d7c4:	188003cc 	andi	r2,r3,15
 200d7c8:	01000104 	movi	r4,4
 200d7cc:	11000426 	beq	r2,r4,200d7e0 <__muldf3+0x7a8>
 200d7d0:	1805883a 	mov	r2,r3
 200d7d4:	10c00104 	addi	r3,r2,4
 200d7d8:	1885803a 	cmpltu	r2,r3,r2
 200d7dc:	88a3883a 	add	r17,r17,r2
 200d7e0:	8880202c 	andhi	r2,r17,128
 200d7e4:	10001c26 	beq	r2,zero,200d858 <__muldf3+0x820>
 200d7e8:	3027883a 	mov	r19,r6
 200d7ec:	00800044 	movi	r2,1
 200d7f0:	0021883a 	mov	r16,zero
 200d7f4:	002d883a 	mov	r22,zero
 200d7f8:	003e6e06 	br	200d1b4 <__alt_data_end+0xfe00d1b4>
 200d7fc:	4007883a 	mov	r3,r8
 200d800:	003f9706 	br	200d660 <__alt_data_end+0xfe00d660>
 200d804:	017ff844 	movi	r5,-31
 200d808:	2885c83a 	sub	r2,r5,r2
 200d80c:	888ad83a 	srl	r5,r17,r2
 200d810:	00800804 	movi	r2,32
 200d814:	18801a26 	beq	r3,r2,200d880 <__muldf3+0x848>
 200d818:	01001004 	movi	r4,64
 200d81c:	20c7c83a 	sub	r3,r4,r3
 200d820:	88e2983a 	sll	r17,r17,r3
 200d824:	8ca4b03a 	or	r18,r17,r18
 200d828:	9004c03a 	cmpne	r2,r18,zero
 200d82c:	2884b03a 	or	r2,r5,r2
 200d830:	144001cc 	andi	r17,r2,7
 200d834:	88000d1e 	bne	r17,zero,200d86c <__muldf3+0x834>
 200d838:	0021883a 	mov	r16,zero
 200d83c:	102cd0fa 	srli	r22,r2,3
 200d840:	3027883a 	mov	r19,r6
 200d844:	0005883a 	mov	r2,zero
 200d848:	b46cb03a 	or	r22,r22,r17
 200d84c:	003e5906 	br	200d1b4 <__alt_data_end+0xfe00d1b4>
 200d850:	1007883a 	mov	r3,r2
 200d854:	0023883a 	mov	r17,zero
 200d858:	8820927a 	slli	r16,r17,9
 200d85c:	1805883a 	mov	r2,r3
 200d860:	8822977a 	slli	r17,r17,29
 200d864:	8020d33a 	srli	r16,r16,12
 200d868:	003ff406 	br	200d83c <__alt_data_end+0xfe00d83c>
 200d86c:	10c003cc 	andi	r3,r2,15
 200d870:	01000104 	movi	r4,4
 200d874:	193ff626 	beq	r3,r4,200d850 <__alt_data_end+0xfe00d850>
 200d878:	0023883a 	mov	r17,zero
 200d87c:	003fd506 	br	200d7d4 <__alt_data_end+0xfe00d7d4>
 200d880:	0023883a 	mov	r17,zero
 200d884:	003fe706 	br	200d824 <__alt_data_end+0xfe00d824>
 200d888:	00800434 	movhi	r2,16
 200d88c:	8c000234 	orhi	r16,r17,8
 200d890:	10bfffc4 	addi	r2,r2,-1
 200d894:	3027883a 	mov	r19,r6
 200d898:	80a0703a 	and	r16,r16,r2
 200d89c:	902d883a 	mov	r22,r18
 200d8a0:	003eac06 	br	200d354 <__alt_data_end+0xfe00d354>

0200d8a4 <__subdf3>:
 200d8a4:	02000434 	movhi	r8,16
 200d8a8:	423fffc4 	addi	r8,r8,-1
 200d8ac:	defffb04 	addi	sp,sp,-20
 200d8b0:	2a14703a 	and	r10,r5,r8
 200d8b4:	3812d53a 	srli	r9,r7,20
 200d8b8:	3a10703a 	and	r8,r7,r8
 200d8bc:	2006d77a 	srli	r3,r4,29
 200d8c0:	3004d77a 	srli	r2,r6,29
 200d8c4:	dc000015 	stw	r16,0(sp)
 200d8c8:	501490fa 	slli	r10,r10,3
 200d8cc:	2820d53a 	srli	r16,r5,20
 200d8d0:	401090fa 	slli	r8,r8,3
 200d8d4:	dc800215 	stw	r18,8(sp)
 200d8d8:	dc400115 	stw	r17,4(sp)
 200d8dc:	dfc00415 	stw	ra,16(sp)
 200d8e0:	202290fa 	slli	r17,r4,3
 200d8e4:	dcc00315 	stw	r19,12(sp)
 200d8e8:	4a41ffcc 	andi	r9,r9,2047
 200d8ec:	0101ffc4 	movi	r4,2047
 200d8f0:	2824d7fa 	srli	r18,r5,31
 200d8f4:	8401ffcc 	andi	r16,r16,2047
 200d8f8:	50c6b03a 	or	r3,r10,r3
 200d8fc:	380ed7fa 	srli	r7,r7,31
 200d900:	408ab03a 	or	r5,r8,r2
 200d904:	300c90fa 	slli	r6,r6,3
 200d908:	49009626 	beq	r9,r4,200db64 <__subdf3+0x2c0>
 200d90c:	39c0005c 	xori	r7,r7,1
 200d910:	8245c83a 	sub	r2,r16,r9
 200d914:	3c807426 	beq	r7,r18,200dae8 <__subdf3+0x244>
 200d918:	0080af0e 	bge	zero,r2,200dbd8 <__subdf3+0x334>
 200d91c:	48002a1e 	bne	r9,zero,200d9c8 <__subdf3+0x124>
 200d920:	2988b03a 	or	r4,r5,r6
 200d924:	20009a1e 	bne	r4,zero,200db90 <__subdf3+0x2ec>
 200d928:	888001cc 	andi	r2,r17,7
 200d92c:	10000726 	beq	r2,zero,200d94c <__subdf3+0xa8>
 200d930:	888003cc 	andi	r2,r17,15
 200d934:	01000104 	movi	r4,4
 200d938:	11000426 	beq	r2,r4,200d94c <__subdf3+0xa8>
 200d93c:	890b883a 	add	r5,r17,r4
 200d940:	2c63803a 	cmpltu	r17,r5,r17
 200d944:	1c47883a 	add	r3,r3,r17
 200d948:	2823883a 	mov	r17,r5
 200d94c:	1880202c 	andhi	r2,r3,128
 200d950:	10005926 	beq	r2,zero,200dab8 <__subdf3+0x214>
 200d954:	84000044 	addi	r16,r16,1
 200d958:	0081ffc4 	movi	r2,2047
 200d95c:	8080be26 	beq	r16,r2,200dc58 <__subdf3+0x3b4>
 200d960:	017fe034 	movhi	r5,65408
 200d964:	297fffc4 	addi	r5,r5,-1
 200d968:	1946703a 	and	r3,r3,r5
 200d96c:	1804977a 	slli	r2,r3,29
 200d970:	1806927a 	slli	r3,r3,9
 200d974:	8822d0fa 	srli	r17,r17,3
 200d978:	8401ffcc 	andi	r16,r16,2047
 200d97c:	180ad33a 	srli	r5,r3,12
 200d980:	9100004c 	andi	r4,r18,1
 200d984:	1444b03a 	or	r2,r2,r17
 200d988:	80c1ffcc 	andi	r3,r16,2047
 200d98c:	1820953a 	slli	r16,r3,20
 200d990:	20c03fcc 	andi	r3,r4,255
 200d994:	180897fa 	slli	r4,r3,31
 200d998:	00c00434 	movhi	r3,16
 200d99c:	18ffffc4 	addi	r3,r3,-1
 200d9a0:	28c6703a 	and	r3,r5,r3
 200d9a4:	1c06b03a 	or	r3,r3,r16
 200d9a8:	1906b03a 	or	r3,r3,r4
 200d9ac:	dfc00417 	ldw	ra,16(sp)
 200d9b0:	dcc00317 	ldw	r19,12(sp)
 200d9b4:	dc800217 	ldw	r18,8(sp)
 200d9b8:	dc400117 	ldw	r17,4(sp)
 200d9bc:	dc000017 	ldw	r16,0(sp)
 200d9c0:	dec00504 	addi	sp,sp,20
 200d9c4:	f800283a 	ret
 200d9c8:	0101ffc4 	movi	r4,2047
 200d9cc:	813fd626 	beq	r16,r4,200d928 <__alt_data_end+0xfe00d928>
 200d9d0:	29402034 	orhi	r5,r5,128
 200d9d4:	01000e04 	movi	r4,56
 200d9d8:	2080a316 	blt	r4,r2,200dc68 <__subdf3+0x3c4>
 200d9dc:	010007c4 	movi	r4,31
 200d9e0:	2080c616 	blt	r4,r2,200dcfc <__subdf3+0x458>
 200d9e4:	01000804 	movi	r4,32
 200d9e8:	2089c83a 	sub	r4,r4,r2
 200d9ec:	2910983a 	sll	r8,r5,r4
 200d9f0:	308ed83a 	srl	r7,r6,r2
 200d9f4:	3108983a 	sll	r4,r6,r4
 200d9f8:	2884d83a 	srl	r2,r5,r2
 200d9fc:	41ccb03a 	or	r6,r8,r7
 200da00:	2008c03a 	cmpne	r4,r4,zero
 200da04:	310cb03a 	or	r6,r6,r4
 200da08:	898dc83a 	sub	r6,r17,r6
 200da0c:	89a3803a 	cmpltu	r17,r17,r6
 200da10:	1887c83a 	sub	r3,r3,r2
 200da14:	1c47c83a 	sub	r3,r3,r17
 200da18:	3023883a 	mov	r17,r6
 200da1c:	1880202c 	andhi	r2,r3,128
 200da20:	10002326 	beq	r2,zero,200dab0 <__subdf3+0x20c>
 200da24:	04c02034 	movhi	r19,128
 200da28:	9cffffc4 	addi	r19,r19,-1
 200da2c:	1ce6703a 	and	r19,r3,r19
 200da30:	98007a26 	beq	r19,zero,200dc1c <__subdf3+0x378>
 200da34:	9809883a 	mov	r4,r19
 200da38:	200e3a40 	call	200e3a4 <__clzsi2>
 200da3c:	113ffe04 	addi	r4,r2,-8
 200da40:	00c007c4 	movi	r3,31
 200da44:	19007b16 	blt	r3,r4,200dc34 <__subdf3+0x390>
 200da48:	00800804 	movi	r2,32
 200da4c:	1105c83a 	sub	r2,r2,r4
 200da50:	8884d83a 	srl	r2,r17,r2
 200da54:	9906983a 	sll	r3,r19,r4
 200da58:	8922983a 	sll	r17,r17,r4
 200da5c:	10c4b03a 	or	r2,r2,r3
 200da60:	24007816 	blt	r4,r16,200dc44 <__subdf3+0x3a0>
 200da64:	2421c83a 	sub	r16,r4,r16
 200da68:	80c00044 	addi	r3,r16,1
 200da6c:	010007c4 	movi	r4,31
 200da70:	20c09516 	blt	r4,r3,200dcc8 <__subdf3+0x424>
 200da74:	01400804 	movi	r5,32
 200da78:	28cbc83a 	sub	r5,r5,r3
 200da7c:	88c8d83a 	srl	r4,r17,r3
 200da80:	8962983a 	sll	r17,r17,r5
 200da84:	114a983a 	sll	r5,r2,r5
 200da88:	10c6d83a 	srl	r3,r2,r3
 200da8c:	8804c03a 	cmpne	r2,r17,zero
 200da90:	290ab03a 	or	r5,r5,r4
 200da94:	28a2b03a 	or	r17,r5,r2
 200da98:	0021883a 	mov	r16,zero
 200da9c:	003fa206 	br	200d928 <__alt_data_end+0xfe00d928>
 200daa0:	2090b03a 	or	r8,r4,r2
 200daa4:	40018e26 	beq	r8,zero,200e0e0 <__subdf3+0x83c>
 200daa8:	1007883a 	mov	r3,r2
 200daac:	2023883a 	mov	r17,r4
 200dab0:	888001cc 	andi	r2,r17,7
 200dab4:	103f9e1e 	bne	r2,zero,200d930 <__alt_data_end+0xfe00d930>
 200dab8:	1804977a 	slli	r2,r3,29
 200dabc:	8822d0fa 	srli	r17,r17,3
 200dac0:	1810d0fa 	srli	r8,r3,3
 200dac4:	9100004c 	andi	r4,r18,1
 200dac8:	1444b03a 	or	r2,r2,r17
 200dacc:	00c1ffc4 	movi	r3,2047
 200dad0:	80c02826 	beq	r16,r3,200db74 <__subdf3+0x2d0>
 200dad4:	01400434 	movhi	r5,16
 200dad8:	297fffc4 	addi	r5,r5,-1
 200dadc:	80e0703a 	and	r16,r16,r3
 200dae0:	414a703a 	and	r5,r8,r5
 200dae4:	003fa806 	br	200d988 <__alt_data_end+0xfe00d988>
 200dae8:	0080630e 	bge	zero,r2,200dc78 <__subdf3+0x3d4>
 200daec:	48003026 	beq	r9,zero,200dbb0 <__subdf3+0x30c>
 200daf0:	0101ffc4 	movi	r4,2047
 200daf4:	813f8c26 	beq	r16,r4,200d928 <__alt_data_end+0xfe00d928>
 200daf8:	29402034 	orhi	r5,r5,128
 200dafc:	01000e04 	movi	r4,56
 200db00:	2080a90e 	bge	r4,r2,200dda8 <__subdf3+0x504>
 200db04:	298cb03a 	or	r6,r5,r6
 200db08:	3012c03a 	cmpne	r9,r6,zero
 200db0c:	0005883a 	mov	r2,zero
 200db10:	4c53883a 	add	r9,r9,r17
 200db14:	4c63803a 	cmpltu	r17,r9,r17
 200db18:	10c7883a 	add	r3,r2,r3
 200db1c:	88c7883a 	add	r3,r17,r3
 200db20:	4823883a 	mov	r17,r9
 200db24:	1880202c 	andhi	r2,r3,128
 200db28:	1000d026 	beq	r2,zero,200de6c <__subdf3+0x5c8>
 200db2c:	84000044 	addi	r16,r16,1
 200db30:	0081ffc4 	movi	r2,2047
 200db34:	8080fe26 	beq	r16,r2,200df30 <__subdf3+0x68c>
 200db38:	00bfe034 	movhi	r2,65408
 200db3c:	10bfffc4 	addi	r2,r2,-1
 200db40:	1886703a 	and	r3,r3,r2
 200db44:	880ad07a 	srli	r5,r17,1
 200db48:	180497fa 	slli	r2,r3,31
 200db4c:	8900004c 	andi	r4,r17,1
 200db50:	2922b03a 	or	r17,r5,r4
 200db54:	1806d07a 	srli	r3,r3,1
 200db58:	1462b03a 	or	r17,r2,r17
 200db5c:	3825883a 	mov	r18,r7
 200db60:	003f7106 	br	200d928 <__alt_data_end+0xfe00d928>
 200db64:	2984b03a 	or	r2,r5,r6
 200db68:	103f6826 	beq	r2,zero,200d90c <__alt_data_end+0xfe00d90c>
 200db6c:	39c03fcc 	andi	r7,r7,255
 200db70:	003f6706 	br	200d910 <__alt_data_end+0xfe00d910>
 200db74:	4086b03a 	or	r3,r8,r2
 200db78:	18015226 	beq	r3,zero,200e0c4 <__subdf3+0x820>
 200db7c:	00c00434 	movhi	r3,16
 200db80:	41400234 	orhi	r5,r8,8
 200db84:	18ffffc4 	addi	r3,r3,-1
 200db88:	28ca703a 	and	r5,r5,r3
 200db8c:	003f7e06 	br	200d988 <__alt_data_end+0xfe00d988>
 200db90:	10bfffc4 	addi	r2,r2,-1
 200db94:	1000491e 	bne	r2,zero,200dcbc <__subdf3+0x418>
 200db98:	898fc83a 	sub	r7,r17,r6
 200db9c:	89e3803a 	cmpltu	r17,r17,r7
 200dba0:	1947c83a 	sub	r3,r3,r5
 200dba4:	1c47c83a 	sub	r3,r3,r17
 200dba8:	3823883a 	mov	r17,r7
 200dbac:	003f9b06 	br	200da1c <__alt_data_end+0xfe00da1c>
 200dbb0:	2988b03a 	or	r4,r5,r6
 200dbb4:	203f5c26 	beq	r4,zero,200d928 <__alt_data_end+0xfe00d928>
 200dbb8:	10bfffc4 	addi	r2,r2,-1
 200dbbc:	1000931e 	bne	r2,zero,200de0c <__subdf3+0x568>
 200dbc0:	898d883a 	add	r6,r17,r6
 200dbc4:	3463803a 	cmpltu	r17,r6,r17
 200dbc8:	1947883a 	add	r3,r3,r5
 200dbcc:	88c7883a 	add	r3,r17,r3
 200dbd0:	3023883a 	mov	r17,r6
 200dbd4:	003fd306 	br	200db24 <__alt_data_end+0xfe00db24>
 200dbd8:	1000541e 	bne	r2,zero,200dd2c <__subdf3+0x488>
 200dbdc:	80800044 	addi	r2,r16,1
 200dbe0:	1081ffcc 	andi	r2,r2,2047
 200dbe4:	01000044 	movi	r4,1
 200dbe8:	2080a20e 	bge	r4,r2,200de74 <__subdf3+0x5d0>
 200dbec:	8989c83a 	sub	r4,r17,r6
 200dbf0:	8905803a 	cmpltu	r2,r17,r4
 200dbf4:	1967c83a 	sub	r19,r3,r5
 200dbf8:	98a7c83a 	sub	r19,r19,r2
 200dbfc:	9880202c 	andhi	r2,r19,128
 200dc00:	10006326 	beq	r2,zero,200dd90 <__subdf3+0x4ec>
 200dc04:	3463c83a 	sub	r17,r6,r17
 200dc08:	28c7c83a 	sub	r3,r5,r3
 200dc0c:	344d803a 	cmpltu	r6,r6,r17
 200dc10:	19a7c83a 	sub	r19,r3,r6
 200dc14:	3825883a 	mov	r18,r7
 200dc18:	983f861e 	bne	r19,zero,200da34 <__alt_data_end+0xfe00da34>
 200dc1c:	8809883a 	mov	r4,r17
 200dc20:	200e3a40 	call	200e3a4 <__clzsi2>
 200dc24:	10800804 	addi	r2,r2,32
 200dc28:	113ffe04 	addi	r4,r2,-8
 200dc2c:	00c007c4 	movi	r3,31
 200dc30:	193f850e 	bge	r3,r4,200da48 <__alt_data_end+0xfe00da48>
 200dc34:	10bff604 	addi	r2,r2,-40
 200dc38:	8884983a 	sll	r2,r17,r2
 200dc3c:	0023883a 	mov	r17,zero
 200dc40:	243f880e 	bge	r4,r16,200da64 <__alt_data_end+0xfe00da64>
 200dc44:	00ffe034 	movhi	r3,65408
 200dc48:	18ffffc4 	addi	r3,r3,-1
 200dc4c:	8121c83a 	sub	r16,r16,r4
 200dc50:	10c6703a 	and	r3,r2,r3
 200dc54:	003f3406 	br	200d928 <__alt_data_end+0xfe00d928>
 200dc58:	9100004c 	andi	r4,r18,1
 200dc5c:	000b883a 	mov	r5,zero
 200dc60:	0005883a 	mov	r2,zero
 200dc64:	003f4806 	br	200d988 <__alt_data_end+0xfe00d988>
 200dc68:	298cb03a 	or	r6,r5,r6
 200dc6c:	300cc03a 	cmpne	r6,r6,zero
 200dc70:	0005883a 	mov	r2,zero
 200dc74:	003f6406 	br	200da08 <__alt_data_end+0xfe00da08>
 200dc78:	10009a1e 	bne	r2,zero,200dee4 <__subdf3+0x640>
 200dc7c:	82400044 	addi	r9,r16,1
 200dc80:	4881ffcc 	andi	r2,r9,2047
 200dc84:	02800044 	movi	r10,1
 200dc88:	5080670e 	bge	r10,r2,200de28 <__subdf3+0x584>
 200dc8c:	0081ffc4 	movi	r2,2047
 200dc90:	4880af26 	beq	r9,r2,200df50 <__subdf3+0x6ac>
 200dc94:	898d883a 	add	r6,r17,r6
 200dc98:	1945883a 	add	r2,r3,r5
 200dc9c:	3447803a 	cmpltu	r3,r6,r17
 200dca0:	1887883a 	add	r3,r3,r2
 200dca4:	182297fa 	slli	r17,r3,31
 200dca8:	300cd07a 	srli	r6,r6,1
 200dcac:	1806d07a 	srli	r3,r3,1
 200dcb0:	4821883a 	mov	r16,r9
 200dcb4:	89a2b03a 	or	r17,r17,r6
 200dcb8:	003f1b06 	br	200d928 <__alt_data_end+0xfe00d928>
 200dcbc:	0101ffc4 	movi	r4,2047
 200dcc0:	813f441e 	bne	r16,r4,200d9d4 <__alt_data_end+0xfe00d9d4>
 200dcc4:	003f1806 	br	200d928 <__alt_data_end+0xfe00d928>
 200dcc8:	843ff844 	addi	r16,r16,-31
 200dccc:	01400804 	movi	r5,32
 200dcd0:	1408d83a 	srl	r4,r2,r16
 200dcd4:	19405026 	beq	r3,r5,200de18 <__subdf3+0x574>
 200dcd8:	01401004 	movi	r5,64
 200dcdc:	28c7c83a 	sub	r3,r5,r3
 200dce0:	10c4983a 	sll	r2,r2,r3
 200dce4:	88a2b03a 	or	r17,r17,r2
 200dce8:	8822c03a 	cmpne	r17,r17,zero
 200dcec:	2462b03a 	or	r17,r4,r17
 200dcf0:	0007883a 	mov	r3,zero
 200dcf4:	0021883a 	mov	r16,zero
 200dcf8:	003f6d06 	br	200dab0 <__alt_data_end+0xfe00dab0>
 200dcfc:	11fff804 	addi	r7,r2,-32
 200dd00:	01000804 	movi	r4,32
 200dd04:	29ced83a 	srl	r7,r5,r7
 200dd08:	11004526 	beq	r2,r4,200de20 <__subdf3+0x57c>
 200dd0c:	01001004 	movi	r4,64
 200dd10:	2089c83a 	sub	r4,r4,r2
 200dd14:	2904983a 	sll	r2,r5,r4
 200dd18:	118cb03a 	or	r6,r2,r6
 200dd1c:	300cc03a 	cmpne	r6,r6,zero
 200dd20:	398cb03a 	or	r6,r7,r6
 200dd24:	0005883a 	mov	r2,zero
 200dd28:	003f3706 	br	200da08 <__alt_data_end+0xfe00da08>
 200dd2c:	80002a26 	beq	r16,zero,200ddd8 <__subdf3+0x534>
 200dd30:	0101ffc4 	movi	r4,2047
 200dd34:	49006626 	beq	r9,r4,200ded0 <__subdf3+0x62c>
 200dd38:	0085c83a 	sub	r2,zero,r2
 200dd3c:	18c02034 	orhi	r3,r3,128
 200dd40:	01000e04 	movi	r4,56
 200dd44:	20807e16 	blt	r4,r2,200df40 <__subdf3+0x69c>
 200dd48:	010007c4 	movi	r4,31
 200dd4c:	2080e716 	blt	r4,r2,200e0ec <__subdf3+0x848>
 200dd50:	01000804 	movi	r4,32
 200dd54:	2089c83a 	sub	r4,r4,r2
 200dd58:	1914983a 	sll	r10,r3,r4
 200dd5c:	8890d83a 	srl	r8,r17,r2
 200dd60:	8908983a 	sll	r4,r17,r4
 200dd64:	1884d83a 	srl	r2,r3,r2
 200dd68:	5222b03a 	or	r17,r10,r8
 200dd6c:	2006c03a 	cmpne	r3,r4,zero
 200dd70:	88e2b03a 	or	r17,r17,r3
 200dd74:	3463c83a 	sub	r17,r6,r17
 200dd78:	2885c83a 	sub	r2,r5,r2
 200dd7c:	344d803a 	cmpltu	r6,r6,r17
 200dd80:	1187c83a 	sub	r3,r2,r6
 200dd84:	4821883a 	mov	r16,r9
 200dd88:	3825883a 	mov	r18,r7
 200dd8c:	003f2306 	br	200da1c <__alt_data_end+0xfe00da1c>
 200dd90:	24d0b03a 	or	r8,r4,r19
 200dd94:	40001b1e 	bne	r8,zero,200de04 <__subdf3+0x560>
 200dd98:	0005883a 	mov	r2,zero
 200dd9c:	0009883a 	mov	r4,zero
 200dda0:	0021883a 	mov	r16,zero
 200dda4:	003f4906 	br	200dacc <__alt_data_end+0xfe00dacc>
 200dda8:	010007c4 	movi	r4,31
 200ddac:	20803a16 	blt	r4,r2,200de98 <__subdf3+0x5f4>
 200ddb0:	01000804 	movi	r4,32
 200ddb4:	2089c83a 	sub	r4,r4,r2
 200ddb8:	2912983a 	sll	r9,r5,r4
 200ddbc:	3090d83a 	srl	r8,r6,r2
 200ddc0:	3108983a 	sll	r4,r6,r4
 200ddc4:	2884d83a 	srl	r2,r5,r2
 200ddc8:	4a12b03a 	or	r9,r9,r8
 200ddcc:	2008c03a 	cmpne	r4,r4,zero
 200ddd0:	4912b03a 	or	r9,r9,r4
 200ddd4:	003f4e06 	br	200db10 <__alt_data_end+0xfe00db10>
 200ddd8:	1c48b03a 	or	r4,r3,r17
 200dddc:	20003c26 	beq	r4,zero,200ded0 <__subdf3+0x62c>
 200dde0:	0084303a 	nor	r2,zero,r2
 200dde4:	1000381e 	bne	r2,zero,200dec8 <__subdf3+0x624>
 200dde8:	3463c83a 	sub	r17,r6,r17
 200ddec:	28c5c83a 	sub	r2,r5,r3
 200ddf0:	344d803a 	cmpltu	r6,r6,r17
 200ddf4:	1187c83a 	sub	r3,r2,r6
 200ddf8:	4821883a 	mov	r16,r9
 200ddfc:	3825883a 	mov	r18,r7
 200de00:	003f0606 	br	200da1c <__alt_data_end+0xfe00da1c>
 200de04:	2023883a 	mov	r17,r4
 200de08:	003f0906 	br	200da30 <__alt_data_end+0xfe00da30>
 200de0c:	0101ffc4 	movi	r4,2047
 200de10:	813f3a1e 	bne	r16,r4,200dafc <__alt_data_end+0xfe00dafc>
 200de14:	003ec406 	br	200d928 <__alt_data_end+0xfe00d928>
 200de18:	0005883a 	mov	r2,zero
 200de1c:	003fb106 	br	200dce4 <__alt_data_end+0xfe00dce4>
 200de20:	0005883a 	mov	r2,zero
 200de24:	003fbc06 	br	200dd18 <__alt_data_end+0xfe00dd18>
 200de28:	1c44b03a 	or	r2,r3,r17
 200de2c:	80008e1e 	bne	r16,zero,200e068 <__subdf3+0x7c4>
 200de30:	1000c826 	beq	r2,zero,200e154 <__subdf3+0x8b0>
 200de34:	2984b03a 	or	r2,r5,r6
 200de38:	103ebb26 	beq	r2,zero,200d928 <__alt_data_end+0xfe00d928>
 200de3c:	8989883a 	add	r4,r17,r6
 200de40:	1945883a 	add	r2,r3,r5
 200de44:	2447803a 	cmpltu	r3,r4,r17
 200de48:	1887883a 	add	r3,r3,r2
 200de4c:	1880202c 	andhi	r2,r3,128
 200de50:	2023883a 	mov	r17,r4
 200de54:	103f1626 	beq	r2,zero,200dab0 <__alt_data_end+0xfe00dab0>
 200de58:	00bfe034 	movhi	r2,65408
 200de5c:	10bfffc4 	addi	r2,r2,-1
 200de60:	5021883a 	mov	r16,r10
 200de64:	1886703a 	and	r3,r3,r2
 200de68:	003eaf06 	br	200d928 <__alt_data_end+0xfe00d928>
 200de6c:	3825883a 	mov	r18,r7
 200de70:	003f0f06 	br	200dab0 <__alt_data_end+0xfe00dab0>
 200de74:	1c44b03a 	or	r2,r3,r17
 200de78:	8000251e 	bne	r16,zero,200df10 <__subdf3+0x66c>
 200de7c:	1000661e 	bne	r2,zero,200e018 <__subdf3+0x774>
 200de80:	2990b03a 	or	r8,r5,r6
 200de84:	40009626 	beq	r8,zero,200e0e0 <__subdf3+0x83c>
 200de88:	2807883a 	mov	r3,r5
 200de8c:	3023883a 	mov	r17,r6
 200de90:	3825883a 	mov	r18,r7
 200de94:	003ea406 	br	200d928 <__alt_data_end+0xfe00d928>
 200de98:	127ff804 	addi	r9,r2,-32
 200de9c:	01000804 	movi	r4,32
 200dea0:	2a52d83a 	srl	r9,r5,r9
 200dea4:	11008c26 	beq	r2,r4,200e0d8 <__subdf3+0x834>
 200dea8:	01001004 	movi	r4,64
 200deac:	2085c83a 	sub	r2,r4,r2
 200deb0:	2884983a 	sll	r2,r5,r2
 200deb4:	118cb03a 	or	r6,r2,r6
 200deb8:	300cc03a 	cmpne	r6,r6,zero
 200debc:	4992b03a 	or	r9,r9,r6
 200dec0:	0005883a 	mov	r2,zero
 200dec4:	003f1206 	br	200db10 <__alt_data_end+0xfe00db10>
 200dec8:	0101ffc4 	movi	r4,2047
 200decc:	493f9c1e 	bne	r9,r4,200dd40 <__alt_data_end+0xfe00dd40>
 200ded0:	2807883a 	mov	r3,r5
 200ded4:	3023883a 	mov	r17,r6
 200ded8:	4821883a 	mov	r16,r9
 200dedc:	3825883a 	mov	r18,r7
 200dee0:	003e9106 	br	200d928 <__alt_data_end+0xfe00d928>
 200dee4:	80001f1e 	bne	r16,zero,200df64 <__subdf3+0x6c0>
 200dee8:	1c48b03a 	or	r4,r3,r17
 200deec:	20005a26 	beq	r4,zero,200e058 <__subdf3+0x7b4>
 200def0:	0084303a 	nor	r2,zero,r2
 200def4:	1000561e 	bne	r2,zero,200e050 <__subdf3+0x7ac>
 200def8:	89a3883a 	add	r17,r17,r6
 200defc:	1945883a 	add	r2,r3,r5
 200df00:	898d803a 	cmpltu	r6,r17,r6
 200df04:	3087883a 	add	r3,r6,r2
 200df08:	4821883a 	mov	r16,r9
 200df0c:	003f0506 	br	200db24 <__alt_data_end+0xfe00db24>
 200df10:	10002b1e 	bne	r2,zero,200dfc0 <__subdf3+0x71c>
 200df14:	2984b03a 	or	r2,r5,r6
 200df18:	10008026 	beq	r2,zero,200e11c <__subdf3+0x878>
 200df1c:	2807883a 	mov	r3,r5
 200df20:	3023883a 	mov	r17,r6
 200df24:	3825883a 	mov	r18,r7
 200df28:	0401ffc4 	movi	r16,2047
 200df2c:	003e7e06 	br	200d928 <__alt_data_end+0xfe00d928>
 200df30:	3809883a 	mov	r4,r7
 200df34:	0011883a 	mov	r8,zero
 200df38:	0005883a 	mov	r2,zero
 200df3c:	003ee306 	br	200dacc <__alt_data_end+0xfe00dacc>
 200df40:	1c62b03a 	or	r17,r3,r17
 200df44:	8822c03a 	cmpne	r17,r17,zero
 200df48:	0005883a 	mov	r2,zero
 200df4c:	003f8906 	br	200dd74 <__alt_data_end+0xfe00dd74>
 200df50:	3809883a 	mov	r4,r7
 200df54:	4821883a 	mov	r16,r9
 200df58:	0011883a 	mov	r8,zero
 200df5c:	0005883a 	mov	r2,zero
 200df60:	003eda06 	br	200dacc <__alt_data_end+0xfe00dacc>
 200df64:	0101ffc4 	movi	r4,2047
 200df68:	49003b26 	beq	r9,r4,200e058 <__subdf3+0x7b4>
 200df6c:	0085c83a 	sub	r2,zero,r2
 200df70:	18c02034 	orhi	r3,r3,128
 200df74:	01000e04 	movi	r4,56
 200df78:	20806e16 	blt	r4,r2,200e134 <__subdf3+0x890>
 200df7c:	010007c4 	movi	r4,31
 200df80:	20807716 	blt	r4,r2,200e160 <__subdf3+0x8bc>
 200df84:	01000804 	movi	r4,32
 200df88:	2089c83a 	sub	r4,r4,r2
 200df8c:	1914983a 	sll	r10,r3,r4
 200df90:	8890d83a 	srl	r8,r17,r2
 200df94:	8908983a 	sll	r4,r17,r4
 200df98:	1884d83a 	srl	r2,r3,r2
 200df9c:	5222b03a 	or	r17,r10,r8
 200dfa0:	2006c03a 	cmpne	r3,r4,zero
 200dfa4:	88e2b03a 	or	r17,r17,r3
 200dfa8:	89a3883a 	add	r17,r17,r6
 200dfac:	1145883a 	add	r2,r2,r5
 200dfb0:	898d803a 	cmpltu	r6,r17,r6
 200dfb4:	3087883a 	add	r3,r6,r2
 200dfb8:	4821883a 	mov	r16,r9
 200dfbc:	003ed906 	br	200db24 <__alt_data_end+0xfe00db24>
 200dfc0:	2984b03a 	or	r2,r5,r6
 200dfc4:	10004226 	beq	r2,zero,200e0d0 <__subdf3+0x82c>
 200dfc8:	1808d0fa 	srli	r4,r3,3
 200dfcc:	8822d0fa 	srli	r17,r17,3
 200dfd0:	1806977a 	slli	r3,r3,29
 200dfd4:	2080022c 	andhi	r2,r4,8
 200dfd8:	1c62b03a 	or	r17,r3,r17
 200dfdc:	10000826 	beq	r2,zero,200e000 <__subdf3+0x75c>
 200dfe0:	2812d0fa 	srli	r9,r5,3
 200dfe4:	4880022c 	andhi	r2,r9,8
 200dfe8:	1000051e 	bne	r2,zero,200e000 <__subdf3+0x75c>
 200dfec:	300cd0fa 	srli	r6,r6,3
 200dff0:	2804977a 	slli	r2,r5,29
 200dff4:	4809883a 	mov	r4,r9
 200dff8:	3825883a 	mov	r18,r7
 200dffc:	11a2b03a 	or	r17,r2,r6
 200e000:	8806d77a 	srli	r3,r17,29
 200e004:	200890fa 	slli	r4,r4,3
 200e008:	882290fa 	slli	r17,r17,3
 200e00c:	0401ffc4 	movi	r16,2047
 200e010:	1906b03a 	or	r3,r3,r4
 200e014:	003e4406 	br	200d928 <__alt_data_end+0xfe00d928>
 200e018:	2984b03a 	or	r2,r5,r6
 200e01c:	103e4226 	beq	r2,zero,200d928 <__alt_data_end+0xfe00d928>
 200e020:	8989c83a 	sub	r4,r17,r6
 200e024:	8911803a 	cmpltu	r8,r17,r4
 200e028:	1945c83a 	sub	r2,r3,r5
 200e02c:	1205c83a 	sub	r2,r2,r8
 200e030:	1200202c 	andhi	r8,r2,128
 200e034:	403e9a26 	beq	r8,zero,200daa0 <__alt_data_end+0xfe00daa0>
 200e038:	3463c83a 	sub	r17,r6,r17
 200e03c:	28c5c83a 	sub	r2,r5,r3
 200e040:	344d803a 	cmpltu	r6,r6,r17
 200e044:	1187c83a 	sub	r3,r2,r6
 200e048:	3825883a 	mov	r18,r7
 200e04c:	003e3606 	br	200d928 <__alt_data_end+0xfe00d928>
 200e050:	0101ffc4 	movi	r4,2047
 200e054:	493fc71e 	bne	r9,r4,200df74 <__alt_data_end+0xfe00df74>
 200e058:	2807883a 	mov	r3,r5
 200e05c:	3023883a 	mov	r17,r6
 200e060:	4821883a 	mov	r16,r9
 200e064:	003e3006 	br	200d928 <__alt_data_end+0xfe00d928>
 200e068:	10003626 	beq	r2,zero,200e144 <__subdf3+0x8a0>
 200e06c:	2984b03a 	or	r2,r5,r6
 200e070:	10001726 	beq	r2,zero,200e0d0 <__subdf3+0x82c>
 200e074:	1808d0fa 	srli	r4,r3,3
 200e078:	8822d0fa 	srli	r17,r17,3
 200e07c:	1806977a 	slli	r3,r3,29
 200e080:	2080022c 	andhi	r2,r4,8
 200e084:	1c62b03a 	or	r17,r3,r17
 200e088:	10000726 	beq	r2,zero,200e0a8 <__subdf3+0x804>
 200e08c:	2812d0fa 	srli	r9,r5,3
 200e090:	4880022c 	andhi	r2,r9,8
 200e094:	1000041e 	bne	r2,zero,200e0a8 <__subdf3+0x804>
 200e098:	300cd0fa 	srli	r6,r6,3
 200e09c:	2804977a 	slli	r2,r5,29
 200e0a0:	4809883a 	mov	r4,r9
 200e0a4:	11a2b03a 	or	r17,r2,r6
 200e0a8:	8806d77a 	srli	r3,r17,29
 200e0ac:	200890fa 	slli	r4,r4,3
 200e0b0:	882290fa 	slli	r17,r17,3
 200e0b4:	3825883a 	mov	r18,r7
 200e0b8:	1906b03a 	or	r3,r3,r4
 200e0bc:	0401ffc4 	movi	r16,2047
 200e0c0:	003e1906 	br	200d928 <__alt_data_end+0xfe00d928>
 200e0c4:	000b883a 	mov	r5,zero
 200e0c8:	0005883a 	mov	r2,zero
 200e0cc:	003e2e06 	br	200d988 <__alt_data_end+0xfe00d988>
 200e0d0:	0401ffc4 	movi	r16,2047
 200e0d4:	003e1406 	br	200d928 <__alt_data_end+0xfe00d928>
 200e0d8:	0005883a 	mov	r2,zero
 200e0dc:	003f7506 	br	200deb4 <__alt_data_end+0xfe00deb4>
 200e0e0:	0005883a 	mov	r2,zero
 200e0e4:	0009883a 	mov	r4,zero
 200e0e8:	003e7806 	br	200dacc <__alt_data_end+0xfe00dacc>
 200e0ec:	123ff804 	addi	r8,r2,-32
 200e0f0:	01000804 	movi	r4,32
 200e0f4:	1a10d83a 	srl	r8,r3,r8
 200e0f8:	11002526 	beq	r2,r4,200e190 <__subdf3+0x8ec>
 200e0fc:	01001004 	movi	r4,64
 200e100:	2085c83a 	sub	r2,r4,r2
 200e104:	1884983a 	sll	r2,r3,r2
 200e108:	1444b03a 	or	r2,r2,r17
 200e10c:	1004c03a 	cmpne	r2,r2,zero
 200e110:	40a2b03a 	or	r17,r8,r2
 200e114:	0005883a 	mov	r2,zero
 200e118:	003f1606 	br	200dd74 <__alt_data_end+0xfe00dd74>
 200e11c:	02000434 	movhi	r8,16
 200e120:	0009883a 	mov	r4,zero
 200e124:	423fffc4 	addi	r8,r8,-1
 200e128:	00bfffc4 	movi	r2,-1
 200e12c:	0401ffc4 	movi	r16,2047
 200e130:	003e6606 	br	200dacc <__alt_data_end+0xfe00dacc>
 200e134:	1c62b03a 	or	r17,r3,r17
 200e138:	8822c03a 	cmpne	r17,r17,zero
 200e13c:	0005883a 	mov	r2,zero
 200e140:	003f9906 	br	200dfa8 <__alt_data_end+0xfe00dfa8>
 200e144:	2807883a 	mov	r3,r5
 200e148:	3023883a 	mov	r17,r6
 200e14c:	0401ffc4 	movi	r16,2047
 200e150:	003df506 	br	200d928 <__alt_data_end+0xfe00d928>
 200e154:	2807883a 	mov	r3,r5
 200e158:	3023883a 	mov	r17,r6
 200e15c:	003df206 	br	200d928 <__alt_data_end+0xfe00d928>
 200e160:	123ff804 	addi	r8,r2,-32
 200e164:	01000804 	movi	r4,32
 200e168:	1a10d83a 	srl	r8,r3,r8
 200e16c:	11000a26 	beq	r2,r4,200e198 <__subdf3+0x8f4>
 200e170:	01001004 	movi	r4,64
 200e174:	2085c83a 	sub	r2,r4,r2
 200e178:	1884983a 	sll	r2,r3,r2
 200e17c:	1444b03a 	or	r2,r2,r17
 200e180:	1004c03a 	cmpne	r2,r2,zero
 200e184:	40a2b03a 	or	r17,r8,r2
 200e188:	0005883a 	mov	r2,zero
 200e18c:	003f8606 	br	200dfa8 <__alt_data_end+0xfe00dfa8>
 200e190:	0005883a 	mov	r2,zero
 200e194:	003fdc06 	br	200e108 <__alt_data_end+0xfe00e108>
 200e198:	0005883a 	mov	r2,zero
 200e19c:	003ff706 	br	200e17c <__alt_data_end+0xfe00e17c>

0200e1a0 <__fixdfsi>:
 200e1a0:	280cd53a 	srli	r6,r5,20
 200e1a4:	00c00434 	movhi	r3,16
 200e1a8:	18ffffc4 	addi	r3,r3,-1
 200e1ac:	3181ffcc 	andi	r6,r6,2047
 200e1b0:	01c0ff84 	movi	r7,1022
 200e1b4:	28c6703a 	and	r3,r5,r3
 200e1b8:	280ad7fa 	srli	r5,r5,31
 200e1bc:	3980120e 	bge	r7,r6,200e208 <__fixdfsi+0x68>
 200e1c0:	00810744 	movi	r2,1053
 200e1c4:	11800c16 	blt	r2,r6,200e1f8 <__fixdfsi+0x58>
 200e1c8:	00810cc4 	movi	r2,1075
 200e1cc:	1185c83a 	sub	r2,r2,r6
 200e1d0:	01c007c4 	movi	r7,31
 200e1d4:	18c00434 	orhi	r3,r3,16
 200e1d8:	38800d16 	blt	r7,r2,200e210 <__fixdfsi+0x70>
 200e1dc:	31befb44 	addi	r6,r6,-1043
 200e1e0:	2084d83a 	srl	r2,r4,r2
 200e1e4:	1986983a 	sll	r3,r3,r6
 200e1e8:	1884b03a 	or	r2,r3,r2
 200e1ec:	28000726 	beq	r5,zero,200e20c <__fixdfsi+0x6c>
 200e1f0:	0085c83a 	sub	r2,zero,r2
 200e1f4:	f800283a 	ret
 200e1f8:	00a00034 	movhi	r2,32768
 200e1fc:	10bfffc4 	addi	r2,r2,-1
 200e200:	2885883a 	add	r2,r5,r2
 200e204:	f800283a 	ret
 200e208:	0005883a 	mov	r2,zero
 200e20c:	f800283a 	ret
 200e210:	008104c4 	movi	r2,1043
 200e214:	1185c83a 	sub	r2,r2,r6
 200e218:	1884d83a 	srl	r2,r3,r2
 200e21c:	003ff306 	br	200e1ec <__alt_data_end+0xfe00e1ec>

0200e220 <__floatsidf>:
 200e220:	defffd04 	addi	sp,sp,-12
 200e224:	dfc00215 	stw	ra,8(sp)
 200e228:	dc400115 	stw	r17,4(sp)
 200e22c:	dc000015 	stw	r16,0(sp)
 200e230:	20002b26 	beq	r4,zero,200e2e0 <__floatsidf+0xc0>
 200e234:	2023883a 	mov	r17,r4
 200e238:	2020d7fa 	srli	r16,r4,31
 200e23c:	20002d16 	blt	r4,zero,200e2f4 <__floatsidf+0xd4>
 200e240:	8809883a 	mov	r4,r17
 200e244:	200e3a40 	call	200e3a4 <__clzsi2>
 200e248:	01410784 	movi	r5,1054
 200e24c:	288bc83a 	sub	r5,r5,r2
 200e250:	01010cc4 	movi	r4,1075
 200e254:	2149c83a 	sub	r4,r4,r5
 200e258:	00c007c4 	movi	r3,31
 200e25c:	1900160e 	bge	r3,r4,200e2b8 <__floatsidf+0x98>
 200e260:	00c104c4 	movi	r3,1043
 200e264:	1947c83a 	sub	r3,r3,r5
 200e268:	88c6983a 	sll	r3,r17,r3
 200e26c:	00800434 	movhi	r2,16
 200e270:	10bfffc4 	addi	r2,r2,-1
 200e274:	1886703a 	and	r3,r3,r2
 200e278:	2941ffcc 	andi	r5,r5,2047
 200e27c:	800d883a 	mov	r6,r16
 200e280:	0005883a 	mov	r2,zero
 200e284:	280a953a 	slli	r5,r5,20
 200e288:	31803fcc 	andi	r6,r6,255
 200e28c:	01000434 	movhi	r4,16
 200e290:	300c97fa 	slli	r6,r6,31
 200e294:	213fffc4 	addi	r4,r4,-1
 200e298:	1906703a 	and	r3,r3,r4
 200e29c:	1946b03a 	or	r3,r3,r5
 200e2a0:	1986b03a 	or	r3,r3,r6
 200e2a4:	dfc00217 	ldw	ra,8(sp)
 200e2a8:	dc400117 	ldw	r17,4(sp)
 200e2ac:	dc000017 	ldw	r16,0(sp)
 200e2b0:	dec00304 	addi	sp,sp,12
 200e2b4:	f800283a 	ret
 200e2b8:	00c002c4 	movi	r3,11
 200e2bc:	1887c83a 	sub	r3,r3,r2
 200e2c0:	88c6d83a 	srl	r3,r17,r3
 200e2c4:	8904983a 	sll	r2,r17,r4
 200e2c8:	01000434 	movhi	r4,16
 200e2cc:	213fffc4 	addi	r4,r4,-1
 200e2d0:	2941ffcc 	andi	r5,r5,2047
 200e2d4:	1906703a 	and	r3,r3,r4
 200e2d8:	800d883a 	mov	r6,r16
 200e2dc:	003fe906 	br	200e284 <__alt_data_end+0xfe00e284>
 200e2e0:	000d883a 	mov	r6,zero
 200e2e4:	000b883a 	mov	r5,zero
 200e2e8:	0007883a 	mov	r3,zero
 200e2ec:	0005883a 	mov	r2,zero
 200e2f0:	003fe406 	br	200e284 <__alt_data_end+0xfe00e284>
 200e2f4:	0123c83a 	sub	r17,zero,r4
 200e2f8:	003fd106 	br	200e240 <__alt_data_end+0xfe00e240>

0200e2fc <__floatunsidf>:
 200e2fc:	defffe04 	addi	sp,sp,-8
 200e300:	dc000015 	stw	r16,0(sp)
 200e304:	dfc00115 	stw	ra,4(sp)
 200e308:	2021883a 	mov	r16,r4
 200e30c:	20002226 	beq	r4,zero,200e398 <__floatunsidf+0x9c>
 200e310:	200e3a40 	call	200e3a4 <__clzsi2>
 200e314:	01010784 	movi	r4,1054
 200e318:	2089c83a 	sub	r4,r4,r2
 200e31c:	01810cc4 	movi	r6,1075
 200e320:	310dc83a 	sub	r6,r6,r4
 200e324:	00c007c4 	movi	r3,31
 200e328:	1980120e 	bge	r3,r6,200e374 <__floatunsidf+0x78>
 200e32c:	00c104c4 	movi	r3,1043
 200e330:	1907c83a 	sub	r3,r3,r4
 200e334:	80ca983a 	sll	r5,r16,r3
 200e338:	00800434 	movhi	r2,16
 200e33c:	10bfffc4 	addi	r2,r2,-1
 200e340:	2101ffcc 	andi	r4,r4,2047
 200e344:	0021883a 	mov	r16,zero
 200e348:	288a703a 	and	r5,r5,r2
 200e34c:	2008953a 	slli	r4,r4,20
 200e350:	00c00434 	movhi	r3,16
 200e354:	18ffffc4 	addi	r3,r3,-1
 200e358:	28c6703a 	and	r3,r5,r3
 200e35c:	8005883a 	mov	r2,r16
 200e360:	1906b03a 	or	r3,r3,r4
 200e364:	dfc00117 	ldw	ra,4(sp)
 200e368:	dc000017 	ldw	r16,0(sp)
 200e36c:	dec00204 	addi	sp,sp,8
 200e370:	f800283a 	ret
 200e374:	00c002c4 	movi	r3,11
 200e378:	188bc83a 	sub	r5,r3,r2
 200e37c:	814ad83a 	srl	r5,r16,r5
 200e380:	00c00434 	movhi	r3,16
 200e384:	18ffffc4 	addi	r3,r3,-1
 200e388:	81a0983a 	sll	r16,r16,r6
 200e38c:	2101ffcc 	andi	r4,r4,2047
 200e390:	28ca703a 	and	r5,r5,r3
 200e394:	003fed06 	br	200e34c <__alt_data_end+0xfe00e34c>
 200e398:	0009883a 	mov	r4,zero
 200e39c:	000b883a 	mov	r5,zero
 200e3a0:	003fea06 	br	200e34c <__alt_data_end+0xfe00e34c>

0200e3a4 <__clzsi2>:
 200e3a4:	00bfffd4 	movui	r2,65535
 200e3a8:	11000536 	bltu	r2,r4,200e3c0 <__clzsi2+0x1c>
 200e3ac:	00803fc4 	movi	r2,255
 200e3b0:	11000f36 	bltu	r2,r4,200e3f0 <__clzsi2+0x4c>
 200e3b4:	00800804 	movi	r2,32
 200e3b8:	0007883a 	mov	r3,zero
 200e3bc:	00000506 	br	200e3d4 <__clzsi2+0x30>
 200e3c0:	00804034 	movhi	r2,256
 200e3c4:	10bfffc4 	addi	r2,r2,-1
 200e3c8:	11000c2e 	bgeu	r2,r4,200e3fc <__clzsi2+0x58>
 200e3cc:	00800204 	movi	r2,8
 200e3d0:	00c00604 	movi	r3,24
 200e3d4:	20c8d83a 	srl	r4,r4,r3
 200e3d8:	00c08074 	movhi	r3,513
 200e3dc:	18c5ce04 	addi	r3,r3,5944
 200e3e0:	1909883a 	add	r4,r3,r4
 200e3e4:	20c00003 	ldbu	r3,0(r4)
 200e3e8:	10c5c83a 	sub	r2,r2,r3
 200e3ec:	f800283a 	ret
 200e3f0:	00800604 	movi	r2,24
 200e3f4:	00c00204 	movi	r3,8
 200e3f8:	003ff606 	br	200e3d4 <__alt_data_end+0xfe00e3d4>
 200e3fc:	00800404 	movi	r2,16
 200e400:	1007883a 	mov	r3,r2
 200e404:	003ff306 	br	200e3d4 <__alt_data_end+0xfe00e3d4>

0200e408 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e408:	defffe04 	addi	sp,sp,-8
 200e40c:	dfc00115 	stw	ra,4(sp)
 200e410:	df000015 	stw	fp,0(sp)
 200e414:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e418:	d0a00b17 	ldw	r2,-32724(gp)
 200e41c:	10000326 	beq	r2,zero,200e42c <alt_get_errno+0x24>
 200e420:	d0a00b17 	ldw	r2,-32724(gp)
 200e424:	103ee83a 	callr	r2
 200e428:	00000106 	br	200e430 <alt_get_errno+0x28>
 200e42c:	d0a6f904 	addi	r2,gp,-25628
}
 200e430:	e037883a 	mov	sp,fp
 200e434:	dfc00117 	ldw	ra,4(sp)
 200e438:	df000017 	ldw	fp,0(sp)
 200e43c:	dec00204 	addi	sp,sp,8
 200e440:	f800283a 	ret

0200e444 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200e444:	defffb04 	addi	sp,sp,-20
 200e448:	dfc00415 	stw	ra,16(sp)
 200e44c:	df000315 	stw	fp,12(sp)
 200e450:	df000304 	addi	fp,sp,12
 200e454:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200e458:	e0bfff17 	ldw	r2,-4(fp)
 200e45c:	10000816 	blt	r2,zero,200e480 <close+0x3c>
 200e460:	01400304 	movi	r5,12
 200e464:	e13fff17 	ldw	r4,-4(fp)
 200e468:	2000a4c0 	call	2000a4c <__mulsi3>
 200e46c:	1007883a 	mov	r3,r2
 200e470:	00808074 	movhi	r2,513
 200e474:	10889104 	addi	r2,r2,8772
 200e478:	1885883a 	add	r2,r3,r2
 200e47c:	00000106 	br	200e484 <close+0x40>
 200e480:	0005883a 	mov	r2,zero
 200e484:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 200e488:	e0bffd17 	ldw	r2,-12(fp)
 200e48c:	10001926 	beq	r2,zero,200e4f4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200e490:	e0bffd17 	ldw	r2,-12(fp)
 200e494:	10800017 	ldw	r2,0(r2)
 200e498:	10800417 	ldw	r2,16(r2)
 200e49c:	10000626 	beq	r2,zero,200e4b8 <close+0x74>
 200e4a0:	e0bffd17 	ldw	r2,-12(fp)
 200e4a4:	10800017 	ldw	r2,0(r2)
 200e4a8:	10800417 	ldw	r2,16(r2)
 200e4ac:	e13ffd17 	ldw	r4,-12(fp)
 200e4b0:	103ee83a 	callr	r2
 200e4b4:	00000106 	br	200e4bc <close+0x78>
 200e4b8:	0005883a 	mov	r2,zero
 200e4bc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200e4c0:	e13fff17 	ldw	r4,-4(fp)
 200e4c4:	200edb00 	call	200edb0 <alt_release_fd>
    if (rval < 0)
 200e4c8:	e0bffe17 	ldw	r2,-8(fp)
 200e4cc:	1000070e 	bge	r2,zero,200e4ec <close+0xa8>
    {
      ALT_ERRNO = -rval;
 200e4d0:	200e4080 	call	200e408 <alt_get_errno>
 200e4d4:	1007883a 	mov	r3,r2
 200e4d8:	e0bffe17 	ldw	r2,-8(fp)
 200e4dc:	0085c83a 	sub	r2,zero,r2
 200e4e0:	18800015 	stw	r2,0(r3)
      return -1;
 200e4e4:	00bfffc4 	movi	r2,-1
 200e4e8:	00000706 	br	200e508 <close+0xc4>
    }
    return 0;
 200e4ec:	0005883a 	mov	r2,zero
 200e4f0:	00000506 	br	200e508 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e4f4:	200e4080 	call	200e408 <alt_get_errno>
 200e4f8:	1007883a 	mov	r3,r2
 200e4fc:	00801444 	movi	r2,81
 200e500:	18800015 	stw	r2,0(r3)
    return -1;
 200e504:	00bfffc4 	movi	r2,-1
  }
}
 200e508:	e037883a 	mov	sp,fp
 200e50c:	dfc00117 	ldw	ra,4(sp)
 200e510:	df000017 	ldw	fp,0(sp)
 200e514:	dec00204 	addi	sp,sp,8
 200e518:	f800283a 	ret

0200e51c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200e51c:	defffc04 	addi	sp,sp,-16
 200e520:	df000315 	stw	fp,12(sp)
 200e524:	df000304 	addi	fp,sp,12
 200e528:	e13ffd15 	stw	r4,-12(fp)
 200e52c:	e17ffe15 	stw	r5,-8(fp)
 200e530:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200e534:	e0bfff17 	ldw	r2,-4(fp)
}
 200e538:	e037883a 	mov	sp,fp
 200e53c:	df000017 	ldw	fp,0(sp)
 200e540:	dec00104 	addi	sp,sp,4
 200e544:	f800283a 	ret

0200e548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e548:	defffe04 	addi	sp,sp,-8
 200e54c:	dfc00115 	stw	ra,4(sp)
 200e550:	df000015 	stw	fp,0(sp)
 200e554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e558:	d0a00b17 	ldw	r2,-32724(gp)
 200e55c:	10000326 	beq	r2,zero,200e56c <alt_get_errno+0x24>
 200e560:	d0a00b17 	ldw	r2,-32724(gp)
 200e564:	103ee83a 	callr	r2
 200e568:	00000106 	br	200e570 <alt_get_errno+0x28>
 200e56c:	d0a6f904 	addi	r2,gp,-25628
}
 200e570:	e037883a 	mov	sp,fp
 200e574:	dfc00117 	ldw	ra,4(sp)
 200e578:	df000017 	ldw	fp,0(sp)
 200e57c:	dec00204 	addi	sp,sp,8
 200e580:	f800283a 	ret

0200e584 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200e584:	defffb04 	addi	sp,sp,-20
 200e588:	dfc00415 	stw	ra,16(sp)
 200e58c:	df000315 	stw	fp,12(sp)
 200e590:	df000304 	addi	fp,sp,12
 200e594:	e13ffe15 	stw	r4,-8(fp)
 200e598:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e59c:	e0bffe17 	ldw	r2,-8(fp)
 200e5a0:	10000816 	blt	r2,zero,200e5c4 <fstat+0x40>
 200e5a4:	01400304 	movi	r5,12
 200e5a8:	e13ffe17 	ldw	r4,-8(fp)
 200e5ac:	2000a4c0 	call	2000a4c <__mulsi3>
 200e5b0:	1007883a 	mov	r3,r2
 200e5b4:	00808074 	movhi	r2,513
 200e5b8:	10889104 	addi	r2,r2,8772
 200e5bc:	1885883a 	add	r2,r3,r2
 200e5c0:	00000106 	br	200e5c8 <fstat+0x44>
 200e5c4:	0005883a 	mov	r2,zero
 200e5c8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 200e5cc:	e0bffd17 	ldw	r2,-12(fp)
 200e5d0:	10001026 	beq	r2,zero,200e614 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200e5d4:	e0bffd17 	ldw	r2,-12(fp)
 200e5d8:	10800017 	ldw	r2,0(r2)
 200e5dc:	10800817 	ldw	r2,32(r2)
 200e5e0:	10000726 	beq	r2,zero,200e600 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 200e5e4:	e0bffd17 	ldw	r2,-12(fp)
 200e5e8:	10800017 	ldw	r2,0(r2)
 200e5ec:	10800817 	ldw	r2,32(r2)
 200e5f0:	e17fff17 	ldw	r5,-4(fp)
 200e5f4:	e13ffd17 	ldw	r4,-12(fp)
 200e5f8:	103ee83a 	callr	r2
 200e5fc:	00000a06 	br	200e628 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200e600:	e0bfff17 	ldw	r2,-4(fp)
 200e604:	00c80004 	movi	r3,8192
 200e608:	10c00115 	stw	r3,4(r2)
      return 0;
 200e60c:	0005883a 	mov	r2,zero
 200e610:	00000506 	br	200e628 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e614:	200e5480 	call	200e548 <alt_get_errno>
 200e618:	1007883a 	mov	r3,r2
 200e61c:	00801444 	movi	r2,81
 200e620:	18800015 	stw	r2,0(r3)
    return -1;
 200e624:	00bfffc4 	movi	r2,-1
  }
}
 200e628:	e037883a 	mov	sp,fp
 200e62c:	dfc00117 	ldw	ra,4(sp)
 200e630:	df000017 	ldw	fp,0(sp)
 200e634:	dec00204 	addi	sp,sp,8
 200e638:	f800283a 	ret

0200e63c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e63c:	defffe04 	addi	sp,sp,-8
 200e640:	dfc00115 	stw	ra,4(sp)
 200e644:	df000015 	stw	fp,0(sp)
 200e648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e64c:	d0a00b17 	ldw	r2,-32724(gp)
 200e650:	10000326 	beq	r2,zero,200e660 <alt_get_errno+0x24>
 200e654:	d0a00b17 	ldw	r2,-32724(gp)
 200e658:	103ee83a 	callr	r2
 200e65c:	00000106 	br	200e664 <alt_get_errno+0x28>
 200e660:	d0a6f904 	addi	r2,gp,-25628
}
 200e664:	e037883a 	mov	sp,fp
 200e668:	dfc00117 	ldw	ra,4(sp)
 200e66c:	df000017 	ldw	fp,0(sp)
 200e670:	dec00204 	addi	sp,sp,8
 200e674:	f800283a 	ret

0200e678 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200e678:	deffed04 	addi	sp,sp,-76
 200e67c:	dfc01215 	stw	ra,72(sp)
 200e680:	df001115 	stw	fp,68(sp)
 200e684:	df001104 	addi	fp,sp,68
 200e688:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e68c:	e0bfff17 	ldw	r2,-4(fp)
 200e690:	10000816 	blt	r2,zero,200e6b4 <isatty+0x3c>
 200e694:	01400304 	movi	r5,12
 200e698:	e13fff17 	ldw	r4,-4(fp)
 200e69c:	2000a4c0 	call	2000a4c <__mulsi3>
 200e6a0:	1007883a 	mov	r3,r2
 200e6a4:	00808074 	movhi	r2,513
 200e6a8:	10889104 	addi	r2,r2,8772
 200e6ac:	1885883a 	add	r2,r3,r2
 200e6b0:	00000106 	br	200e6b8 <isatty+0x40>
 200e6b4:	0005883a 	mov	r2,zero
 200e6b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 200e6bc:	e0bfef17 	ldw	r2,-68(fp)
 200e6c0:	10000e26 	beq	r2,zero,200e6fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200e6c4:	e0bfef17 	ldw	r2,-68(fp)
 200e6c8:	10800017 	ldw	r2,0(r2)
 200e6cc:	10800817 	ldw	r2,32(r2)
 200e6d0:	1000021e 	bne	r2,zero,200e6dc <isatty+0x64>
    {
      return 1;
 200e6d4:	00800044 	movi	r2,1
 200e6d8:	00000d06 	br	200e710 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200e6dc:	e0bff004 	addi	r2,fp,-64
 200e6e0:	100b883a 	mov	r5,r2
 200e6e4:	e13fff17 	ldw	r4,-4(fp)
 200e6e8:	200e5840 	call	200e584 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200e6ec:	e0bff117 	ldw	r2,-60(fp)
 200e6f0:	10880020 	cmpeqi	r2,r2,8192
 200e6f4:	10803fcc 	andi	r2,r2,255
 200e6f8:	00000506 	br	200e710 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e6fc:	200e63c0 	call	200e63c <alt_get_errno>
 200e700:	1007883a 	mov	r3,r2
 200e704:	00801444 	movi	r2,81
 200e708:	18800015 	stw	r2,0(r3)
    return 0;
 200e70c:	0005883a 	mov	r2,zero
  }
}
 200e710:	e037883a 	mov	sp,fp
 200e714:	dfc00117 	ldw	ra,4(sp)
 200e718:	df000017 	ldw	fp,0(sp)
 200e71c:	dec00204 	addi	sp,sp,8
 200e720:	f800283a 	ret

0200e724 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200e724:	defffc04 	addi	sp,sp,-16
 200e728:	df000315 	stw	fp,12(sp)
 200e72c:	df000304 	addi	fp,sp,12
 200e730:	e13ffd15 	stw	r4,-12(fp)
 200e734:	e17ffe15 	stw	r5,-8(fp)
 200e738:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200e73c:	e0fffe17 	ldw	r3,-8(fp)
 200e740:	e0bffd17 	ldw	r2,-12(fp)
 200e744:	18800c26 	beq	r3,r2,200e778 <alt_load_section+0x54>
  {
    while( to != end )
 200e748:	00000806 	br	200e76c <alt_load_section+0x48>
    {
      *to++ = *from++;
 200e74c:	e0bffe17 	ldw	r2,-8(fp)
 200e750:	10c00104 	addi	r3,r2,4
 200e754:	e0fffe15 	stw	r3,-8(fp)
 200e758:	e0fffd17 	ldw	r3,-12(fp)
 200e75c:	19000104 	addi	r4,r3,4
 200e760:	e13ffd15 	stw	r4,-12(fp)
 200e764:	18c00017 	ldw	r3,0(r3)
 200e768:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200e76c:	e0fffe17 	ldw	r3,-8(fp)
 200e770:	e0bfff17 	ldw	r2,-4(fp)
 200e774:	18bff51e 	bne	r3,r2,200e74c <__alt_data_end+0xfe00e74c>
    {
      *to++ = *from++;
    }
  }
}
 200e778:	0001883a 	nop
 200e77c:	e037883a 	mov	sp,fp
 200e780:	df000017 	ldw	fp,0(sp)
 200e784:	dec00104 	addi	sp,sp,4
 200e788:	f800283a 	ret

0200e78c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200e78c:	defffe04 	addi	sp,sp,-8
 200e790:	dfc00115 	stw	ra,4(sp)
 200e794:	df000015 	stw	fp,0(sp)
 200e798:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200e79c:	01808074 	movhi	r6,513
 200e7a0:	318d3504 	addi	r6,r6,13524
 200e7a4:	01408074 	movhi	r5,513
 200e7a8:	29465e04 	addi	r5,r5,6520
 200e7ac:	01008074 	movhi	r4,513
 200e7b0:	210d3504 	addi	r4,r4,13524
 200e7b4:	200e7240 	call	200e724 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200e7b8:	01808034 	movhi	r6,512
 200e7bc:	31808c04 	addi	r6,r6,560
 200e7c0:	01408034 	movhi	r5,512
 200e7c4:	29400804 	addi	r5,r5,32
 200e7c8:	01008034 	movhi	r4,512
 200e7cc:	21000804 	addi	r4,r4,32
 200e7d0:	200e7240 	call	200e724 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200e7d4:	01808074 	movhi	r6,513
 200e7d8:	31865e04 	addi	r6,r6,6520
 200e7dc:	01408074 	movhi	r5,513
 200e7e0:	29450f04 	addi	r5,r5,5180
 200e7e4:	01008074 	movhi	r4,513
 200e7e8:	21050f04 	addi	r4,r4,5180
 200e7ec:	200e7240 	call	200e724 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200e7f0:	20105180 	call	2010518 <alt_dcache_flush_all>
  alt_icache_flush_all();
 200e7f4:	20109b40 	call	20109b4 <alt_icache_flush_all>
}
 200e7f8:	0001883a 	nop
 200e7fc:	e037883a 	mov	sp,fp
 200e800:	dfc00117 	ldw	ra,4(sp)
 200e804:	df000017 	ldw	fp,0(sp)
 200e808:	dec00204 	addi	sp,sp,8
 200e80c:	f800283a 	ret

0200e810 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e810:	defffe04 	addi	sp,sp,-8
 200e814:	dfc00115 	stw	ra,4(sp)
 200e818:	df000015 	stw	fp,0(sp)
 200e81c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e820:	d0a00b17 	ldw	r2,-32724(gp)
 200e824:	10000326 	beq	r2,zero,200e834 <alt_get_errno+0x24>
 200e828:	d0a00b17 	ldw	r2,-32724(gp)
 200e82c:	103ee83a 	callr	r2
 200e830:	00000106 	br	200e838 <alt_get_errno+0x28>
 200e834:	d0a6f904 	addi	r2,gp,-25628
}
 200e838:	e037883a 	mov	sp,fp
 200e83c:	dfc00117 	ldw	ra,4(sp)
 200e840:	df000017 	ldw	fp,0(sp)
 200e844:	dec00204 	addi	sp,sp,8
 200e848:	f800283a 	ret

0200e84c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200e84c:	defff904 	addi	sp,sp,-28
 200e850:	dfc00615 	stw	ra,24(sp)
 200e854:	df000515 	stw	fp,20(sp)
 200e858:	df000504 	addi	fp,sp,20
 200e85c:	e13ffd15 	stw	r4,-12(fp)
 200e860:	e17ffe15 	stw	r5,-8(fp)
 200e864:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200e868:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e86c:	e0bffd17 	ldw	r2,-12(fp)
 200e870:	10000816 	blt	r2,zero,200e894 <lseek+0x48>
 200e874:	01400304 	movi	r5,12
 200e878:	e13ffd17 	ldw	r4,-12(fp)
 200e87c:	2000a4c0 	call	2000a4c <__mulsi3>
 200e880:	1007883a 	mov	r3,r2
 200e884:	00808074 	movhi	r2,513
 200e888:	10889104 	addi	r2,r2,8772
 200e88c:	1885883a 	add	r2,r3,r2
 200e890:	00000106 	br	200e898 <lseek+0x4c>
 200e894:	0005883a 	mov	r2,zero
 200e898:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 200e89c:	e0bffc17 	ldw	r2,-16(fp)
 200e8a0:	10001026 	beq	r2,zero,200e8e4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200e8a4:	e0bffc17 	ldw	r2,-16(fp)
 200e8a8:	10800017 	ldw	r2,0(r2)
 200e8ac:	10800717 	ldw	r2,28(r2)
 200e8b0:	10000926 	beq	r2,zero,200e8d8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200e8b4:	e0bffc17 	ldw	r2,-16(fp)
 200e8b8:	10800017 	ldw	r2,0(r2)
 200e8bc:	10800717 	ldw	r2,28(r2)
 200e8c0:	e1bfff17 	ldw	r6,-4(fp)
 200e8c4:	e17ffe17 	ldw	r5,-8(fp)
 200e8c8:	e13ffc17 	ldw	r4,-16(fp)
 200e8cc:	103ee83a 	callr	r2
 200e8d0:	e0bffb15 	stw	r2,-20(fp)
 200e8d4:	00000506 	br	200e8ec <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200e8d8:	00bfde84 	movi	r2,-134
 200e8dc:	e0bffb15 	stw	r2,-20(fp)
 200e8e0:	00000206 	br	200e8ec <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 200e8e4:	00bfebc4 	movi	r2,-81
 200e8e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 200e8ec:	e0bffb17 	ldw	r2,-20(fp)
 200e8f0:	1000070e 	bge	r2,zero,200e910 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 200e8f4:	200e8100 	call	200e810 <alt_get_errno>
 200e8f8:	1007883a 	mov	r3,r2
 200e8fc:	e0bffb17 	ldw	r2,-20(fp)
 200e900:	0085c83a 	sub	r2,zero,r2
 200e904:	18800015 	stw	r2,0(r3)
    rc = -1;
 200e908:	00bfffc4 	movi	r2,-1
 200e90c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 200e910:	e0bffb17 	ldw	r2,-20(fp)
}
 200e914:	e037883a 	mov	sp,fp
 200e918:	dfc00117 	ldw	ra,4(sp)
 200e91c:	df000017 	ldw	fp,0(sp)
 200e920:	dec00204 	addi	sp,sp,8
 200e924:	f800283a 	ret

0200e928 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200e928:	defffd04 	addi	sp,sp,-12
 200e92c:	dfc00215 	stw	ra,8(sp)
 200e930:	df000115 	stw	fp,4(sp)
 200e934:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200e938:	0009883a 	mov	r4,zero
 200e93c:	200f0540 	call	200f054 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200e940:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200e944:	200f08c0 	call	200f08c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200e948:	01808074 	movhi	r6,513
 200e94c:	31861104 	addi	r6,r6,6212
 200e950:	01408074 	movhi	r5,513
 200e954:	29461104 	addi	r5,r5,6212
 200e958:	01008074 	movhi	r4,513
 200e95c:	21061104 	addi	r4,r4,6212
 200e960:	2010d580 	call	2010d58 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200e964:	20106180 	call	2010618 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200e968:	01008074 	movhi	r4,513
 200e96c:	21019e04 	addi	r4,r4,1656
 200e970:	20110380 	call	2011038 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200e974:	d0a70017 	ldw	r2,-25600(gp)
 200e978:	d0e70117 	ldw	r3,-25596(gp)
 200e97c:	d1270217 	ldw	r4,-25592(gp)
 200e980:	200d883a 	mov	r6,r4
 200e984:	180b883a 	mov	r5,r3
 200e988:	1009883a 	mov	r4,r2
 200e98c:	200026c0 	call	200026c <main>
 200e990:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200e994:	01000044 	movi	r4,1
 200e998:	200e4440 	call	200e444 <close>
  exit (result);
 200e99c:	e13fff17 	ldw	r4,-4(fp)
 200e9a0:	201104c0 	call	201104c <exit>

0200e9a4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 200e9a4:	defffe04 	addi	sp,sp,-8
 200e9a8:	df000115 	stw	fp,4(sp)
 200e9ac:	df000104 	addi	fp,sp,4
 200e9b0:	e13fff15 	stw	r4,-4(fp)
}
 200e9b4:	0001883a 	nop
 200e9b8:	e037883a 	mov	sp,fp
 200e9bc:	df000017 	ldw	fp,0(sp)
 200e9c0:	dec00104 	addi	sp,sp,4
 200e9c4:	f800283a 	ret

0200e9c8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200e9c8:	defffe04 	addi	sp,sp,-8
 200e9cc:	df000115 	stw	fp,4(sp)
 200e9d0:	df000104 	addi	fp,sp,4
 200e9d4:	e13fff15 	stw	r4,-4(fp)
}
 200e9d8:	0001883a 	nop
 200e9dc:	e037883a 	mov	sp,fp
 200e9e0:	df000017 	ldw	fp,0(sp)
 200e9e4:	dec00104 	addi	sp,sp,4
 200e9e8:	f800283a 	ret

0200e9ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e9ec:	defffe04 	addi	sp,sp,-8
 200e9f0:	dfc00115 	stw	ra,4(sp)
 200e9f4:	df000015 	stw	fp,0(sp)
 200e9f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200e9fc:	d0a00b17 	ldw	r2,-32724(gp)
 200ea00:	10000326 	beq	r2,zero,200ea10 <alt_get_errno+0x24>
 200ea04:	d0a00b17 	ldw	r2,-32724(gp)
 200ea08:	103ee83a 	callr	r2
 200ea0c:	00000106 	br	200ea14 <alt_get_errno+0x28>
 200ea10:	d0a6f904 	addi	r2,gp,-25628
}
 200ea14:	e037883a 	mov	sp,fp
 200ea18:	dfc00117 	ldw	ra,4(sp)
 200ea1c:	df000017 	ldw	fp,0(sp)
 200ea20:	dec00204 	addi	sp,sp,8
 200ea24:	f800283a 	ret

0200ea28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 200ea28:	defffb04 	addi	sp,sp,-20
 200ea2c:	dfc00415 	stw	ra,16(sp)
 200ea30:	df000315 	stw	fp,12(sp)
 200ea34:	dc000215 	stw	r16,8(sp)
 200ea38:	df000304 	addi	fp,sp,12
 200ea3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200ea40:	e0bffe17 	ldw	r2,-8(fp)
 200ea44:	10800217 	ldw	r2,8(r2)
 200ea48:	10d00034 	orhi	r3,r2,16384
 200ea4c:	e0bffe17 	ldw	r2,-8(fp)
 200ea50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200ea54:	e03ffd15 	stw	zero,-12(fp)
 200ea58:	00002306 	br	200eae8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200ea5c:	04008074 	movhi	r16,513
 200ea60:	84089104 	addi	r16,r16,8772
 200ea64:	e0bffd17 	ldw	r2,-12(fp)
 200ea68:	01400304 	movi	r5,12
 200ea6c:	1009883a 	mov	r4,r2
 200ea70:	2000a4c0 	call	2000a4c <__mulsi3>
 200ea74:	8085883a 	add	r2,r16,r2
 200ea78:	10c00017 	ldw	r3,0(r2)
 200ea7c:	e0bffe17 	ldw	r2,-8(fp)
 200ea80:	10800017 	ldw	r2,0(r2)
 200ea84:	1880151e 	bne	r3,r2,200eadc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200ea88:	04008074 	movhi	r16,513
 200ea8c:	84089104 	addi	r16,r16,8772
 200ea90:	e0bffd17 	ldw	r2,-12(fp)
 200ea94:	01400304 	movi	r5,12
 200ea98:	1009883a 	mov	r4,r2
 200ea9c:	2000a4c0 	call	2000a4c <__mulsi3>
 200eaa0:	8085883a 	add	r2,r16,r2
 200eaa4:	10800204 	addi	r2,r2,8
 200eaa8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 200eaac:	10000b0e 	bge	r2,zero,200eadc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 200eab0:	01400304 	movi	r5,12
 200eab4:	e13ffd17 	ldw	r4,-12(fp)
 200eab8:	2000a4c0 	call	2000a4c <__mulsi3>
 200eabc:	1007883a 	mov	r3,r2
 200eac0:	00808074 	movhi	r2,513
 200eac4:	10889104 	addi	r2,r2,8772
 200eac8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200eacc:	e0bffe17 	ldw	r2,-8(fp)
 200ead0:	18800226 	beq	r3,r2,200eadc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 200ead4:	00bffcc4 	movi	r2,-13
 200ead8:	00000806 	br	200eafc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 200eadc:	e0bffd17 	ldw	r2,-12(fp)
 200eae0:	10800044 	addi	r2,r2,1
 200eae4:	e0bffd15 	stw	r2,-12(fp)
 200eae8:	d0a00a17 	ldw	r2,-32728(gp)
 200eaec:	1007883a 	mov	r3,r2
 200eaf0:	e0bffd17 	ldw	r2,-12(fp)
 200eaf4:	18bfd92e 	bgeu	r3,r2,200ea5c <__alt_data_end+0xfe00ea5c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 200eaf8:	0005883a 	mov	r2,zero
}
 200eafc:	e6ffff04 	addi	sp,fp,-4
 200eb00:	dfc00217 	ldw	ra,8(sp)
 200eb04:	df000117 	ldw	fp,4(sp)
 200eb08:	dc000017 	ldw	r16,0(sp)
 200eb0c:	dec00304 	addi	sp,sp,12
 200eb10:	f800283a 	ret

0200eb14 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 200eb14:	defff604 	addi	sp,sp,-40
 200eb18:	dfc00915 	stw	ra,36(sp)
 200eb1c:	df000815 	stw	fp,32(sp)
 200eb20:	df000804 	addi	fp,sp,32
 200eb24:	e13ffd15 	stw	r4,-12(fp)
 200eb28:	e17ffe15 	stw	r5,-8(fp)
 200eb2c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 200eb30:	00bfffc4 	movi	r2,-1
 200eb34:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 200eb38:	00bffb44 	movi	r2,-19
 200eb3c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 200eb40:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 200eb44:	d1600804 	addi	r5,gp,-32736
 200eb48:	e13ffd17 	ldw	r4,-12(fp)
 200eb4c:	20106d80 	call	20106d8 <alt_find_dev>
 200eb50:	e0bff815 	stw	r2,-32(fp)
 200eb54:	e0bff817 	ldw	r2,-32(fp)
 200eb58:	1000051e 	bne	r2,zero,200eb70 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 200eb5c:	e13ffd17 	ldw	r4,-12(fp)
 200eb60:	20107680 	call	2010768 <alt_find_file>
 200eb64:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 200eb68:	00800044 	movi	r2,1
 200eb6c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 200eb70:	e0bff817 	ldw	r2,-32(fp)
 200eb74:	10002b26 	beq	r2,zero,200ec24 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 200eb78:	e13ff817 	ldw	r4,-32(fp)
 200eb7c:	20108f00 	call	20108f0 <alt_get_fd>
 200eb80:	e0bff915 	stw	r2,-28(fp)
 200eb84:	e0bff917 	ldw	r2,-28(fp)
 200eb88:	1000030e 	bge	r2,zero,200eb98 <open+0x84>
    {
      status = index;
 200eb8c:	e0bff917 	ldw	r2,-28(fp)
 200eb90:	e0bffa15 	stw	r2,-24(fp)
 200eb94:	00002506 	br	200ec2c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 200eb98:	01400304 	movi	r5,12
 200eb9c:	e13ff917 	ldw	r4,-28(fp)
 200eba0:	2000a4c0 	call	2000a4c <__mulsi3>
 200eba4:	1007883a 	mov	r3,r2
 200eba8:	00808074 	movhi	r2,513
 200ebac:	10889104 	addi	r2,r2,8772
 200ebb0:	1885883a 	add	r2,r3,r2
 200ebb4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 200ebb8:	e0fffe17 	ldw	r3,-8(fp)
 200ebbc:	00900034 	movhi	r2,16384
 200ebc0:	10bfffc4 	addi	r2,r2,-1
 200ebc4:	1886703a 	and	r3,r3,r2
 200ebc8:	e0bffc17 	ldw	r2,-16(fp)
 200ebcc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 200ebd0:	e0bffb17 	ldw	r2,-20(fp)
 200ebd4:	1000051e 	bne	r2,zero,200ebec <open+0xd8>
 200ebd8:	e13ffc17 	ldw	r4,-16(fp)
 200ebdc:	200ea280 	call	200ea28 <alt_file_locked>
 200ebe0:	e0bffa15 	stw	r2,-24(fp)
 200ebe4:	e0bffa17 	ldw	r2,-24(fp)
 200ebe8:	10001016 	blt	r2,zero,200ec2c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200ebec:	e0bff817 	ldw	r2,-32(fp)
 200ebf0:	10800317 	ldw	r2,12(r2)
 200ebf4:	10000826 	beq	r2,zero,200ec18 <open+0x104>
 200ebf8:	e0bff817 	ldw	r2,-32(fp)
 200ebfc:	10800317 	ldw	r2,12(r2)
 200ec00:	e1ffff17 	ldw	r7,-4(fp)
 200ec04:	e1bffe17 	ldw	r6,-8(fp)
 200ec08:	e17ffd17 	ldw	r5,-12(fp)
 200ec0c:	e13ffc17 	ldw	r4,-16(fp)
 200ec10:	103ee83a 	callr	r2
 200ec14:	00000106 	br	200ec1c <open+0x108>
 200ec18:	0005883a 	mov	r2,zero
 200ec1c:	e0bffa15 	stw	r2,-24(fp)
 200ec20:	00000206 	br	200ec2c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 200ec24:	00bffb44 	movi	r2,-19
 200ec28:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 200ec2c:	e0bffa17 	ldw	r2,-24(fp)
 200ec30:	1000090e 	bge	r2,zero,200ec58 <open+0x144>
  {
    alt_release_fd (index);  
 200ec34:	e13ff917 	ldw	r4,-28(fp)
 200ec38:	200edb00 	call	200edb0 <alt_release_fd>
    ALT_ERRNO = -status;
 200ec3c:	200e9ec0 	call	200e9ec <alt_get_errno>
 200ec40:	1007883a 	mov	r3,r2
 200ec44:	e0bffa17 	ldw	r2,-24(fp)
 200ec48:	0085c83a 	sub	r2,zero,r2
 200ec4c:	18800015 	stw	r2,0(r3)
    return -1;
 200ec50:	00bfffc4 	movi	r2,-1
 200ec54:	00000106 	br	200ec5c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 200ec58:	e0bff917 	ldw	r2,-28(fp)
}
 200ec5c:	e037883a 	mov	sp,fp
 200ec60:	dfc00117 	ldw	ra,4(sp)
 200ec64:	df000017 	ldw	fp,0(sp)
 200ec68:	dec00204 	addi	sp,sp,8
 200ec6c:	f800283a 	ret

0200ec70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200ec70:	defffe04 	addi	sp,sp,-8
 200ec74:	dfc00115 	stw	ra,4(sp)
 200ec78:	df000015 	stw	fp,0(sp)
 200ec7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200ec80:	d0a00b17 	ldw	r2,-32724(gp)
 200ec84:	10000326 	beq	r2,zero,200ec94 <alt_get_errno+0x24>
 200ec88:	d0a00b17 	ldw	r2,-32724(gp)
 200ec8c:	103ee83a 	callr	r2
 200ec90:	00000106 	br	200ec98 <alt_get_errno+0x28>
 200ec94:	d0a6f904 	addi	r2,gp,-25628
}
 200ec98:	e037883a 	mov	sp,fp
 200ec9c:	dfc00117 	ldw	ra,4(sp)
 200eca0:	df000017 	ldw	fp,0(sp)
 200eca4:	dec00204 	addi	sp,sp,8
 200eca8:	f800283a 	ret

0200ecac <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200ecac:	defff904 	addi	sp,sp,-28
 200ecb0:	dfc00615 	stw	ra,24(sp)
 200ecb4:	df000515 	stw	fp,20(sp)
 200ecb8:	df000504 	addi	fp,sp,20
 200ecbc:	e13ffd15 	stw	r4,-12(fp)
 200ecc0:	e17ffe15 	stw	r5,-8(fp)
 200ecc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200ecc8:	e0bffd17 	ldw	r2,-12(fp)
 200eccc:	10000816 	blt	r2,zero,200ecf0 <read+0x44>
 200ecd0:	01400304 	movi	r5,12
 200ecd4:	e13ffd17 	ldw	r4,-12(fp)
 200ecd8:	2000a4c0 	call	2000a4c <__mulsi3>
 200ecdc:	1007883a 	mov	r3,r2
 200ece0:	00808074 	movhi	r2,513
 200ece4:	10889104 	addi	r2,r2,8772
 200ece8:	1885883a 	add	r2,r3,r2
 200ecec:	00000106 	br	200ecf4 <read+0x48>
 200ecf0:	0005883a 	mov	r2,zero
 200ecf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200ecf8:	e0bffb17 	ldw	r2,-20(fp)
 200ecfc:	10002226 	beq	r2,zero,200ed88 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200ed00:	e0bffb17 	ldw	r2,-20(fp)
 200ed04:	10800217 	ldw	r2,8(r2)
 200ed08:	108000cc 	andi	r2,r2,3
 200ed0c:	10800060 	cmpeqi	r2,r2,1
 200ed10:	1000181e 	bne	r2,zero,200ed74 <read+0xc8>
        (fd->dev->read))
 200ed14:	e0bffb17 	ldw	r2,-20(fp)
 200ed18:	10800017 	ldw	r2,0(r2)
 200ed1c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200ed20:	10001426 	beq	r2,zero,200ed74 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200ed24:	e0bffb17 	ldw	r2,-20(fp)
 200ed28:	10800017 	ldw	r2,0(r2)
 200ed2c:	10800517 	ldw	r2,20(r2)
 200ed30:	e0ffff17 	ldw	r3,-4(fp)
 200ed34:	180d883a 	mov	r6,r3
 200ed38:	e17ffe17 	ldw	r5,-8(fp)
 200ed3c:	e13ffb17 	ldw	r4,-20(fp)
 200ed40:	103ee83a 	callr	r2
 200ed44:	e0bffc15 	stw	r2,-16(fp)
 200ed48:	e0bffc17 	ldw	r2,-16(fp)
 200ed4c:	1000070e 	bge	r2,zero,200ed6c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 200ed50:	200ec700 	call	200ec70 <alt_get_errno>
 200ed54:	1007883a 	mov	r3,r2
 200ed58:	e0bffc17 	ldw	r2,-16(fp)
 200ed5c:	0085c83a 	sub	r2,zero,r2
 200ed60:	18800015 	stw	r2,0(r3)
          return -1;
 200ed64:	00bfffc4 	movi	r2,-1
 200ed68:	00000c06 	br	200ed9c <read+0xf0>
        }
        return rval;
 200ed6c:	e0bffc17 	ldw	r2,-16(fp)
 200ed70:	00000a06 	br	200ed9c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200ed74:	200ec700 	call	200ec70 <alt_get_errno>
 200ed78:	1007883a 	mov	r3,r2
 200ed7c:	00800344 	movi	r2,13
 200ed80:	18800015 	stw	r2,0(r3)
 200ed84:	00000406 	br	200ed98 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200ed88:	200ec700 	call	200ec70 <alt_get_errno>
 200ed8c:	1007883a 	mov	r3,r2
 200ed90:	00801444 	movi	r2,81
 200ed94:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200ed98:	00bfffc4 	movi	r2,-1
}
 200ed9c:	e037883a 	mov	sp,fp
 200eda0:	dfc00117 	ldw	ra,4(sp)
 200eda4:	df000017 	ldw	fp,0(sp)
 200eda8:	dec00204 	addi	sp,sp,8
 200edac:	f800283a 	ret

0200edb0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200edb0:	defffc04 	addi	sp,sp,-16
 200edb4:	dfc00315 	stw	ra,12(sp)
 200edb8:	df000215 	stw	fp,8(sp)
 200edbc:	dc000115 	stw	r16,4(sp)
 200edc0:	df000204 	addi	fp,sp,8
 200edc4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 200edc8:	e0bffe17 	ldw	r2,-8(fp)
 200edcc:	108000d0 	cmplti	r2,r2,3
 200edd0:	1000111e 	bne	r2,zero,200ee18 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 200edd4:	04008074 	movhi	r16,513
 200edd8:	84089104 	addi	r16,r16,8772
 200eddc:	e0bffe17 	ldw	r2,-8(fp)
 200ede0:	01400304 	movi	r5,12
 200ede4:	1009883a 	mov	r4,r2
 200ede8:	2000a4c0 	call	2000a4c <__mulsi3>
 200edec:	8085883a 	add	r2,r16,r2
 200edf0:	10800204 	addi	r2,r2,8
 200edf4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200edf8:	04008074 	movhi	r16,513
 200edfc:	84089104 	addi	r16,r16,8772
 200ee00:	e0bffe17 	ldw	r2,-8(fp)
 200ee04:	01400304 	movi	r5,12
 200ee08:	1009883a 	mov	r4,r2
 200ee0c:	2000a4c0 	call	2000a4c <__mulsi3>
 200ee10:	8085883a 	add	r2,r16,r2
 200ee14:	10000015 	stw	zero,0(r2)
  }
}
 200ee18:	0001883a 	nop
 200ee1c:	e6ffff04 	addi	sp,fp,-4
 200ee20:	dfc00217 	ldw	ra,8(sp)
 200ee24:	df000117 	ldw	fp,4(sp)
 200ee28:	dc000017 	ldw	r16,0(sp)
 200ee2c:	dec00304 	addi	sp,sp,12
 200ee30:	f800283a 	ret

0200ee34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200ee34:	defff904 	addi	sp,sp,-28
 200ee38:	df000615 	stw	fp,24(sp)
 200ee3c:	df000604 	addi	fp,sp,24
 200ee40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ee44:	0005303a 	rdctl	r2,status
 200ee48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ee4c:	e0fffe17 	ldw	r3,-8(fp)
 200ee50:	00bfff84 	movi	r2,-2
 200ee54:	1884703a 	and	r2,r3,r2
 200ee58:	1001703a 	wrctl	status,r2
  
  return context;
 200ee5c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200ee60:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200ee64:	d0a00c17 	ldw	r2,-32720(gp)
 200ee68:	10c000c4 	addi	r3,r2,3
 200ee6c:	00bfff04 	movi	r2,-4
 200ee70:	1884703a 	and	r2,r3,r2
 200ee74:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200ee78:	d0e00c17 	ldw	r3,-32720(gp)
 200ee7c:	e0bfff17 	ldw	r2,-4(fp)
 200ee80:	1887883a 	add	r3,r3,r2
 200ee84:	00810034 	movhi	r2,1024
 200ee88:	10800004 	addi	r2,r2,0
 200ee8c:	10c0062e 	bgeu	r2,r3,200eea8 <sbrk+0x74>
 200ee90:	e0bffb17 	ldw	r2,-20(fp)
 200ee94:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ee98:	e0bffa17 	ldw	r2,-24(fp)
 200ee9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200eea0:	00bfffc4 	movi	r2,-1
 200eea4:	00000b06 	br	200eed4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200eea8:	d0a00c17 	ldw	r2,-32720(gp)
 200eeac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 200eeb0:	d0e00c17 	ldw	r3,-32720(gp)
 200eeb4:	e0bfff17 	ldw	r2,-4(fp)
 200eeb8:	1885883a 	add	r2,r3,r2
 200eebc:	d0a00c15 	stw	r2,-32720(gp)
 200eec0:	e0bffb17 	ldw	r2,-20(fp)
 200eec4:	e0bffc15 	stw	r2,-16(fp)
 200eec8:	e0bffc17 	ldw	r2,-16(fp)
 200eecc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200eed0:	e0bffd17 	ldw	r2,-12(fp)
} 
 200eed4:	e037883a 	mov	sp,fp
 200eed8:	df000017 	ldw	fp,0(sp)
 200eedc:	dec00104 	addi	sp,sp,4
 200eee0:	f800283a 	ret

0200eee4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200eee4:	defffe04 	addi	sp,sp,-8
 200eee8:	dfc00115 	stw	ra,4(sp)
 200eeec:	df000015 	stw	fp,0(sp)
 200eef0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 200eef4:	d0a00b17 	ldw	r2,-32724(gp)
 200eef8:	10000326 	beq	r2,zero,200ef08 <alt_get_errno+0x24>
 200eefc:	d0a00b17 	ldw	r2,-32724(gp)
 200ef00:	103ee83a 	callr	r2
 200ef04:	00000106 	br	200ef0c <alt_get_errno+0x28>
 200ef08:	d0a6f904 	addi	r2,gp,-25628
}
 200ef0c:	e037883a 	mov	sp,fp
 200ef10:	dfc00117 	ldw	ra,4(sp)
 200ef14:	df000017 	ldw	fp,0(sp)
 200ef18:	dec00204 	addi	sp,sp,8
 200ef1c:	f800283a 	ret

0200ef20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200ef20:	defff904 	addi	sp,sp,-28
 200ef24:	dfc00615 	stw	ra,24(sp)
 200ef28:	df000515 	stw	fp,20(sp)
 200ef2c:	df000504 	addi	fp,sp,20
 200ef30:	e13ffd15 	stw	r4,-12(fp)
 200ef34:	e17ffe15 	stw	r5,-8(fp)
 200ef38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200ef3c:	e0bffd17 	ldw	r2,-12(fp)
 200ef40:	10000816 	blt	r2,zero,200ef64 <write+0x44>
 200ef44:	01400304 	movi	r5,12
 200ef48:	e13ffd17 	ldw	r4,-12(fp)
 200ef4c:	2000a4c0 	call	2000a4c <__mulsi3>
 200ef50:	1007883a 	mov	r3,r2
 200ef54:	00808074 	movhi	r2,513
 200ef58:	10889104 	addi	r2,r2,8772
 200ef5c:	1885883a 	add	r2,r3,r2
 200ef60:	00000106 	br	200ef68 <write+0x48>
 200ef64:	0005883a 	mov	r2,zero
 200ef68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200ef6c:	e0bffb17 	ldw	r2,-20(fp)
 200ef70:	10002126 	beq	r2,zero,200eff8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200ef74:	e0bffb17 	ldw	r2,-20(fp)
 200ef78:	10800217 	ldw	r2,8(r2)
 200ef7c:	108000cc 	andi	r2,r2,3
 200ef80:	10001826 	beq	r2,zero,200efe4 <write+0xc4>
 200ef84:	e0bffb17 	ldw	r2,-20(fp)
 200ef88:	10800017 	ldw	r2,0(r2)
 200ef8c:	10800617 	ldw	r2,24(r2)
 200ef90:	10001426 	beq	r2,zero,200efe4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200ef94:	e0bffb17 	ldw	r2,-20(fp)
 200ef98:	10800017 	ldw	r2,0(r2)
 200ef9c:	10800617 	ldw	r2,24(r2)
 200efa0:	e0ffff17 	ldw	r3,-4(fp)
 200efa4:	180d883a 	mov	r6,r3
 200efa8:	e17ffe17 	ldw	r5,-8(fp)
 200efac:	e13ffb17 	ldw	r4,-20(fp)
 200efb0:	103ee83a 	callr	r2
 200efb4:	e0bffc15 	stw	r2,-16(fp)
 200efb8:	e0bffc17 	ldw	r2,-16(fp)
 200efbc:	1000070e 	bge	r2,zero,200efdc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 200efc0:	200eee40 	call	200eee4 <alt_get_errno>
 200efc4:	1007883a 	mov	r3,r2
 200efc8:	e0bffc17 	ldw	r2,-16(fp)
 200efcc:	0085c83a 	sub	r2,zero,r2
 200efd0:	18800015 	stw	r2,0(r3)
        return -1;
 200efd4:	00bfffc4 	movi	r2,-1
 200efd8:	00000c06 	br	200f00c <write+0xec>
      }
      return rval;
 200efdc:	e0bffc17 	ldw	r2,-16(fp)
 200efe0:	00000a06 	br	200f00c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200efe4:	200eee40 	call	200eee4 <alt_get_errno>
 200efe8:	1007883a 	mov	r3,r2
 200efec:	00800344 	movi	r2,13
 200eff0:	18800015 	stw	r2,0(r3)
 200eff4:	00000406 	br	200f008 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200eff8:	200eee40 	call	200eee4 <alt_get_errno>
 200effc:	1007883a 	mov	r3,r2
 200f000:	00801444 	movi	r2,81
 200f004:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200f008:	00bfffc4 	movi	r2,-1
}
 200f00c:	e037883a 	mov	sp,fp
 200f010:	dfc00117 	ldw	ra,4(sp)
 200f014:	df000017 	ldw	fp,0(sp)
 200f018:	dec00204 	addi	sp,sp,8
 200f01c:	f800283a 	ret

0200f020 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 200f020:	defffd04 	addi	sp,sp,-12
 200f024:	dfc00215 	stw	ra,8(sp)
 200f028:	df000115 	stw	fp,4(sp)
 200f02c:	df000104 	addi	fp,sp,4
 200f030:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 200f034:	d1600804 	addi	r5,gp,-32736
 200f038:	e13fff17 	ldw	r4,-4(fp)
 200f03c:	20105740 	call	2010574 <alt_dev_llist_insert>
}
 200f040:	e037883a 	mov	sp,fp
 200f044:	dfc00117 	ldw	ra,4(sp)
 200f048:	df000017 	ldw	fp,0(sp)
 200f04c:	dec00204 	addi	sp,sp,8
 200f050:	f800283a 	ret

0200f054 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200f054:	defffd04 	addi	sp,sp,-12
 200f058:	dfc00215 	stw	ra,8(sp)
 200f05c:	df000115 	stw	fp,4(sp)
 200f060:	df000104 	addi	fp,sp,4
 200f064:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 200f068:	2010f780 	call	2010f78 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 200f06c:	00800044 	movi	r2,1
 200f070:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200f074:	0001883a 	nop
 200f078:	e037883a 	mov	sp,fp
 200f07c:	dfc00117 	ldw	ra,4(sp)
 200f080:	df000017 	ldw	fp,0(sp)
 200f084:	dec00204 	addi	sp,sp,8
 200f088:	f800283a 	ret

0200f08c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200f08c:	defffe04 	addi	sp,sp,-8
 200f090:	dfc00115 	stw	ra,4(sp)
 200f094:	df000015 	stw	fp,0(sp)
 200f098:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 200f09c:	000d883a 	mov	r6,zero
 200f0a0:	000b883a 	mov	r5,zero
 200f0a4:	01008074 	movhi	r4,513
 200f0a8:	2108fb04 	addi	r4,r4,9196
 200f0ac:	200f2540 	call	200f254 <altera_avalon_jtag_uart_init>
 200f0b0:	01008074 	movhi	r4,513
 200f0b4:	2108f104 	addi	r4,r4,9156
 200f0b8:	200f0200 	call	200f020 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 200f0bc:	00c00044 	movi	r3,1
 200f0c0:	00810034 	movhi	r2,1024
 200f0c4:	10840004 	addi	r2,r2,4096
 200f0c8:	10c00035 	stwio	r3,0(r2)
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 200f0cc:	01008074 	movhi	r4,513
 200f0d0:	210d0904 	addi	r4,r4,13348
 200f0d4:	20108700 	call	2010870 <alt_fs_reg>
}
 200f0d8:	0001883a 	nop
 200f0dc:	e037883a 	mov	sp,fp
 200f0e0:	dfc00117 	ldw	ra,4(sp)
 200f0e4:	df000017 	ldw	fp,0(sp)
 200f0e8:	dec00204 	addi	sp,sp,8
 200f0ec:	f800283a 	ret

0200f0f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200f0f0:	defffa04 	addi	sp,sp,-24
 200f0f4:	dfc00515 	stw	ra,20(sp)
 200f0f8:	df000415 	stw	fp,16(sp)
 200f0fc:	df000404 	addi	fp,sp,16
 200f100:	e13ffd15 	stw	r4,-12(fp)
 200f104:	e17ffe15 	stw	r5,-8(fp)
 200f108:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f10c:	e0bffd17 	ldw	r2,-12(fp)
 200f110:	10800017 	ldw	r2,0(r2)
 200f114:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200f118:	e0bffc17 	ldw	r2,-16(fp)
 200f11c:	10c00a04 	addi	r3,r2,40
 200f120:	e0bffd17 	ldw	r2,-12(fp)
 200f124:	10800217 	ldw	r2,8(r2)
 200f128:	100f883a 	mov	r7,r2
 200f12c:	e1bfff17 	ldw	r6,-4(fp)
 200f130:	e17ffe17 	ldw	r5,-8(fp)
 200f134:	1809883a 	mov	r4,r3
 200f138:	200f7180 	call	200f718 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 200f13c:	e037883a 	mov	sp,fp
 200f140:	dfc00117 	ldw	ra,4(sp)
 200f144:	df000017 	ldw	fp,0(sp)
 200f148:	dec00204 	addi	sp,sp,8
 200f14c:	f800283a 	ret

0200f150 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 200f150:	defffa04 	addi	sp,sp,-24
 200f154:	dfc00515 	stw	ra,20(sp)
 200f158:	df000415 	stw	fp,16(sp)
 200f15c:	df000404 	addi	fp,sp,16
 200f160:	e13ffd15 	stw	r4,-12(fp)
 200f164:	e17ffe15 	stw	r5,-8(fp)
 200f168:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f16c:	e0bffd17 	ldw	r2,-12(fp)
 200f170:	10800017 	ldw	r2,0(r2)
 200f174:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200f178:	e0bffc17 	ldw	r2,-16(fp)
 200f17c:	10c00a04 	addi	r3,r2,40
 200f180:	e0bffd17 	ldw	r2,-12(fp)
 200f184:	10800217 	ldw	r2,8(r2)
 200f188:	100f883a 	mov	r7,r2
 200f18c:	e1bfff17 	ldw	r6,-4(fp)
 200f190:	e17ffe17 	ldw	r5,-8(fp)
 200f194:	1809883a 	mov	r4,r3
 200f198:	200f9340 	call	200f934 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 200f19c:	e037883a 	mov	sp,fp
 200f1a0:	dfc00117 	ldw	ra,4(sp)
 200f1a4:	df000017 	ldw	fp,0(sp)
 200f1a8:	dec00204 	addi	sp,sp,8
 200f1ac:	f800283a 	ret

0200f1b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 200f1b0:	defffc04 	addi	sp,sp,-16
 200f1b4:	dfc00315 	stw	ra,12(sp)
 200f1b8:	df000215 	stw	fp,8(sp)
 200f1bc:	df000204 	addi	fp,sp,8
 200f1c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 200f1c4:	e0bfff17 	ldw	r2,-4(fp)
 200f1c8:	10800017 	ldw	r2,0(r2)
 200f1cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 200f1d0:	e0bffe17 	ldw	r2,-8(fp)
 200f1d4:	10c00a04 	addi	r3,r2,40
 200f1d8:	e0bfff17 	ldw	r2,-4(fp)
 200f1dc:	10800217 	ldw	r2,8(r2)
 200f1e0:	100b883a 	mov	r5,r2
 200f1e4:	1809883a 	mov	r4,r3
 200f1e8:	200f5c00 	call	200f5c0 <altera_avalon_jtag_uart_close>
}
 200f1ec:	e037883a 	mov	sp,fp
 200f1f0:	dfc00117 	ldw	ra,4(sp)
 200f1f4:	df000017 	ldw	fp,0(sp)
 200f1f8:	dec00204 	addi	sp,sp,8
 200f1fc:	f800283a 	ret

0200f200 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 200f200:	defffa04 	addi	sp,sp,-24
 200f204:	dfc00515 	stw	ra,20(sp)
 200f208:	df000415 	stw	fp,16(sp)
 200f20c:	df000404 	addi	fp,sp,16
 200f210:	e13ffd15 	stw	r4,-12(fp)
 200f214:	e17ffe15 	stw	r5,-8(fp)
 200f218:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 200f21c:	e0bffd17 	ldw	r2,-12(fp)
 200f220:	10800017 	ldw	r2,0(r2)
 200f224:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 200f228:	e0bffc17 	ldw	r2,-16(fp)
 200f22c:	10800a04 	addi	r2,r2,40
 200f230:	e1bfff17 	ldw	r6,-4(fp)
 200f234:	e17ffe17 	ldw	r5,-8(fp)
 200f238:	1009883a 	mov	r4,r2
 200f23c:	200f6280 	call	200f628 <altera_avalon_jtag_uart_ioctl>
}
 200f240:	e037883a 	mov	sp,fp
 200f244:	dfc00117 	ldw	ra,4(sp)
 200f248:	df000017 	ldw	fp,0(sp)
 200f24c:	dec00204 	addi	sp,sp,8
 200f250:	f800283a 	ret

0200f254 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200f254:	defffa04 	addi	sp,sp,-24
 200f258:	dfc00515 	stw	ra,20(sp)
 200f25c:	df000415 	stw	fp,16(sp)
 200f260:	df000404 	addi	fp,sp,16
 200f264:	e13ffd15 	stw	r4,-12(fp)
 200f268:	e17ffe15 	stw	r5,-8(fp)
 200f26c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f270:	e0bffd17 	ldw	r2,-12(fp)
 200f274:	00c00044 	movi	r3,1
 200f278:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 200f27c:	e0bffd17 	ldw	r2,-12(fp)
 200f280:	10800017 	ldw	r2,0(r2)
 200f284:	10800104 	addi	r2,r2,4
 200f288:	1007883a 	mov	r3,r2
 200f28c:	e0bffd17 	ldw	r2,-12(fp)
 200f290:	10800817 	ldw	r2,32(r2)
 200f294:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200f298:	e0bffe17 	ldw	r2,-8(fp)
 200f29c:	e0ffff17 	ldw	r3,-4(fp)
 200f2a0:	d8000015 	stw	zero,0(sp)
 200f2a4:	e1fffd17 	ldw	r7,-12(fp)
 200f2a8:	01808074 	movhi	r6,513
 200f2ac:	31bcc504 	addi	r6,r6,-3308
 200f2b0:	180b883a 	mov	r5,r3
 200f2b4:	1009883a 	mov	r4,r2
 200f2b8:	20109d40 	call	20109d4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 200f2bc:	e0bffd17 	ldw	r2,-12(fp)
 200f2c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 200f2c4:	e0bffd17 	ldw	r2,-12(fp)
 200f2c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200f2cc:	d0e70417 	ldw	r3,-25584(gp)
 200f2d0:	e1fffd17 	ldw	r7,-12(fp)
 200f2d4:	01808074 	movhi	r6,513
 200f2d8:	31bd4804 	addi	r6,r6,-2784
 200f2dc:	180b883a 	mov	r5,r3
 200f2e0:	1009883a 	mov	r4,r2
 200f2e4:	20103ec0 	call	20103ec <alt_alarm_start>
 200f2e8:	1000040e 	bge	r2,zero,200f2fc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 200f2ec:	e0fffd17 	ldw	r3,-12(fp)
 200f2f0:	00a00034 	movhi	r2,32768
 200f2f4:	10bfffc4 	addi	r2,r2,-1
 200f2f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 200f2fc:	0001883a 	nop
 200f300:	e037883a 	mov	sp,fp
 200f304:	dfc00117 	ldw	ra,4(sp)
 200f308:	df000017 	ldw	fp,0(sp)
 200f30c:	dec00204 	addi	sp,sp,8
 200f310:	f800283a 	ret

0200f314 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200f314:	defff804 	addi	sp,sp,-32
 200f318:	df000715 	stw	fp,28(sp)
 200f31c:	df000704 	addi	fp,sp,28
 200f320:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200f324:	e0bfff17 	ldw	r2,-4(fp)
 200f328:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 200f32c:	e0bffb17 	ldw	r2,-20(fp)
 200f330:	10800017 	ldw	r2,0(r2)
 200f334:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f338:	e0bffc17 	ldw	r2,-16(fp)
 200f33c:	10800104 	addi	r2,r2,4
 200f340:	10800037 	ldwio	r2,0(r2)
 200f344:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 200f348:	e0bffd17 	ldw	r2,-12(fp)
 200f34c:	1080c00c 	andi	r2,r2,768
 200f350:	10006d26 	beq	r2,zero,200f508 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 200f354:	e0bffd17 	ldw	r2,-12(fp)
 200f358:	1080400c 	andi	r2,r2,256
 200f35c:	10003526 	beq	r2,zero,200f434 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 200f360:	00800074 	movhi	r2,1
 200f364:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f368:	e0bffb17 	ldw	r2,-20(fp)
 200f36c:	10800a17 	ldw	r2,40(r2)
 200f370:	10800044 	addi	r2,r2,1
 200f374:	1081ffcc 	andi	r2,r2,2047
 200f378:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200f37c:	e0bffb17 	ldw	r2,-20(fp)
 200f380:	10c00b17 	ldw	r3,44(r2)
 200f384:	e0bffe17 	ldw	r2,-8(fp)
 200f388:	18801526 	beq	r3,r2,200f3e0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200f38c:	e0bffc17 	ldw	r2,-16(fp)
 200f390:	10800037 	ldwio	r2,0(r2)
 200f394:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 200f398:	e0bff917 	ldw	r2,-28(fp)
 200f39c:	10a0000c 	andi	r2,r2,32768
 200f3a0:	10001126 	beq	r2,zero,200f3e8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 200f3a4:	e0bffb17 	ldw	r2,-20(fp)
 200f3a8:	10800a17 	ldw	r2,40(r2)
 200f3ac:	e0fff917 	ldw	r3,-28(fp)
 200f3b0:	1809883a 	mov	r4,r3
 200f3b4:	e0fffb17 	ldw	r3,-20(fp)
 200f3b8:	1885883a 	add	r2,r3,r2
 200f3bc:	10800e04 	addi	r2,r2,56
 200f3c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f3c4:	e0bffb17 	ldw	r2,-20(fp)
 200f3c8:	10800a17 	ldw	r2,40(r2)
 200f3cc:	10800044 	addi	r2,r2,1
 200f3d0:	10c1ffcc 	andi	r3,r2,2047
 200f3d4:	e0bffb17 	ldw	r2,-20(fp)
 200f3d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 200f3dc:	003fe206 	br	200f368 <__alt_data_end+0xfe00f368>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 200f3e0:	0001883a 	nop
 200f3e4:	00000106 	br	200f3ec <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 200f3e8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 200f3ec:	e0bff917 	ldw	r2,-28(fp)
 200f3f0:	10bfffec 	andhi	r2,r2,65535
 200f3f4:	10000f26 	beq	r2,zero,200f434 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f3f8:	e0bffb17 	ldw	r2,-20(fp)
 200f3fc:	10c00817 	ldw	r3,32(r2)
 200f400:	00bfff84 	movi	r2,-2
 200f404:	1886703a 	and	r3,r3,r2
 200f408:	e0bffb17 	ldw	r2,-20(fp)
 200f40c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 200f410:	e0bffc17 	ldw	r2,-16(fp)
 200f414:	10800104 	addi	r2,r2,4
 200f418:	1007883a 	mov	r3,r2
 200f41c:	e0bffb17 	ldw	r2,-20(fp)
 200f420:	10800817 	ldw	r2,32(r2)
 200f424:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f428:	e0bffc17 	ldw	r2,-16(fp)
 200f42c:	10800104 	addi	r2,r2,4
 200f430:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 200f434:	e0bffd17 	ldw	r2,-12(fp)
 200f438:	1080800c 	andi	r2,r2,512
 200f43c:	103fbe26 	beq	r2,zero,200f338 <__alt_data_end+0xfe00f338>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 200f440:	e0bffd17 	ldw	r2,-12(fp)
 200f444:	1004d43a 	srli	r2,r2,16
 200f448:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 200f44c:	00001406 	br	200f4a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 200f450:	e0bffc17 	ldw	r2,-16(fp)
 200f454:	e0fffb17 	ldw	r3,-20(fp)
 200f458:	18c00d17 	ldw	r3,52(r3)
 200f45c:	e13ffb17 	ldw	r4,-20(fp)
 200f460:	20c7883a 	add	r3,r4,r3
 200f464:	18c20e04 	addi	r3,r3,2104
 200f468:	18c00003 	ldbu	r3,0(r3)
 200f46c:	18c03fcc 	andi	r3,r3,255
 200f470:	18c0201c 	xori	r3,r3,128
 200f474:	18ffe004 	addi	r3,r3,-128
 200f478:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f47c:	e0bffb17 	ldw	r2,-20(fp)
 200f480:	10800d17 	ldw	r2,52(r2)
 200f484:	10800044 	addi	r2,r2,1
 200f488:	10c1ffcc 	andi	r3,r2,2047
 200f48c:	e0bffb17 	ldw	r2,-20(fp)
 200f490:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 200f494:	e0bffa17 	ldw	r2,-24(fp)
 200f498:	10bfffc4 	addi	r2,r2,-1
 200f49c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 200f4a0:	e0bffa17 	ldw	r2,-24(fp)
 200f4a4:	10000526 	beq	r2,zero,200f4bc <altera_avalon_jtag_uart_irq+0x1a8>
 200f4a8:	e0bffb17 	ldw	r2,-20(fp)
 200f4ac:	10c00d17 	ldw	r3,52(r2)
 200f4b0:	e0bffb17 	ldw	r2,-20(fp)
 200f4b4:	10800c17 	ldw	r2,48(r2)
 200f4b8:	18bfe51e 	bne	r3,r2,200f450 <__alt_data_end+0xfe00f450>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 200f4bc:	e0bffa17 	ldw	r2,-24(fp)
 200f4c0:	103f9d26 	beq	r2,zero,200f338 <__alt_data_end+0xfe00f338>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200f4c4:	e0bffb17 	ldw	r2,-20(fp)
 200f4c8:	10c00817 	ldw	r3,32(r2)
 200f4cc:	00bfff44 	movi	r2,-3
 200f4d0:	1886703a 	and	r3,r3,r2
 200f4d4:	e0bffb17 	ldw	r2,-20(fp)
 200f4d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200f4dc:	e0bffb17 	ldw	r2,-20(fp)
 200f4e0:	10800017 	ldw	r2,0(r2)
 200f4e4:	10800104 	addi	r2,r2,4
 200f4e8:	1007883a 	mov	r3,r2
 200f4ec:	e0bffb17 	ldw	r2,-20(fp)
 200f4f0:	10800817 	ldw	r2,32(r2)
 200f4f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 200f4f8:	e0bffc17 	ldw	r2,-16(fp)
 200f4fc:	10800104 	addi	r2,r2,4
 200f500:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 200f504:	003f8c06 	br	200f338 <__alt_data_end+0xfe00f338>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 200f508:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 200f50c:	0001883a 	nop
 200f510:	e037883a 	mov	sp,fp
 200f514:	df000017 	ldw	fp,0(sp)
 200f518:	dec00104 	addi	sp,sp,4
 200f51c:	f800283a 	ret

0200f520 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 200f520:	defff804 	addi	sp,sp,-32
 200f524:	df000715 	stw	fp,28(sp)
 200f528:	df000704 	addi	fp,sp,28
 200f52c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 200f530:	e0bffb17 	ldw	r2,-20(fp)
 200f534:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 200f538:	e0bff917 	ldw	r2,-28(fp)
 200f53c:	10800017 	ldw	r2,0(r2)
 200f540:	10800104 	addi	r2,r2,4
 200f544:	10800037 	ldwio	r2,0(r2)
 200f548:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 200f54c:	e0bffa17 	ldw	r2,-24(fp)
 200f550:	1081000c 	andi	r2,r2,1024
 200f554:	10000b26 	beq	r2,zero,200f584 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 200f558:	e0bff917 	ldw	r2,-28(fp)
 200f55c:	10800017 	ldw	r2,0(r2)
 200f560:	10800104 	addi	r2,r2,4
 200f564:	1007883a 	mov	r3,r2
 200f568:	e0bff917 	ldw	r2,-28(fp)
 200f56c:	10800817 	ldw	r2,32(r2)
 200f570:	10810014 	ori	r2,r2,1024
 200f574:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 200f578:	e0bff917 	ldw	r2,-28(fp)
 200f57c:	10000915 	stw	zero,36(r2)
 200f580:	00000a06 	br	200f5ac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 200f584:	e0bff917 	ldw	r2,-28(fp)
 200f588:	10c00917 	ldw	r3,36(r2)
 200f58c:	00a00034 	movhi	r2,32768
 200f590:	10bfff04 	addi	r2,r2,-4
 200f594:	10c00536 	bltu	r2,r3,200f5ac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 200f598:	e0bff917 	ldw	r2,-28(fp)
 200f59c:	10800917 	ldw	r2,36(r2)
 200f5a0:	10c00044 	addi	r3,r2,1
 200f5a4:	e0bff917 	ldw	r2,-28(fp)
 200f5a8:	10c00915 	stw	r3,36(r2)
 200f5ac:	d0a70417 	ldw	r2,-25584(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 200f5b0:	e037883a 	mov	sp,fp
 200f5b4:	df000017 	ldw	fp,0(sp)
 200f5b8:	dec00104 	addi	sp,sp,4
 200f5bc:	f800283a 	ret

0200f5c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 200f5c0:	defffd04 	addi	sp,sp,-12
 200f5c4:	df000215 	stw	fp,8(sp)
 200f5c8:	df000204 	addi	fp,sp,8
 200f5cc:	e13ffe15 	stw	r4,-8(fp)
 200f5d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200f5d4:	00000506 	br	200f5ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 200f5d8:	e0bfff17 	ldw	r2,-4(fp)
 200f5dc:	1090000c 	andi	r2,r2,16384
 200f5e0:	10000226 	beq	r2,zero,200f5ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 200f5e4:	00bffd44 	movi	r2,-11
 200f5e8:	00000b06 	br	200f618 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 200f5ec:	e0bffe17 	ldw	r2,-8(fp)
 200f5f0:	10c00d17 	ldw	r3,52(r2)
 200f5f4:	e0bffe17 	ldw	r2,-8(fp)
 200f5f8:	10800c17 	ldw	r2,48(r2)
 200f5fc:	18800526 	beq	r3,r2,200f614 <altera_avalon_jtag_uart_close+0x54>
 200f600:	e0bffe17 	ldw	r2,-8(fp)
 200f604:	10c00917 	ldw	r3,36(r2)
 200f608:	e0bffe17 	ldw	r2,-8(fp)
 200f60c:	10800117 	ldw	r2,4(r2)
 200f610:	18bff136 	bltu	r3,r2,200f5d8 <__alt_data_end+0xfe00f5d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 200f614:	0005883a 	mov	r2,zero
}
 200f618:	e037883a 	mov	sp,fp
 200f61c:	df000017 	ldw	fp,0(sp)
 200f620:	dec00104 	addi	sp,sp,4
 200f624:	f800283a 	ret

0200f628 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 200f628:	defffa04 	addi	sp,sp,-24
 200f62c:	df000515 	stw	fp,20(sp)
 200f630:	df000504 	addi	fp,sp,20
 200f634:	e13ffd15 	stw	r4,-12(fp)
 200f638:	e17ffe15 	stw	r5,-8(fp)
 200f63c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 200f640:	00bff9c4 	movi	r2,-25
 200f644:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 200f648:	e0bffe17 	ldw	r2,-8(fp)
 200f64c:	10da8060 	cmpeqi	r3,r2,27137
 200f650:	1800031e 	bne	r3,zero,200f660 <altera_avalon_jtag_uart_ioctl+0x38>
 200f654:	109a80a0 	cmpeqi	r2,r2,27138
 200f658:	1000181e 	bne	r2,zero,200f6bc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 200f65c:	00002906 	br	200f704 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 200f660:	e0bffd17 	ldw	r2,-12(fp)
 200f664:	10c00117 	ldw	r3,4(r2)
 200f668:	00a00034 	movhi	r2,32768
 200f66c:	10bfffc4 	addi	r2,r2,-1
 200f670:	18802126 	beq	r3,r2,200f6f8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 200f674:	e0bfff17 	ldw	r2,-4(fp)
 200f678:	10800017 	ldw	r2,0(r2)
 200f67c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 200f680:	e0bffc17 	ldw	r2,-16(fp)
 200f684:	10800090 	cmplti	r2,r2,2
 200f688:	1000061e 	bne	r2,zero,200f6a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 200f68c:	e0fffc17 	ldw	r3,-16(fp)
 200f690:	00a00034 	movhi	r2,32768
 200f694:	10bfffc4 	addi	r2,r2,-1
 200f698:	18800226 	beq	r3,r2,200f6a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 200f69c:	e0bffc17 	ldw	r2,-16(fp)
 200f6a0:	00000206 	br	200f6ac <altera_avalon_jtag_uart_ioctl+0x84>
 200f6a4:	00a00034 	movhi	r2,32768
 200f6a8:	10bfff84 	addi	r2,r2,-2
 200f6ac:	e0fffd17 	ldw	r3,-12(fp)
 200f6b0:	18800115 	stw	r2,4(r3)
      rc = 0;
 200f6b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200f6b8:	00000f06 	br	200f6f8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 200f6bc:	e0bffd17 	ldw	r2,-12(fp)
 200f6c0:	10c00117 	ldw	r3,4(r2)
 200f6c4:	00a00034 	movhi	r2,32768
 200f6c8:	10bfffc4 	addi	r2,r2,-1
 200f6cc:	18800c26 	beq	r3,r2,200f700 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 200f6d0:	e0bffd17 	ldw	r2,-12(fp)
 200f6d4:	10c00917 	ldw	r3,36(r2)
 200f6d8:	e0bffd17 	ldw	r2,-12(fp)
 200f6dc:	10800117 	ldw	r2,4(r2)
 200f6e0:	1885803a 	cmpltu	r2,r3,r2
 200f6e4:	10c03fcc 	andi	r3,r2,255
 200f6e8:	e0bfff17 	ldw	r2,-4(fp)
 200f6ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
 200f6f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 200f6f4:	00000206 	br	200f700 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 200f6f8:	0001883a 	nop
 200f6fc:	00000106 	br	200f704 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 200f700:	0001883a 	nop

  default:
    break;
  }

  return rc;
 200f704:	e0bffb17 	ldw	r2,-20(fp)
}
 200f708:	e037883a 	mov	sp,fp
 200f70c:	df000017 	ldw	fp,0(sp)
 200f710:	dec00104 	addi	sp,sp,4
 200f714:	f800283a 	ret

0200f718 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 200f718:	defff304 	addi	sp,sp,-52
 200f71c:	dfc00c15 	stw	ra,48(sp)
 200f720:	df000b15 	stw	fp,44(sp)
 200f724:	df000b04 	addi	fp,sp,44
 200f728:	e13ffc15 	stw	r4,-16(fp)
 200f72c:	e17ffd15 	stw	r5,-12(fp)
 200f730:	e1bffe15 	stw	r6,-8(fp)
 200f734:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 200f738:	e0bffd17 	ldw	r2,-12(fp)
 200f73c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200f740:	00004706 	br	200f860 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 200f744:	e0bffc17 	ldw	r2,-16(fp)
 200f748:	10800a17 	ldw	r2,40(r2)
 200f74c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 200f750:	e0bffc17 	ldw	r2,-16(fp)
 200f754:	10800b17 	ldw	r2,44(r2)
 200f758:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 200f75c:	e0fff717 	ldw	r3,-36(fp)
 200f760:	e0bff817 	ldw	r2,-32(fp)
 200f764:	18800536 	bltu	r3,r2,200f77c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 200f768:	e0fff717 	ldw	r3,-36(fp)
 200f76c:	e0bff817 	ldw	r2,-32(fp)
 200f770:	1885c83a 	sub	r2,r3,r2
 200f774:	e0bff615 	stw	r2,-40(fp)
 200f778:	00000406 	br	200f78c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 200f77c:	00c20004 	movi	r3,2048
 200f780:	e0bff817 	ldw	r2,-32(fp)
 200f784:	1885c83a 	sub	r2,r3,r2
 200f788:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200f78c:	e0bff617 	ldw	r2,-40(fp)
 200f790:	10001e26 	beq	r2,zero,200f80c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 200f794:	e0fffe17 	ldw	r3,-8(fp)
 200f798:	e0bff617 	ldw	r2,-40(fp)
 200f79c:	1880022e 	bgeu	r3,r2,200f7a8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 200f7a0:	e0bffe17 	ldw	r2,-8(fp)
 200f7a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 200f7a8:	e0bffc17 	ldw	r2,-16(fp)
 200f7ac:	10c00e04 	addi	r3,r2,56
 200f7b0:	e0bff817 	ldw	r2,-32(fp)
 200f7b4:	1885883a 	add	r2,r3,r2
 200f7b8:	e1bff617 	ldw	r6,-40(fp)
 200f7bc:	100b883a 	mov	r5,r2
 200f7c0:	e13ff517 	ldw	r4,-44(fp)
 200f7c4:	2002ae40 	call	2002ae4 <memcpy>
      ptr   += n;
 200f7c8:	e0fff517 	ldw	r3,-44(fp)
 200f7cc:	e0bff617 	ldw	r2,-40(fp)
 200f7d0:	1885883a 	add	r2,r3,r2
 200f7d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 200f7d8:	e0fffe17 	ldw	r3,-8(fp)
 200f7dc:	e0bff617 	ldw	r2,-40(fp)
 200f7e0:	1885c83a 	sub	r2,r3,r2
 200f7e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200f7e8:	e0fff817 	ldw	r3,-32(fp)
 200f7ec:	e0bff617 	ldw	r2,-40(fp)
 200f7f0:	1885883a 	add	r2,r3,r2
 200f7f4:	10c1ffcc 	andi	r3,r2,2047
 200f7f8:	e0bffc17 	ldw	r2,-16(fp)
 200f7fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 200f800:	e0bffe17 	ldw	r2,-8(fp)
 200f804:	00bfcf16 	blt	zero,r2,200f744 <__alt_data_end+0xfe00f744>
 200f808:	00000106 	br	200f810 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 200f80c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 200f810:	e0fff517 	ldw	r3,-44(fp)
 200f814:	e0bffd17 	ldw	r2,-12(fp)
 200f818:	1880141e 	bne	r3,r2,200f86c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 200f81c:	e0bfff17 	ldw	r2,-4(fp)
 200f820:	1090000c 	andi	r2,r2,16384
 200f824:	1000131e 	bne	r2,zero,200f874 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 200f828:	0001883a 	nop
 200f82c:	e0bffc17 	ldw	r2,-16(fp)
 200f830:	10c00a17 	ldw	r3,40(r2)
 200f834:	e0bff717 	ldw	r2,-36(fp)
 200f838:	1880051e 	bne	r3,r2,200f850 <altera_avalon_jtag_uart_read+0x138>
 200f83c:	e0bffc17 	ldw	r2,-16(fp)
 200f840:	10c00917 	ldw	r3,36(r2)
 200f844:	e0bffc17 	ldw	r2,-16(fp)
 200f848:	10800117 	ldw	r2,4(r2)
 200f84c:	18bff736 	bltu	r3,r2,200f82c <__alt_data_end+0xfe00f82c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 200f850:	e0bffc17 	ldw	r2,-16(fp)
 200f854:	10c00a17 	ldw	r3,40(r2)
 200f858:	e0bff717 	ldw	r2,-36(fp)
 200f85c:	18800726 	beq	r3,r2,200f87c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 200f860:	e0bffe17 	ldw	r2,-8(fp)
 200f864:	00bfb716 	blt	zero,r2,200f744 <__alt_data_end+0xfe00f744>
 200f868:	00000506 	br	200f880 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 200f86c:	0001883a 	nop
 200f870:	00000306 	br	200f880 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 200f874:	0001883a 	nop
 200f878:	00000106 	br	200f880 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 200f87c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 200f880:	e0fff517 	ldw	r3,-44(fp)
 200f884:	e0bffd17 	ldw	r2,-12(fp)
 200f888:	18801826 	beq	r3,r2,200f8ec <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f88c:	0005303a 	rdctl	r2,status
 200f890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f894:	e0fffb17 	ldw	r3,-20(fp)
 200f898:	00bfff84 	movi	r2,-2
 200f89c:	1884703a 	and	r2,r3,r2
 200f8a0:	1001703a 	wrctl	status,r2
  
  return context;
 200f8a4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 200f8a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 200f8ac:	e0bffc17 	ldw	r2,-16(fp)
 200f8b0:	10800817 	ldw	r2,32(r2)
 200f8b4:	10c00054 	ori	r3,r2,1
 200f8b8:	e0bffc17 	ldw	r2,-16(fp)
 200f8bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200f8c0:	e0bffc17 	ldw	r2,-16(fp)
 200f8c4:	10800017 	ldw	r2,0(r2)
 200f8c8:	10800104 	addi	r2,r2,4
 200f8cc:	1007883a 	mov	r3,r2
 200f8d0:	e0bffc17 	ldw	r2,-16(fp)
 200f8d4:	10800817 	ldw	r2,32(r2)
 200f8d8:	18800035 	stwio	r2,0(r3)
 200f8dc:	e0bffa17 	ldw	r2,-24(fp)
 200f8e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f8e4:	e0bff917 	ldw	r2,-28(fp)
 200f8e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 200f8ec:	e0fff517 	ldw	r3,-44(fp)
 200f8f0:	e0bffd17 	ldw	r2,-12(fp)
 200f8f4:	18800426 	beq	r3,r2,200f908 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 200f8f8:	e0fff517 	ldw	r3,-44(fp)
 200f8fc:	e0bffd17 	ldw	r2,-12(fp)
 200f900:	1885c83a 	sub	r2,r3,r2
 200f904:	00000606 	br	200f920 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 200f908:	e0bfff17 	ldw	r2,-4(fp)
 200f90c:	1090000c 	andi	r2,r2,16384
 200f910:	10000226 	beq	r2,zero,200f91c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 200f914:	00bffd44 	movi	r2,-11
 200f918:	00000106 	br	200f920 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 200f91c:	00bffec4 	movi	r2,-5
}
 200f920:	e037883a 	mov	sp,fp
 200f924:	dfc00117 	ldw	ra,4(sp)
 200f928:	df000017 	ldw	fp,0(sp)
 200f92c:	dec00204 	addi	sp,sp,8
 200f930:	f800283a 	ret

0200f934 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 200f934:	defff304 	addi	sp,sp,-52
 200f938:	dfc00c15 	stw	ra,48(sp)
 200f93c:	df000b15 	stw	fp,44(sp)
 200f940:	df000b04 	addi	fp,sp,44
 200f944:	e13ffc15 	stw	r4,-16(fp)
 200f948:	e17ffd15 	stw	r5,-12(fp)
 200f94c:	e1bffe15 	stw	r6,-8(fp)
 200f950:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 200f954:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 200f958:	e0bffd17 	ldw	r2,-12(fp)
 200f95c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200f960:	00003706 	br	200fa40 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 200f964:	e0bffc17 	ldw	r2,-16(fp)
 200f968:	10800c17 	ldw	r2,48(r2)
 200f96c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 200f970:	e0bffc17 	ldw	r2,-16(fp)
 200f974:	10800d17 	ldw	r2,52(r2)
 200f978:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 200f97c:	e0fff917 	ldw	r3,-28(fp)
 200f980:	e0bff517 	ldw	r2,-44(fp)
 200f984:	1880062e 	bgeu	r3,r2,200f9a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 200f988:	e0fff517 	ldw	r3,-44(fp)
 200f98c:	e0bff917 	ldw	r2,-28(fp)
 200f990:	1885c83a 	sub	r2,r3,r2
 200f994:	10bfffc4 	addi	r2,r2,-1
 200f998:	e0bff615 	stw	r2,-40(fp)
 200f99c:	00000b06 	br	200f9cc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 200f9a0:	e0bff517 	ldw	r2,-44(fp)
 200f9a4:	10000526 	beq	r2,zero,200f9bc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 200f9a8:	00c20004 	movi	r3,2048
 200f9ac:	e0bff917 	ldw	r2,-28(fp)
 200f9b0:	1885c83a 	sub	r2,r3,r2
 200f9b4:	e0bff615 	stw	r2,-40(fp)
 200f9b8:	00000406 	br	200f9cc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 200f9bc:	00c1ffc4 	movi	r3,2047
 200f9c0:	e0bff917 	ldw	r2,-28(fp)
 200f9c4:	1885c83a 	sub	r2,r3,r2
 200f9c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 200f9cc:	e0bff617 	ldw	r2,-40(fp)
 200f9d0:	10001e26 	beq	r2,zero,200fa4c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 200f9d4:	e0fffe17 	ldw	r3,-8(fp)
 200f9d8:	e0bff617 	ldw	r2,-40(fp)
 200f9dc:	1880022e 	bgeu	r3,r2,200f9e8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 200f9e0:	e0bffe17 	ldw	r2,-8(fp)
 200f9e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 200f9e8:	e0bffc17 	ldw	r2,-16(fp)
 200f9ec:	10c20e04 	addi	r3,r2,2104
 200f9f0:	e0bff917 	ldw	r2,-28(fp)
 200f9f4:	1885883a 	add	r2,r3,r2
 200f9f8:	e1bff617 	ldw	r6,-40(fp)
 200f9fc:	e17ffd17 	ldw	r5,-12(fp)
 200fa00:	1009883a 	mov	r4,r2
 200fa04:	2002ae40 	call	2002ae4 <memcpy>
      ptr   += n;
 200fa08:	e0fffd17 	ldw	r3,-12(fp)
 200fa0c:	e0bff617 	ldw	r2,-40(fp)
 200fa10:	1885883a 	add	r2,r3,r2
 200fa14:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200fa18:	e0fffe17 	ldw	r3,-8(fp)
 200fa1c:	e0bff617 	ldw	r2,-40(fp)
 200fa20:	1885c83a 	sub	r2,r3,r2
 200fa24:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200fa28:	e0fff917 	ldw	r3,-28(fp)
 200fa2c:	e0bff617 	ldw	r2,-40(fp)
 200fa30:	1885883a 	add	r2,r3,r2
 200fa34:	10c1ffcc 	andi	r3,r2,2047
 200fa38:	e0bffc17 	ldw	r2,-16(fp)
 200fa3c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 200fa40:	e0bffe17 	ldw	r2,-8(fp)
 200fa44:	00bfc716 	blt	zero,r2,200f964 <__alt_data_end+0xfe00f964>
 200fa48:	00000106 	br	200fa50 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 200fa4c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fa50:	0005303a 	rdctl	r2,status
 200fa54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fa58:	e0fffb17 	ldw	r3,-20(fp)
 200fa5c:	00bfff84 	movi	r2,-2
 200fa60:	1884703a 	and	r2,r3,r2
 200fa64:	1001703a 	wrctl	status,r2
  
  return context;
 200fa68:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 200fa6c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 200fa70:	e0bffc17 	ldw	r2,-16(fp)
 200fa74:	10800817 	ldw	r2,32(r2)
 200fa78:	10c00094 	ori	r3,r2,2
 200fa7c:	e0bffc17 	ldw	r2,-16(fp)
 200fa80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 200fa84:	e0bffc17 	ldw	r2,-16(fp)
 200fa88:	10800017 	ldw	r2,0(r2)
 200fa8c:	10800104 	addi	r2,r2,4
 200fa90:	1007883a 	mov	r3,r2
 200fa94:	e0bffc17 	ldw	r2,-16(fp)
 200fa98:	10800817 	ldw	r2,32(r2)
 200fa9c:	18800035 	stwio	r2,0(r3)
 200faa0:	e0bffa17 	ldw	r2,-24(fp)
 200faa4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200faa8:	e0bff817 	ldw	r2,-32(fp)
 200faac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 200fab0:	e0bffe17 	ldw	r2,-8(fp)
 200fab4:	0080100e 	bge	zero,r2,200faf8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 200fab8:	e0bfff17 	ldw	r2,-4(fp)
 200fabc:	1090000c 	andi	r2,r2,16384
 200fac0:	1000101e 	bne	r2,zero,200fb04 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 200fac4:	0001883a 	nop
 200fac8:	e0bffc17 	ldw	r2,-16(fp)
 200facc:	10c00d17 	ldw	r3,52(r2)
 200fad0:	e0bff517 	ldw	r2,-44(fp)
 200fad4:	1880051e 	bne	r3,r2,200faec <altera_avalon_jtag_uart_write+0x1b8>
 200fad8:	e0bffc17 	ldw	r2,-16(fp)
 200fadc:	10c00917 	ldw	r3,36(r2)
 200fae0:	e0bffc17 	ldw	r2,-16(fp)
 200fae4:	10800117 	ldw	r2,4(r2)
 200fae8:	18bff736 	bltu	r3,r2,200fac8 <__alt_data_end+0xfe00fac8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 200faec:	e0bffc17 	ldw	r2,-16(fp)
 200faf0:	10800917 	ldw	r2,36(r2)
 200faf4:	1000051e 	bne	r2,zero,200fb0c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 200faf8:	e0bffe17 	ldw	r2,-8(fp)
 200fafc:	00bfd016 	blt	zero,r2,200fa40 <__alt_data_end+0xfe00fa40>
 200fb00:	00000306 	br	200fb10 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 200fb04:	0001883a 	nop
 200fb08:	00000106 	br	200fb10 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 200fb0c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 200fb10:	e0fffd17 	ldw	r3,-12(fp)
 200fb14:	e0bff717 	ldw	r2,-36(fp)
 200fb18:	18800426 	beq	r3,r2,200fb2c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 200fb1c:	e0fffd17 	ldw	r3,-12(fp)
 200fb20:	e0bff717 	ldw	r2,-36(fp)
 200fb24:	1885c83a 	sub	r2,r3,r2
 200fb28:	00000606 	br	200fb44 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 200fb2c:	e0bfff17 	ldw	r2,-4(fp)
 200fb30:	1090000c 	andi	r2,r2,16384
 200fb34:	10000226 	beq	r2,zero,200fb40 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 200fb38:	00bffd44 	movi	r2,-11
 200fb3c:	00000106 	br	200fb44 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 200fb40:	00bffec4 	movi	r2,-5
}
 200fb44:	e037883a 	mov	sp,fp
 200fb48:	dfc00117 	ldw	ra,4(sp)
 200fb4c:	df000017 	ldw	fp,0(sp)
 200fb50:	dec00204 	addi	sp,sp,8
 200fb54:	f800283a 	ret

0200fb58 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 200fb58:	defff904 	addi	sp,sp,-28
 200fb5c:	df000615 	stw	fp,24(sp)
 200fb60:	df000604 	addi	fp,sp,24
 200fb64:	e13ffe15 	stw	r4,-8(fp)
 200fb68:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 200fb6c:	e03ffa15 	stw	zero,-24(fp)
 200fb70:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 200fb74:	000b883a 	mov	r5,zero
 200fb78:	e13ffe17 	ldw	r4,-8(fp)
 200fb7c:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
 200fb80:	e13fff17 	ldw	r4,-4(fp)
 200fb84:	2008913a 	slli	r4,r4,4
 200fb88:	200b883a 	mov	r5,r4
 200fb8c:	e13ffe17 	ldw	r4,-8(fp)
 200fb90:	2149883a 	add	r4,r4,r5
 200fb94:	21000037 	ldwio	r4,0(r4)
 200fb98:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 200fb9c:	e13fff17 	ldw	r4,-4(fp)
 200fba0:	2008913a 	slli	r4,r4,4
 200fba4:	21000104 	addi	r4,r4,4
 200fba8:	200b883a 	mov	r5,r4
 200fbac:	e13ffe17 	ldw	r4,-8(fp)
 200fbb0:	2149883a 	add	r4,r4,r5
 200fbb4:	21000037 	ldwio	r4,0(r4)
 200fbb8:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 200fbbc:	e13ffd17 	ldw	r4,-12(fp)
 200fbc0:	2011883a 	mov	r8,r4
 200fbc4:	0013883a 	mov	r9,zero
 200fbc8:	4006983a 	sll	r3,r8,zero
 200fbcc:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
 200fbd0:	e13ffc17 	ldw	r4,-16(fp)
 200fbd4:	200d883a 	mov	r6,r4
 200fbd8:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 200fbdc:	1188b03a 	or	r4,r2,r6
 200fbe0:	e13ffa15 	stw	r4,-24(fp)
 200fbe4:	19c4b03a 	or	r2,r3,r7
 200fbe8:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 200fbec:	e0bffa17 	ldw	r2,-24(fp)
 200fbf0:	e0fffb17 	ldw	r3,-20(fp)
 200fbf4:	1009883a 	mov	r4,r2
 200fbf8:	180b883a 	mov	r5,r3
}
 200fbfc:	2005883a 	mov	r2,r4
 200fc00:	2807883a 	mov	r3,r5
 200fc04:	e037883a 	mov	sp,fp
 200fc08:	df000017 	ldw	fp,0(sp)
 200fc0c:	dec00104 	addi	sp,sp,4
 200fc10:	f800283a 	ret

0200fc14 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 200fc14:	defffd04 	addi	sp,sp,-12
 200fc18:	dfc00215 	stw	ra,8(sp)
 200fc1c:	df000115 	stw	fp,4(sp)
 200fc20:	df000104 	addi	fp,sp,4
 200fc24:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 200fc28:	000b883a 	mov	r5,zero
 200fc2c:	e13fff17 	ldw	r4,-4(fp)
 200fc30:	200fb580 	call	200fb58 <perf_get_section_time>
 200fc34:	100b883a 	mov	r5,r2
 200fc38:	180d883a 	mov	r6,r3
 200fc3c:	2807883a 	mov	r3,r5
 200fc40:	3009883a 	mov	r4,r6
}
 200fc44:	1805883a 	mov	r2,r3
 200fc48:	2007883a 	mov	r3,r4
 200fc4c:	e037883a 	mov	sp,fp
 200fc50:	dfc00117 	ldw	ra,4(sp)
 200fc54:	df000017 	ldw	fp,0(sp)
 200fc58:	dec00204 	addi	sp,sp,8
 200fc5c:	f800283a 	ret

0200fc60 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 200fc60:	defffd04 	addi	sp,sp,-12
 200fc64:	df000215 	stw	fp,8(sp)
 200fc68:	df000204 	addi	fp,sp,8
 200fc6c:	e13ffe15 	stw	r4,-8(fp)
 200fc70:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 200fc74:	e0bfff17 	ldw	r2,-4(fp)
 200fc78:	1004913a 	slli	r2,r2,4
 200fc7c:	10800204 	addi	r2,r2,8
 200fc80:	1007883a 	mov	r3,r2
 200fc84:	e0bffe17 	ldw	r2,-8(fp)
 200fc88:	10c5883a 	add	r2,r2,r3
 200fc8c:	10800037 	ldwio	r2,0(r2)
}
 200fc90:	e037883a 	mov	sp,fp
 200fc94:	df000017 	ldw	fp,0(sp)
 200fc98:	dec00104 	addi	sp,sp,4
 200fc9c:	f800283a 	ret

0200fca0 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 200fca0:	deffff04 	addi	sp,sp,-4
 200fca4:	df000015 	stw	fp,0(sp)
 200fca8:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
 200fcac:	00810034 	movhi	r2,1024
 200fcb0:	10840004 	addi	r2,r2,4096
#else
    return (void*)0;
#endif
}
 200fcb4:	e037883a 	mov	sp,fp
 200fcb8:	df000017 	ldw	fp,0(sp)
 200fcbc:	dec00104 	addi	sp,sp,4
 200fcc0:	f800283a 	ret

0200fcc4 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 200fcc4:	deffff04 	addi	sp,sp,-4
 200fcc8:	df000015 	stw	fp,0(sp)
 200fccc:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 200fcd0:	0080bef4 	movhi	r2,763
 200fcd4:	10bc2004 	addi	r2,r2,-3968
}
 200fcd8:	e037883a 	mov	sp,fp
 200fcdc:	df000017 	ldw	fp,0(sp)
 200fce0:	dec00104 	addi	sp,sp,4
 200fce4:	f800283a 	ret

0200fce8 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 200fce8:	defff404 	addi	sp,sp,-48
 200fcec:	df000b15 	stw	fp,44(sp)
 200fcf0:	df000b04 	addi	fp,sp,44
 200fcf4:	e13ffc15 	stw	r4,-16(fp)
 200fcf8:	e17ffd15 	stw	r5,-12(fp)
 200fcfc:	e1bffe15 	stw	r6,-8(fp)
 200fd00:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 200fd04:	e0bffc17 	ldw	r2,-16(fp)
 200fd08:	10800017 	ldw	r2,0(r2)
 200fd0c:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 200fd10:	e0bff517 	ldw	r2,-44(fp)
 200fd14:	10800217 	ldw	r2,8(r2)
 200fd18:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 200fd1c:	e0bff617 	ldw	r2,-40(fp)
 200fd20:	10bfffc4 	addi	r2,r2,-1
 200fd24:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
 200fd28:	e0bffb17 	ldw	r2,-20(fp)
 200fd2c:	10800044 	addi	r2,r2,1
 200fd30:	e0bffb15 	stw	r2,-20(fp)
 200fd34:	e0bffb17 	ldw	r2,-20(fp)
 200fd38:	10800003 	ldbu	r2,0(r2)
 200fd3c:	10803fcc 	andi	r2,r2,255
 200fd40:	1080201c 	xori	r2,r2,128
 200fd44:	10bfe004 	addi	r2,r2,-128
 200fd48:	103ff71e 	bne	r2,zero,200fd28 <__alt_data_end+0xfe00fd28>
    ;

  return ptr - string;
 200fd4c:	e0fffb17 	ldw	r3,-20(fp)
 200fd50:	e0bff617 	ldw	r2,-40(fp)
 200fd54:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 200fd58:	10800044 	addi	r2,r2,1
 200fd5c:	1007883a 	mov	r3,r2
 200fd60:	e0bffd17 	ldw	r2,-12(fp)
 200fd64:	10c5883a 	add	r2,r2,r3
 200fd68:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
 200fd6c:	d0a00d04 	addi	r2,gp,-32716
 200fd70:	1007883a 	mov	r3,r2
  r4 = (int)name;
 200fd74:	e0bffd17 	ldw	r2,-12(fp)
 200fd78:	1009883a 	mov	r4,r2
  r5 = flags;
 200fd7c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
 200fd80:	e1bfff17 	ldw	r6,-4(fp)
 200fd84:	e0bffd17 	ldw	r2,-12(fp)
 200fd88:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 200fd8c:	e0bff917 	ldw	r2,-28(fp)
 200fd90:	10bfffc4 	addi	r2,r2,-1
 200fd94:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 200fd98:	e0bffa17 	ldw	r2,-24(fp)
 200fd9c:	10800044 	addi	r2,r2,1
 200fda0:	e0bffa15 	stw	r2,-24(fp)
 200fda4:	e0bffa17 	ldw	r2,-24(fp)
 200fda8:	10800003 	ldbu	r2,0(r2)
 200fdac:	10803fcc 	andi	r2,r2,255
 200fdb0:	1080201c 	xori	r2,r2,128
 200fdb4:	10bfe004 	addi	r2,r2,-128
 200fdb8:	103ff71e 	bne	r2,zero,200fd98 <__alt_data_end+0xfe00fd98>
    ;

  return ptr - string;
 200fdbc:	e1fffa17 	ldw	r7,-24(fp)
 200fdc0:	e0bff917 	ldw	r2,-28(fp)
 200fdc4:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 200fdc8:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
 200fdcc:	003da07a 	break	1

  handle = (void *)r2;
 200fdd0:	e0bff715 	stw	r2,-36(fp)
  error = r3;
 200fdd4:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
 200fdd8:	e0bff817 	ldw	r2,-32(fp)
 200fddc:	1000031e 	bne	r2,zero,200fdec <alt_hostfs_open+0x104>
    fd->priv = handle;
 200fde0:	e0bffc17 	ldw	r2,-16(fp)
 200fde4:	e0fff717 	ldw	r3,-36(fp)
 200fde8:	10c00115 	stw	r3,4(r2)

  return -error;
 200fdec:	e0bff817 	ldw	r2,-32(fp)
 200fdf0:	0085c83a 	sub	r2,zero,r2
}
 200fdf4:	e037883a 	mov	sp,fp
 200fdf8:	df000017 	ldw	fp,0(sp)
 200fdfc:	dec00104 	addi	sp,sp,4
 200fe00:	f800283a 	ret

0200fe04 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 200fe04:	defffd04 	addi	sp,sp,-12
 200fe08:	df000215 	stw	fp,8(sp)
 200fe0c:	df000204 	addi	fp,sp,8
 200fe10:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
 200fe14:	d0a01004 	addi	r2,gp,-32704
 200fe18:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 200fe1c:	e0bfff17 	ldw	r2,-4(fp)
 200fe20:	10800117 	ldw	r2,4(r2)
 200fe24:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
 200fe28:	003da07a 	break	1

  error = r3;
 200fe2c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
 200fe30:	e0bffe17 	ldw	r2,-8(fp)
 200fe34:	0085c83a 	sub	r2,zero,r2
}
 200fe38:	e037883a 	mov	sp,fp
 200fe3c:	df000017 	ldw	fp,0(sp)
 200fe40:	dec00104 	addi	sp,sp,4
 200fe44:	f800283a 	ret

0200fe48 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 200fe48:	defffa04 	addi	sp,sp,-24
 200fe4c:	df000515 	stw	fp,20(sp)
 200fe50:	df000504 	addi	fp,sp,20
 200fe54:	e13ffd15 	stw	r4,-12(fp)
 200fe58:	e17ffe15 	stw	r5,-8(fp)
 200fe5c:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
 200fe60:	d0a01304 	addi	r2,gp,-32692
 200fe64:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 200fe68:	e0bffd17 	ldw	r2,-12(fp)
 200fe6c:	10800117 	ldw	r2,4(r2)
 200fe70:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 200fe74:	e0bffe17 	ldw	r2,-8(fp)
 200fe78:	100b883a 	mov	r5,r2
  r6 = len;
 200fe7c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 200fe80:	003da07a 	break	1

  rc = r2;
 200fe84:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 200fe88:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 200fe8c:	e0bffc17 	ldw	r2,-16(fp)
 200fe90:	10000326 	beq	r2,zero,200fea0 <alt_hostfs_read+0x58>
 200fe94:	e0bffc17 	ldw	r2,-16(fp)
 200fe98:	0085c83a 	sub	r2,zero,r2
 200fe9c:	00000106 	br	200fea4 <alt_hostfs_read+0x5c>
 200fea0:	e0bffb17 	ldw	r2,-20(fp)
}
 200fea4:	e037883a 	mov	sp,fp
 200fea8:	df000017 	ldw	fp,0(sp)
 200feac:	dec00104 	addi	sp,sp,4
 200feb0:	f800283a 	ret

0200feb4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 200feb4:	defffa04 	addi	sp,sp,-24
 200feb8:	df000515 	stw	fp,20(sp)
 200febc:	df000504 	addi	fp,sp,20
 200fec0:	e13ffd15 	stw	r4,-12(fp)
 200fec4:	e17ffe15 	stw	r5,-8(fp)
 200fec8:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 200fecc:	d0a01604 	addi	r2,gp,-32680
 200fed0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 200fed4:	e0bffd17 	ldw	r2,-12(fp)
 200fed8:	10800117 	ldw	r2,4(r2)
 200fedc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 200fee0:	e0bffe17 	ldw	r2,-8(fp)
 200fee4:	100b883a 	mov	r5,r2
  r6 = len;
 200fee8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 200feec:	003da07a 	break	1

  rc = r2;
 200fef0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 200fef4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 200fef8:	e0bffc17 	ldw	r2,-16(fp)
 200fefc:	10000326 	beq	r2,zero,200ff0c <alt_hostfs_write+0x58>
 200ff00:	e0bffc17 	ldw	r2,-16(fp)
 200ff04:	0085c83a 	sub	r2,zero,r2
 200ff08:	00000106 	br	200ff10 <alt_hostfs_write+0x5c>
 200ff0c:	e0bffb17 	ldw	r2,-20(fp)
}
 200ff10:	e037883a 	mov	sp,fp
 200ff14:	df000017 	ldw	fp,0(sp)
 200ff18:	dec00104 	addi	sp,sp,4
 200ff1c:	f800283a 	ret

0200ff20 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 200ff20:	defffa04 	addi	sp,sp,-24
 200ff24:	df000515 	stw	fp,20(sp)
 200ff28:	df000504 	addi	fp,sp,20
 200ff2c:	e13ffd15 	stw	r4,-12(fp)
 200ff30:	e17ffe15 	stw	r5,-8(fp)
 200ff34:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 200ff38:	d0a01904 	addi	r2,gp,-32668
 200ff3c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 200ff40:	e0bffd17 	ldw	r2,-12(fp)
 200ff44:	10800117 	ldw	r2,4(r2)
 200ff48:	1009883a 	mov	r4,r2
  r5 = ptr;
 200ff4c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
 200ff50:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 200ff54:	003da07a 	break	1

  rc = r2;
 200ff58:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 200ff5c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 200ff60:	e0bffc17 	ldw	r2,-16(fp)
 200ff64:	10000326 	beq	r2,zero,200ff74 <alt_hostfs_seek+0x54>
 200ff68:	e0bffc17 	ldw	r2,-16(fp)
 200ff6c:	0085c83a 	sub	r2,zero,r2
 200ff70:	00000106 	br	200ff78 <alt_hostfs_seek+0x58>
 200ff74:	e0bffb17 	ldw	r2,-20(fp)
}
 200ff78:	e037883a 	mov	sp,fp
 200ff7c:	df000017 	ldw	fp,0(sp)
 200ff80:	dec00104 	addi	sp,sp,4
 200ff84:	f800283a 	ret

0200ff88 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 200ff88:	deffe904 	addi	sp,sp,-92
 200ff8c:	df001615 	stw	fp,88(sp)
 200ff90:	df001604 	addi	fp,sp,88
 200ff94:	e13ffe15 	stw	r4,-8(fp)
 200ff98:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
 200ff9c:	d0a01c04 	addi	r2,gp,-32656
 200ffa0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 200ffa4:	e0bffe17 	ldw	r2,-8(fp)
 200ffa8:	10800117 	ldw	r2,4(r2)
 200ffac:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
 200ffb0:	e0bfee04 	addi	r2,fp,-72
 200ffb4:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
 200ffb8:	003da07a 	break	1

  rc = r2;
 200ffbc:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
 200ffc0:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
 200ffc4:	e0bfec17 	ldw	r2,-80(fp)
 200ffc8:	1000621e 	bne	r2,zero,2010154 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 200ffcc:	e0bfee04 	addi	r2,fp,-72
 200ffd0:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 200ffd4:	e0bfea17 	ldw	r2,-88(fp)
 200ffd8:	10801004 	addi	r2,r2,64
 200ffdc:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 200ffe0:	00001606 	br	201003c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 200ffe4:	e0bfea17 	ldw	r2,-88(fp)
 200ffe8:	10800017 	ldw	r2,0(r2)
 200ffec:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 200fff0:	e0bfea17 	ldw	r2,-88(fp)
 200fff4:	10800017 	ldw	r2,0(r2)
 200fff8:	10803fec 	andhi	r2,r2,255
 200fffc:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 2010000:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 2010004:	e0bfea17 	ldw	r2,-88(fp)
 2010008:	10800017 	ldw	r2,0(r2)
 201000c:	10bfc00c 	andi	r2,r2,65280
 2010010:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 2010014:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 2010018:	e0bfea17 	ldw	r2,-88(fp)
 201001c:	10800017 	ldw	r2,0(r2)
 2010020:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 2010024:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 2010028:	e0bfea17 	ldw	r2,-88(fp)
 201002c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 2010030:	e0bfea17 	ldw	r2,-88(fp)
 2010034:	10800104 	addi	r2,r2,4
 2010038:	e0bfea15 	stw	r2,-88(fp)
 201003c:	e0ffea17 	ldw	r3,-88(fp)
 2010040:	e0bfed17 	ldw	r2,-76(fp)
 2010044:	18bfe736 	bltu	r3,r2,200ffe4 <__alt_data_end+0xfe00ffe4>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 2010048:	e0bfff17 	ldw	r2,-4(fp)
 201004c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 2010050:	e0bfea17 	ldw	r2,-88(fp)
 2010054:	10800f04 	addi	r2,r2,60
 2010058:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 201005c:	00000506 	br	2010074 <alt_hostfs_fstat+0xec>
      *ptr = 0;
 2010060:	e0bfea17 	ldw	r2,-88(fp)
 2010064:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 2010068:	e0bfea17 	ldw	r2,-88(fp)
 201006c:	10800104 	addi	r2,r2,4
 2010070:	e0bfea15 	stw	r2,-88(fp)
 2010074:	e0ffea17 	ldw	r3,-88(fp)
 2010078:	e0bfed17 	ldw	r2,-76(fp)
 201007c:	18bff836 	bltu	r3,r2,2010060 <__alt_data_end+0xfe010060>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 2010080:	e0bfee17 	ldw	r2,-72(fp)
 2010084:	1007883a 	mov	r3,r2
 2010088:	e0bfff17 	ldw	r2,-4(fp)
 201008c:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 2010090:	e0bfef17 	ldw	r2,-68(fp)
 2010094:	1007883a 	mov	r3,r2
 2010098:	e0bfff17 	ldw	r2,-4(fp)
 201009c:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 20100a0:	e0fff017 	ldw	r3,-64(fp)
 20100a4:	e0bfff17 	ldw	r2,-4(fp)
 20100a8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 20100ac:	e0bff117 	ldw	r2,-60(fp)
 20100b0:	1007883a 	mov	r3,r2
 20100b4:	e0bfff17 	ldw	r2,-4(fp)
 20100b8:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 20100bc:	e0bff217 	ldw	r2,-56(fp)
 20100c0:	1007883a 	mov	r3,r2
 20100c4:	e0bfff17 	ldw	r2,-4(fp)
 20100c8:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 20100cc:	e0bff317 	ldw	r2,-52(fp)
 20100d0:	1007883a 	mov	r3,r2
 20100d4:	e0bfff17 	ldw	r2,-4(fp)
 20100d8:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 20100dc:	e0bff417 	ldw	r2,-48(fp)
 20100e0:	1007883a 	mov	r3,r2
 20100e4:	e0bfff17 	ldw	r2,-4(fp)
 20100e8:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 20100ec:	e0bff617 	ldw	r2,-40(fp)
 20100f0:	1007883a 	mov	r3,r2
 20100f4:	e0bfff17 	ldw	r2,-4(fp)
 20100f8:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 20100fc:	e0bffb17 	ldw	r2,-20(fp)
 2010100:	1007883a 	mov	r3,r2
 2010104:	e0bfff17 	ldw	r2,-4(fp)
 2010108:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 201010c:	e0bffc17 	ldw	r2,-16(fp)
 2010110:	1007883a 	mov	r3,r2
 2010114:	e0bfff17 	ldw	r2,-4(fp)
 2010118:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 201011c:	e0bffd17 	ldw	r2,-12(fp)
 2010120:	1007883a 	mov	r3,r2
 2010124:	e0bfff17 	ldw	r2,-4(fp)
 2010128:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 201012c:	e0bff817 	ldw	r2,-32(fp)
 2010130:	1007883a 	mov	r3,r2
 2010134:	e0bfff17 	ldw	r2,-4(fp)
 2010138:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 201013c:	e0bffa17 	ldw	r2,-24(fp)
 2010140:	1007883a 	mov	r3,r2
 2010144:	e0bfff17 	ldw	r2,-4(fp)
 2010148:	10c00c15 	stw	r3,48(r2)

    return rc;
 201014c:	e0bfeb17 	ldw	r2,-84(fp)
 2010150:	00000206 	br	201015c <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
 2010154:	e0bfec17 	ldw	r2,-80(fp)
 2010158:	0085c83a 	sub	r2,zero,r2
}
 201015c:	e037883a 	mov	sp,fp
 2010160:	df000017 	ldw	fp,0(sp)
 2010164:	dec00104 	addi	sp,sp,4
 2010168:	f800283a 	ret

0201016c <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
 201016c:	deffe504 	addi	sp,sp,-108
 2010170:	dfc01915 	stw	ra,100(sp)
 2010174:	df001815 	stw	fp,96(sp)
 2010178:	dcc01715 	stw	r19,92(sp)
 201017c:	dc801615 	stw	r18,88(sp)
 2010180:	dc401515 	stw	r17,84(sp)
 2010184:	dc001415 	stw	r16,80(sp)
 2010188:	df001804 	addi	fp,sp,96
 201018c:	e13ff915 	stw	r4,-28(fp)
 2010190:	e17ffa15 	stw	r5,-24(fp)
 2010194:	e1bffb15 	stw	r6,-20(fp)
 2010198:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
 201019c:	00800044 	movi	r2,1
 20101a0:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
 20101a4:	00808074 	movhi	r2,513
 20101a8:	10861e04 	addi	r2,r2,6264
 20101ac:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
 20101b0:	00808074 	movhi	r2,513
 20101b4:	10862f04 	addi	r2,r2,6332
 20101b8:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
 20101bc:	0007883a 	mov	r3,zero
 20101c0:	e0bff917 	ldw	r2,-28(fp)
 20101c4:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
 20101c8:	e0800204 	addi	r2,fp,8
 20101cc:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
 20101d0:	e13ff917 	ldw	r4,-28(fp)
 20101d4:	200fc140 	call	200fc14 <perf_get_total_time>
 20101d8:	e0bff215 	stw	r2,-56(fp)
 20101dc:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
 20101e0:	e13ff217 	ldw	r4,-56(fp)
 20101e4:	e17ff317 	ldw	r5,-52(fp)
 20101e8:	20113980 	call	2011398 <__floatundidf>
 20101ec:	1021883a 	mov	r16,r2
 20101f0:	1823883a 	mov	r17,r3
 20101f4:	e13ffa17 	ldw	r4,-24(fp)
 20101f8:	200e2fc0 	call	200e2fc <__floatunsidf>
 20101fc:	1009883a 	mov	r4,r2
 2010200:	180b883a 	mov	r5,r3
 2010204:	200d883a 	mov	r6,r4
 2010208:	280f883a 	mov	r7,r5
 201020c:	8009883a 	mov	r4,r16
 2010210:	880b883a 	mov	r5,r17
 2010214:	200c4100 	call	200c410 <__divdf3>
 2010218:	1009883a 	mov	r4,r2
 201021c:	180b883a 	mov	r5,r3
 2010220:	e13ff415 	stw	r4,-48(fp)
 2010224:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
 2010228:	e0bff017 	ldw	r2,-64(fp)
 201022c:	d8800315 	stw	r2,12(sp)
 2010230:	e0bff117 	ldw	r2,-60(fp)
 2010234:	d8800215 	stw	r2,8(sp)
 2010238:	e0bff017 	ldw	r2,-64(fp)
 201023c:	d8800115 	stw	r2,4(sp)
 2010240:	e0bff317 	ldw	r2,-52(fp)
 2010244:	d8800015 	stw	r2,0(sp)
 2010248:	e1fff217 	ldw	r7,-56(fp)
 201024c:	e17ff417 	ldw	r5,-48(fp)
 2010250:	e1bff517 	ldw	r6,-44(fp)
 2010254:	01008074 	movhi	r4,513
 2010258:	21064004 	addi	r4,r4,6400
 201025c:	2002de40 	call	2002de4 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
 2010260:	e0bff817 	ldw	r2,-32(fp)
 2010264:	10c00104 	addi	r3,r2,4
 2010268:	e0fff815 	stw	r3,-32(fp)
 201026c:	10800017 	ldw	r2,0(r2)
 2010270:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
 2010274:	00800044 	movi	r2,1
 2010278:	e0bfef15 	stw	r2,-68(fp)
 201027c:	00004e06 	br	20103b8 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
 2010280:	e17fef17 	ldw	r5,-68(fp)
 2010284:	e13ff917 	ldw	r4,-28(fp)
 2010288:	200fb580 	call	200fb58 <perf_get_section_time>
 201028c:	e0bff615 	stw	r2,-40(fp)
 2010290:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
 2010294:	e13ff617 	ldw	r4,-40(fp)
 2010298:	e17ff717 	ldw	r5,-36(fp)
 201029c:	20113980 	call	2011398 <__floatundidf>
 20102a0:	1011883a 	mov	r8,r2
 20102a4:	1813883a 	mov	r9,r3
 20102a8:	000d883a 	mov	r6,zero
 20102ac:	01d01674 	movhi	r7,16473
 20102b0:	4009883a 	mov	r4,r8
 20102b4:	480b883a 	mov	r5,r9
 20102b8:	200d0380 	call	200d038 <__muldf3>
 20102bc:	1009883a 	mov	r4,r2
 20102c0:	180b883a 	mov	r5,r3
 20102c4:	2021883a 	mov	r16,r4
 20102c8:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 20102cc:	e13ff217 	ldw	r4,-56(fp)
 20102d0:	e17ff317 	ldw	r5,-52(fp)
 20102d4:	20113980 	call	2011398 <__floatundidf>
 20102d8:	1009883a 	mov	r4,r2
 20102dc:	180b883a 	mov	r5,r3
 20102e0:	200d883a 	mov	r6,r4
 20102e4:	280f883a 	mov	r7,r5
 20102e8:	8009883a 	mov	r4,r16
 20102ec:	880b883a 	mov	r5,r17
 20102f0:	200c4100 	call	200c410 <__divdf3>
 20102f4:	1009883a 	mov	r4,r2
 20102f8:	180b883a 	mov	r5,r3
 20102fc:	2025883a 	mov	r18,r4
 2010300:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
 2010304:	e13ff617 	ldw	r4,-40(fp)
 2010308:	e17ff717 	ldw	r5,-36(fp)
 201030c:	20113980 	call	2011398 <__floatundidf>
 2010310:	1021883a 	mov	r16,r2
 2010314:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 2010318:	e13ffa17 	ldw	r4,-24(fp)
 201031c:	200e2fc0 	call	200e2fc <__floatunsidf>
 2010320:	1009883a 	mov	r4,r2
 2010324:	180b883a 	mov	r5,r3
 2010328:	200d883a 	mov	r6,r4
 201032c:	280f883a 	mov	r7,r5
 2010330:	8009883a 	mov	r4,r16
 2010334:	880b883a 	mov	r5,r17
 2010338:	200c4100 	call	200c410 <__divdf3>
 201033c:	1009883a 	mov	r4,r2
 2010340:	180b883a 	mov	r5,r3
 2010344:	2021883a 	mov	r16,r4
 2010348:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
 201034c:	e17fef17 	ldw	r5,-68(fp)
 2010350:	e13ff917 	ldw	r4,-28(fp)
 2010354:	200fc600 	call	200fc60 <perf_get_num_starts>
 2010358:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 201035c:	e0bff017 	ldw	r2,-64(fp)
 2010360:	d8800515 	stw	r2,20(sp)
 2010364:	d8c00415 	stw	r3,16(sp)
 2010368:	e0bff617 	ldw	r2,-40(fp)
 201036c:	d8800215 	stw	r2,8(sp)
 2010370:	e0bff717 	ldw	r2,-36(fp)
 2010374:	d8800315 	stw	r2,12(sp)
 2010378:	dc000015 	stw	r16,0(sp)
 201037c:	dc400115 	stw	r17,4(sp)
 2010380:	900d883a 	mov	r6,r18
 2010384:	980f883a 	mov	r7,r19
 2010388:	e17fee17 	ldw	r5,-72(fp)
 201038c:	01008074 	movhi	r4,513
 2010390:	21065504 	addi	r4,r4,6484
 2010394:	2002de40 	call	2002de4 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
 2010398:	e0bff817 	ldw	r2,-32(fp)
 201039c:	10c00104 	addi	r3,r2,4
 20103a0:	e0fff815 	stw	r3,-32(fp)
 20103a4:	10800017 	ldw	r2,0(r2)
 20103a8:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
 20103ac:	e0bfef17 	ldw	r2,-68(fp)
 20103b0:	10800044 	addi	r2,r2,1
 20103b4:	e0bfef15 	stw	r2,-68(fp)
 20103b8:	e0bfef17 	ldw	r2,-68(fp)
 20103bc:	e0fffb17 	ldw	r3,-20(fp)
 20103c0:	18bfaf0e 	bge	r3,r2,2010280 <__alt_data_end+0xfe010280>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
 20103c4:	0005883a 	mov	r2,zero
}
 20103c8:	e6fffc04 	addi	sp,fp,-16
 20103cc:	dfc00517 	ldw	ra,20(sp)
 20103d0:	df000417 	ldw	fp,16(sp)
 20103d4:	dcc00317 	ldw	r19,12(sp)
 20103d8:	dc800217 	ldw	r18,8(sp)
 20103dc:	dc400117 	ldw	r17,4(sp)
 20103e0:	dc000017 	ldw	r16,0(sp)
 20103e4:	dec00704 	addi	sp,sp,28
 20103e8:	f800283a 	ret

020103ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20103ec:	defff504 	addi	sp,sp,-44
 20103f0:	df000a15 	stw	fp,40(sp)
 20103f4:	df000a04 	addi	fp,sp,40
 20103f8:	e13ffc15 	stw	r4,-16(fp)
 20103fc:	e17ffd15 	stw	r5,-12(fp)
 2010400:	e1bffe15 	stw	r6,-8(fp)
 2010404:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2010408:	e03ff615 	stw	zero,-40(fp)
 201040c:	d0a70417 	ldw	r2,-25584(gp)
  
  if (alt_ticks_per_second ())
 2010410:	10003c26 	beq	r2,zero,2010504 <alt_alarm_start+0x118>
  {
    if (alarm)
 2010414:	e0bffc17 	ldw	r2,-16(fp)
 2010418:	10003826 	beq	r2,zero,20104fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 201041c:	e0bffc17 	ldw	r2,-16(fp)
 2010420:	e0fffe17 	ldw	r3,-8(fp)
 2010424:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2010428:	e0bffc17 	ldw	r2,-16(fp)
 201042c:	e0ffff17 	ldw	r3,-4(fp)
 2010430:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010434:	0005303a 	rdctl	r2,status
 2010438:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201043c:	e0fff917 	ldw	r3,-28(fp)
 2010440:	00bfff84 	movi	r2,-2
 2010444:	1884703a 	and	r2,r3,r2
 2010448:	1001703a 	wrctl	status,r2
  
  return context;
 201044c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 2010450:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2010454:	d0a70517 	ldw	r2,-25580(gp)
      
      current_nticks = alt_nticks();
 2010458:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201045c:	e0fffd17 	ldw	r3,-12(fp)
 2010460:	e0bff617 	ldw	r2,-40(fp)
 2010464:	1885883a 	add	r2,r3,r2
 2010468:	10c00044 	addi	r3,r2,1
 201046c:	e0bffc17 	ldw	r2,-16(fp)
 2010470:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2010474:	e0bffc17 	ldw	r2,-16(fp)
 2010478:	10c00217 	ldw	r3,8(r2)
 201047c:	e0bff617 	ldw	r2,-40(fp)
 2010480:	1880042e 	bgeu	r3,r2,2010494 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 2010484:	e0bffc17 	ldw	r2,-16(fp)
 2010488:	00c00044 	movi	r3,1
 201048c:	10c00405 	stb	r3,16(r2)
 2010490:	00000206 	br	201049c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 2010494:	e0bffc17 	ldw	r2,-16(fp)
 2010498:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201049c:	e0bffc17 	ldw	r2,-16(fp)
 20104a0:	d0e02004 	addi	r3,gp,-32640
 20104a4:	e0fffa15 	stw	r3,-24(fp)
 20104a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20104ac:	e0bffb17 	ldw	r2,-20(fp)
 20104b0:	e0fffa17 	ldw	r3,-24(fp)
 20104b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20104b8:	e0bffa17 	ldw	r2,-24(fp)
 20104bc:	10c00017 	ldw	r3,0(r2)
 20104c0:	e0bffb17 	ldw	r2,-20(fp)
 20104c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20104c8:	e0bffa17 	ldw	r2,-24(fp)
 20104cc:	10800017 	ldw	r2,0(r2)
 20104d0:	e0fffb17 	ldw	r3,-20(fp)
 20104d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20104d8:	e0bffa17 	ldw	r2,-24(fp)
 20104dc:	e0fffb17 	ldw	r3,-20(fp)
 20104e0:	10c00015 	stw	r3,0(r2)
 20104e4:	e0bff817 	ldw	r2,-32(fp)
 20104e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20104ec:	e0bff717 	ldw	r2,-36(fp)
 20104f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20104f4:	0005883a 	mov	r2,zero
 20104f8:	00000306 	br	2010508 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 20104fc:	00bffa84 	movi	r2,-22
 2010500:	00000106 	br	2010508 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 2010504:	00bfde84 	movi	r2,-134
  }
}
 2010508:	e037883a 	mov	sp,fp
 201050c:	df000017 	ldw	fp,0(sp)
 2010510:	dec00104 	addi	sp,sp,4
 2010514:	f800283a 	ret

02010518 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2010518:	deffff04 	addi	sp,sp,-4
 201051c:	df000015 	stw	fp,0(sp)
 2010520:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2010524:	0001883a 	nop
 2010528:	e037883a 	mov	sp,fp
 201052c:	df000017 	ldw	fp,0(sp)
 2010530:	dec00104 	addi	sp,sp,4
 2010534:	f800283a 	ret

02010538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010538:	defffe04 	addi	sp,sp,-8
 201053c:	dfc00115 	stw	ra,4(sp)
 2010540:	df000015 	stw	fp,0(sp)
 2010544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010548:	d0a00b17 	ldw	r2,-32724(gp)
 201054c:	10000326 	beq	r2,zero,201055c <alt_get_errno+0x24>
 2010550:	d0a00b17 	ldw	r2,-32724(gp)
 2010554:	103ee83a 	callr	r2
 2010558:	00000106 	br	2010560 <alt_get_errno+0x28>
 201055c:	d0a6f904 	addi	r2,gp,-25628
}
 2010560:	e037883a 	mov	sp,fp
 2010564:	dfc00117 	ldw	ra,4(sp)
 2010568:	df000017 	ldw	fp,0(sp)
 201056c:	dec00204 	addi	sp,sp,8
 2010570:	f800283a 	ret

02010574 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2010574:	defffa04 	addi	sp,sp,-24
 2010578:	dfc00515 	stw	ra,20(sp)
 201057c:	df000415 	stw	fp,16(sp)
 2010580:	df000404 	addi	fp,sp,16
 2010584:	e13ffe15 	stw	r4,-8(fp)
 2010588:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201058c:	e0bffe17 	ldw	r2,-8(fp)
 2010590:	10000326 	beq	r2,zero,20105a0 <alt_dev_llist_insert+0x2c>
 2010594:	e0bffe17 	ldw	r2,-8(fp)
 2010598:	10800217 	ldw	r2,8(r2)
 201059c:	1000061e 	bne	r2,zero,20105b8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 20105a0:	20105380 	call	2010538 <alt_get_errno>
 20105a4:	1007883a 	mov	r3,r2
 20105a8:	00800584 	movi	r2,22
 20105ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 20105b0:	00bffa84 	movi	r2,-22
 20105b4:	00001306 	br	2010604 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 20105b8:	e0bffe17 	ldw	r2,-8(fp)
 20105bc:	e0ffff17 	ldw	r3,-4(fp)
 20105c0:	e0fffc15 	stw	r3,-16(fp)
 20105c4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20105c8:	e0bffd17 	ldw	r2,-12(fp)
 20105cc:	e0fffc17 	ldw	r3,-16(fp)
 20105d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20105d4:	e0bffc17 	ldw	r2,-16(fp)
 20105d8:	10c00017 	ldw	r3,0(r2)
 20105dc:	e0bffd17 	ldw	r2,-12(fp)
 20105e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20105e4:	e0bffc17 	ldw	r2,-16(fp)
 20105e8:	10800017 	ldw	r2,0(r2)
 20105ec:	e0fffd17 	ldw	r3,-12(fp)
 20105f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20105f4:	e0bffc17 	ldw	r2,-16(fp)
 20105f8:	e0fffd17 	ldw	r3,-12(fp)
 20105fc:	10c00015 	stw	r3,0(r2)

  return 0;  
 2010600:	0005883a 	mov	r2,zero
}
 2010604:	e037883a 	mov	sp,fp
 2010608:	dfc00117 	ldw	ra,4(sp)
 201060c:	df000017 	ldw	fp,0(sp)
 2010610:	dec00204 	addi	sp,sp,8
 2010614:	f800283a 	ret

02010618 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2010618:	defffd04 	addi	sp,sp,-12
 201061c:	dfc00215 	stw	ra,8(sp)
 2010620:	df000115 	stw	fp,4(sp)
 2010624:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2010628:	00808074 	movhi	r2,513
 201062c:	10850e04 	addi	r2,r2,5176
 2010630:	e0bfff15 	stw	r2,-4(fp)
 2010634:	00000606 	br	2010650 <_do_ctors+0x38>
        (*ctor) (); 
 2010638:	e0bfff17 	ldw	r2,-4(fp)
 201063c:	10800017 	ldw	r2,0(r2)
 2010640:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2010644:	e0bfff17 	ldw	r2,-4(fp)
 2010648:	10bfff04 	addi	r2,r2,-4
 201064c:	e0bfff15 	stw	r2,-4(fp)
 2010650:	e0ffff17 	ldw	r3,-4(fp)
 2010654:	00808074 	movhi	r2,513
 2010658:	10850f04 	addi	r2,r2,5180
 201065c:	18bff62e 	bgeu	r3,r2,2010638 <__alt_data_end+0xfe010638>
        (*ctor) (); 
}
 2010660:	0001883a 	nop
 2010664:	e037883a 	mov	sp,fp
 2010668:	dfc00117 	ldw	ra,4(sp)
 201066c:	df000017 	ldw	fp,0(sp)
 2010670:	dec00204 	addi	sp,sp,8
 2010674:	f800283a 	ret

02010678 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2010678:	defffd04 	addi	sp,sp,-12
 201067c:	dfc00215 	stw	ra,8(sp)
 2010680:	df000115 	stw	fp,4(sp)
 2010684:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2010688:	00808074 	movhi	r2,513
 201068c:	10850e04 	addi	r2,r2,5176
 2010690:	e0bfff15 	stw	r2,-4(fp)
 2010694:	00000606 	br	20106b0 <_do_dtors+0x38>
        (*dtor) (); 
 2010698:	e0bfff17 	ldw	r2,-4(fp)
 201069c:	10800017 	ldw	r2,0(r2)
 20106a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20106a4:	e0bfff17 	ldw	r2,-4(fp)
 20106a8:	10bfff04 	addi	r2,r2,-4
 20106ac:	e0bfff15 	stw	r2,-4(fp)
 20106b0:	e0ffff17 	ldw	r3,-4(fp)
 20106b4:	00808074 	movhi	r2,513
 20106b8:	10850f04 	addi	r2,r2,5180
 20106bc:	18bff62e 	bgeu	r3,r2,2010698 <__alt_data_end+0xfe010698>
        (*dtor) (); 
}
 20106c0:	0001883a 	nop
 20106c4:	e037883a 	mov	sp,fp
 20106c8:	dfc00117 	ldw	ra,4(sp)
 20106cc:	df000017 	ldw	fp,0(sp)
 20106d0:	dec00204 	addi	sp,sp,8
 20106d4:	f800283a 	ret

020106d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20106d8:	defffa04 	addi	sp,sp,-24
 20106dc:	dfc00515 	stw	ra,20(sp)
 20106e0:	df000415 	stw	fp,16(sp)
 20106e4:	df000404 	addi	fp,sp,16
 20106e8:	e13ffe15 	stw	r4,-8(fp)
 20106ec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20106f0:	e0bfff17 	ldw	r2,-4(fp)
 20106f4:	10800017 	ldw	r2,0(r2)
 20106f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20106fc:	e13ffe17 	ldw	r4,-8(fp)
 2010700:	20032740 	call	2003274 <strlen>
 2010704:	10800044 	addi	r2,r2,1
 2010708:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201070c:	00000d06 	br	2010744 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2010710:	e0bffc17 	ldw	r2,-16(fp)
 2010714:	10800217 	ldw	r2,8(r2)
 2010718:	e0fffd17 	ldw	r3,-12(fp)
 201071c:	180d883a 	mov	r6,r3
 2010720:	e17ffe17 	ldw	r5,-8(fp)
 2010724:	1009883a 	mov	r4,r2
 2010728:	20110840 	call	2011084 <memcmp>
 201072c:	1000021e 	bne	r2,zero,2010738 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2010730:	e0bffc17 	ldw	r2,-16(fp)
 2010734:	00000706 	br	2010754 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2010738:	e0bffc17 	ldw	r2,-16(fp)
 201073c:	10800017 	ldw	r2,0(r2)
 2010740:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2010744:	e0fffc17 	ldw	r3,-16(fp)
 2010748:	e0bfff17 	ldw	r2,-4(fp)
 201074c:	18bff01e 	bne	r3,r2,2010710 <__alt_data_end+0xfe010710>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2010750:	0005883a 	mov	r2,zero
}
 2010754:	e037883a 	mov	sp,fp
 2010758:	dfc00117 	ldw	ra,4(sp)
 201075c:	df000017 	ldw	fp,0(sp)
 2010760:	dec00204 	addi	sp,sp,8
 2010764:	f800283a 	ret

02010768 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2010768:	defffb04 	addi	sp,sp,-20
 201076c:	dfc00415 	stw	ra,16(sp)
 2010770:	df000315 	stw	fp,12(sp)
 2010774:	df000304 	addi	fp,sp,12
 2010778:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201077c:	d0a00617 	ldw	r2,-32744(gp)
 2010780:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2010784:	00003106 	br	201084c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 2010788:	e0bffd17 	ldw	r2,-12(fp)
 201078c:	10800217 	ldw	r2,8(r2)
 2010790:	1009883a 	mov	r4,r2
 2010794:	20032740 	call	2003274 <strlen>
 2010798:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 201079c:	e0bffd17 	ldw	r2,-12(fp)
 20107a0:	10c00217 	ldw	r3,8(r2)
 20107a4:	e0bffe17 	ldw	r2,-8(fp)
 20107a8:	10bfffc4 	addi	r2,r2,-1
 20107ac:	1885883a 	add	r2,r3,r2
 20107b0:	10800003 	ldbu	r2,0(r2)
 20107b4:	10803fcc 	andi	r2,r2,255
 20107b8:	1080201c 	xori	r2,r2,128
 20107bc:	10bfe004 	addi	r2,r2,-128
 20107c0:	10800bd8 	cmpnei	r2,r2,47
 20107c4:	1000031e 	bne	r2,zero,20107d4 <alt_find_file+0x6c>
    {
      len -= 1;
 20107c8:	e0bffe17 	ldw	r2,-8(fp)
 20107cc:	10bfffc4 	addi	r2,r2,-1
 20107d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20107d4:	e0bffe17 	ldw	r2,-8(fp)
 20107d8:	e0ffff17 	ldw	r3,-4(fp)
 20107dc:	1885883a 	add	r2,r3,r2
 20107e0:	10800003 	ldbu	r2,0(r2)
 20107e4:	10803fcc 	andi	r2,r2,255
 20107e8:	1080201c 	xori	r2,r2,128
 20107ec:	10bfe004 	addi	r2,r2,-128
 20107f0:	10800be0 	cmpeqi	r2,r2,47
 20107f4:	1000081e 	bne	r2,zero,2010818 <alt_find_file+0xb0>
 20107f8:	e0bffe17 	ldw	r2,-8(fp)
 20107fc:	e0ffff17 	ldw	r3,-4(fp)
 2010800:	1885883a 	add	r2,r3,r2
 2010804:	10800003 	ldbu	r2,0(r2)
 2010808:	10803fcc 	andi	r2,r2,255
 201080c:	1080201c 	xori	r2,r2,128
 2010810:	10bfe004 	addi	r2,r2,-128
 2010814:	10000a1e 	bne	r2,zero,2010840 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 2010818:	e0bffd17 	ldw	r2,-12(fp)
 201081c:	10800217 	ldw	r2,8(r2)
 2010820:	e0fffe17 	ldw	r3,-8(fp)
 2010824:	180d883a 	mov	r6,r3
 2010828:	e17fff17 	ldw	r5,-4(fp)
 201082c:	1009883a 	mov	r4,r2
 2010830:	20110840 	call	2011084 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2010834:	1000021e 	bne	r2,zero,2010840 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2010838:	e0bffd17 	ldw	r2,-12(fp)
 201083c:	00000706 	br	201085c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 2010840:	e0bffd17 	ldw	r2,-12(fp)
 2010844:	10800017 	ldw	r2,0(r2)
 2010848:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201084c:	e0fffd17 	ldw	r3,-12(fp)
 2010850:	d0a00604 	addi	r2,gp,-32744
 2010854:	18bfcc1e 	bne	r3,r2,2010788 <__alt_data_end+0xfe010788>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2010858:	0005883a 	mov	r2,zero
}
 201085c:	e037883a 	mov	sp,fp
 2010860:	dfc00117 	ldw	ra,4(sp)
 2010864:	df000017 	ldw	fp,0(sp)
 2010868:	dec00204 	addi	sp,sp,8
 201086c:	f800283a 	ret

02010870 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 2010870:	defffc04 	addi	sp,sp,-16
 2010874:	df000315 	stw	fp,12(sp)
 2010878:	df000304 	addi	fp,sp,12
 201087c:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 2010880:	e0bfff17 	ldw	r2,-4(fp)
 2010884:	10800217 	ldw	r2,8(r2)
 2010888:	1000021e 	bne	r2,zero,2010894 <alt_fs_reg+0x24>
  {
    return -ENODEV;
 201088c:	00bffb44 	movi	r2,-19
 2010890:	00001306 	br	20108e0 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 2010894:	e0bfff17 	ldw	r2,-4(fp)
 2010898:	d0e00604 	addi	r3,gp,-32744
 201089c:	e0fffd15 	stw	r3,-12(fp)
 20108a0:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20108a4:	e0bffe17 	ldw	r2,-8(fp)
 20108a8:	e0fffd17 	ldw	r3,-12(fp)
 20108ac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 20108b0:	e0bffd17 	ldw	r2,-12(fp)
 20108b4:	10c00017 	ldw	r3,0(r2)
 20108b8:	e0bffe17 	ldw	r2,-8(fp)
 20108bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20108c0:	e0bffd17 	ldw	r2,-12(fp)
 20108c4:	10800017 	ldw	r2,0(r2)
 20108c8:	e0fffe17 	ldw	r3,-8(fp)
 20108cc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 20108d0:	e0bffd17 	ldw	r2,-12(fp)
 20108d4:	e0fffe17 	ldw	r3,-8(fp)
 20108d8:	10c00015 	stw	r3,0(r2)

  return 0;
 20108dc:	0005883a 	mov	r2,zero
} 
 20108e0:	e037883a 	mov	sp,fp
 20108e4:	df000017 	ldw	fp,0(sp)
 20108e8:	dec00104 	addi	sp,sp,4
 20108ec:	f800283a 	ret

020108f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 20108f0:	defffa04 	addi	sp,sp,-24
 20108f4:	dfc00515 	stw	ra,20(sp)
 20108f8:	df000415 	stw	fp,16(sp)
 20108fc:	dc000315 	stw	r16,12(sp)
 2010900:	df000404 	addi	fp,sp,16
 2010904:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 2010908:	00bffa04 	movi	r2,-24
 201090c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2010910:	e03ffc15 	stw	zero,-16(fp)
 2010914:	00001d06 	br	201098c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 2010918:	04008074 	movhi	r16,513
 201091c:	84089104 	addi	r16,r16,8772
 2010920:	e0bffc17 	ldw	r2,-16(fp)
 2010924:	01400304 	movi	r5,12
 2010928:	1009883a 	mov	r4,r2
 201092c:	2000a4c0 	call	2000a4c <__mulsi3>
 2010930:	8085883a 	add	r2,r16,r2
 2010934:	10800017 	ldw	r2,0(r2)
 2010938:	1000111e 	bne	r2,zero,2010980 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 201093c:	04008074 	movhi	r16,513
 2010940:	84089104 	addi	r16,r16,8772
 2010944:	e0bffc17 	ldw	r2,-16(fp)
 2010948:	01400304 	movi	r5,12
 201094c:	1009883a 	mov	r4,r2
 2010950:	2000a4c0 	call	2000a4c <__mulsi3>
 2010954:	8085883a 	add	r2,r16,r2
 2010958:	e0fffe17 	ldw	r3,-8(fp)
 201095c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2010960:	d0e00a17 	ldw	r3,-32728(gp)
 2010964:	e0bffc17 	ldw	r2,-16(fp)
 2010968:	1880020e 	bge	r3,r2,2010974 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 201096c:	e0bffc17 	ldw	r2,-16(fp)
 2010970:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 2010974:	e0bffc17 	ldw	r2,-16(fp)
 2010978:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 201097c:	00000606 	br	2010998 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2010980:	e0bffc17 	ldw	r2,-16(fp)
 2010984:	10800044 	addi	r2,r2,1
 2010988:	e0bffc15 	stw	r2,-16(fp)
 201098c:	e0bffc17 	ldw	r2,-16(fp)
 2010990:	10800810 	cmplti	r2,r2,32
 2010994:	103fe01e 	bne	r2,zero,2010918 <__alt_data_end+0xfe010918>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 2010998:	e0bffd17 	ldw	r2,-12(fp)
}
 201099c:	e6ffff04 	addi	sp,fp,-4
 20109a0:	dfc00217 	ldw	ra,8(sp)
 20109a4:	df000117 	ldw	fp,4(sp)
 20109a8:	dc000017 	ldw	r16,0(sp)
 20109ac:	dec00304 	addi	sp,sp,12
 20109b0:	f800283a 	ret

020109b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20109b4:	deffff04 	addi	sp,sp,-4
 20109b8:	df000015 	stw	fp,0(sp)
 20109bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 20109c0:	0001883a 	nop
 20109c4:	e037883a 	mov	sp,fp
 20109c8:	df000017 	ldw	fp,0(sp)
 20109cc:	dec00104 	addi	sp,sp,4
 20109d0:	f800283a 	ret

020109d4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20109d4:	defff904 	addi	sp,sp,-28
 20109d8:	dfc00615 	stw	ra,24(sp)
 20109dc:	df000515 	stw	fp,20(sp)
 20109e0:	df000504 	addi	fp,sp,20
 20109e4:	e13ffc15 	stw	r4,-16(fp)
 20109e8:	e17ffd15 	stw	r5,-12(fp)
 20109ec:	e1bffe15 	stw	r6,-8(fp)
 20109f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 20109f4:	e0800217 	ldw	r2,8(fp)
 20109f8:	d8800015 	stw	r2,0(sp)
 20109fc:	e1ffff17 	ldw	r7,-4(fp)
 2010a00:	e1bffe17 	ldw	r6,-8(fp)
 2010a04:	e17ffd17 	ldw	r5,-12(fp)
 2010a08:	e13ffc17 	ldw	r4,-16(fp)
 2010a0c:	2010b840 	call	2010b84 <alt_iic_isr_register>
}  
 2010a10:	e037883a 	mov	sp,fp
 2010a14:	dfc00117 	ldw	ra,4(sp)
 2010a18:	df000017 	ldw	fp,0(sp)
 2010a1c:	dec00204 	addi	sp,sp,8
 2010a20:	f800283a 	ret

02010a24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2010a24:	defff904 	addi	sp,sp,-28
 2010a28:	df000615 	stw	fp,24(sp)
 2010a2c:	df000604 	addi	fp,sp,24
 2010a30:	e13ffe15 	stw	r4,-8(fp)
 2010a34:	e17fff15 	stw	r5,-4(fp)
 2010a38:	e0bfff17 	ldw	r2,-4(fp)
 2010a3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010a40:	0005303a 	rdctl	r2,status
 2010a44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010a48:	e0fffb17 	ldw	r3,-20(fp)
 2010a4c:	00bfff84 	movi	r2,-2
 2010a50:	1884703a 	and	r2,r3,r2
 2010a54:	1001703a 	wrctl	status,r2
  
  return context;
 2010a58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2010a5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2010a60:	00c00044 	movi	r3,1
 2010a64:	e0bffa17 	ldw	r2,-24(fp)
 2010a68:	1884983a 	sll	r2,r3,r2
 2010a6c:	1007883a 	mov	r3,r2
 2010a70:	d0a70317 	ldw	r2,-25588(gp)
 2010a74:	1884b03a 	or	r2,r3,r2
 2010a78:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2010a7c:	d0a70317 	ldw	r2,-25588(gp)
 2010a80:	100170fa 	wrctl	ienable,r2
 2010a84:	e0bffc17 	ldw	r2,-16(fp)
 2010a88:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010a8c:	e0bffd17 	ldw	r2,-12(fp)
 2010a90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2010a94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 2010a98:	0001883a 	nop
}
 2010a9c:	e037883a 	mov	sp,fp
 2010aa0:	df000017 	ldw	fp,0(sp)
 2010aa4:	dec00104 	addi	sp,sp,4
 2010aa8:	f800283a 	ret

02010aac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2010aac:	defff904 	addi	sp,sp,-28
 2010ab0:	df000615 	stw	fp,24(sp)
 2010ab4:	df000604 	addi	fp,sp,24
 2010ab8:	e13ffe15 	stw	r4,-8(fp)
 2010abc:	e17fff15 	stw	r5,-4(fp)
 2010ac0:	e0bfff17 	ldw	r2,-4(fp)
 2010ac4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010ac8:	0005303a 	rdctl	r2,status
 2010acc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010ad0:	e0fffb17 	ldw	r3,-20(fp)
 2010ad4:	00bfff84 	movi	r2,-2
 2010ad8:	1884703a 	and	r2,r3,r2
 2010adc:	1001703a 	wrctl	status,r2
  
  return context;
 2010ae0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2010ae4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2010ae8:	00c00044 	movi	r3,1
 2010aec:	e0bffa17 	ldw	r2,-24(fp)
 2010af0:	1884983a 	sll	r2,r3,r2
 2010af4:	0084303a 	nor	r2,zero,r2
 2010af8:	1007883a 	mov	r3,r2
 2010afc:	d0a70317 	ldw	r2,-25588(gp)
 2010b00:	1884703a 	and	r2,r3,r2
 2010b04:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2010b08:	d0a70317 	ldw	r2,-25588(gp)
 2010b0c:	100170fa 	wrctl	ienable,r2
 2010b10:	e0bffc17 	ldw	r2,-16(fp)
 2010b14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010b18:	e0bffd17 	ldw	r2,-12(fp)
 2010b1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2010b20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 2010b24:	0001883a 	nop
}
 2010b28:	e037883a 	mov	sp,fp
 2010b2c:	df000017 	ldw	fp,0(sp)
 2010b30:	dec00104 	addi	sp,sp,4
 2010b34:	f800283a 	ret

02010b38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2010b38:	defffc04 	addi	sp,sp,-16
 2010b3c:	df000315 	stw	fp,12(sp)
 2010b40:	df000304 	addi	fp,sp,12
 2010b44:	e13ffe15 	stw	r4,-8(fp)
 2010b48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2010b4c:	000530fa 	rdctl	r2,ienable
 2010b50:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2010b54:	00c00044 	movi	r3,1
 2010b58:	e0bfff17 	ldw	r2,-4(fp)
 2010b5c:	1884983a 	sll	r2,r3,r2
 2010b60:	1007883a 	mov	r3,r2
 2010b64:	e0bffd17 	ldw	r2,-12(fp)
 2010b68:	1884703a 	and	r2,r3,r2
 2010b6c:	1004c03a 	cmpne	r2,r2,zero
 2010b70:	10803fcc 	andi	r2,r2,255
}
 2010b74:	e037883a 	mov	sp,fp
 2010b78:	df000017 	ldw	fp,0(sp)
 2010b7c:	dec00104 	addi	sp,sp,4
 2010b80:	f800283a 	ret

02010b84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2010b84:	defff504 	addi	sp,sp,-44
 2010b88:	dfc00a15 	stw	ra,40(sp)
 2010b8c:	df000915 	stw	fp,36(sp)
 2010b90:	df000904 	addi	fp,sp,36
 2010b94:	e13ffc15 	stw	r4,-16(fp)
 2010b98:	e17ffd15 	stw	r5,-12(fp)
 2010b9c:	e1bffe15 	stw	r6,-8(fp)
 2010ba0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2010ba4:	00bffa84 	movi	r2,-22
 2010ba8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2010bac:	e0bffd17 	ldw	r2,-12(fp)
 2010bb0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2010bb4:	e0bff817 	ldw	r2,-32(fp)
 2010bb8:	10800808 	cmpgei	r2,r2,32
 2010bbc:	1000271e 	bne	r2,zero,2010c5c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010bc0:	0005303a 	rdctl	r2,status
 2010bc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010bc8:	e0fffb17 	ldw	r3,-20(fp)
 2010bcc:	00bfff84 	movi	r2,-2
 2010bd0:	1884703a 	and	r2,r3,r2
 2010bd4:	1001703a 	wrctl	status,r2
  
  return context;
 2010bd8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2010bdc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 2010be0:	00808074 	movhi	r2,513
 2010be4:	10942404 	addi	r2,r2,20624
 2010be8:	e0fff817 	ldw	r3,-32(fp)
 2010bec:	180690fa 	slli	r3,r3,3
 2010bf0:	10c5883a 	add	r2,r2,r3
 2010bf4:	e0fffe17 	ldw	r3,-8(fp)
 2010bf8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2010bfc:	00808074 	movhi	r2,513
 2010c00:	10942404 	addi	r2,r2,20624
 2010c04:	e0fff817 	ldw	r3,-32(fp)
 2010c08:	180690fa 	slli	r3,r3,3
 2010c0c:	10c5883a 	add	r2,r2,r3
 2010c10:	10800104 	addi	r2,r2,4
 2010c14:	e0ffff17 	ldw	r3,-4(fp)
 2010c18:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2010c1c:	e0bffe17 	ldw	r2,-8(fp)
 2010c20:	10000526 	beq	r2,zero,2010c38 <alt_iic_isr_register+0xb4>
 2010c24:	e0bff817 	ldw	r2,-32(fp)
 2010c28:	100b883a 	mov	r5,r2
 2010c2c:	e13ffc17 	ldw	r4,-16(fp)
 2010c30:	2010a240 	call	2010a24 <alt_ic_irq_enable>
 2010c34:	00000406 	br	2010c48 <alt_iic_isr_register+0xc4>
 2010c38:	e0bff817 	ldw	r2,-32(fp)
 2010c3c:	100b883a 	mov	r5,r2
 2010c40:	e13ffc17 	ldw	r4,-16(fp)
 2010c44:	2010aac0 	call	2010aac <alt_ic_irq_disable>
 2010c48:	e0bff715 	stw	r2,-36(fp)
 2010c4c:	e0bffa17 	ldw	r2,-24(fp)
 2010c50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010c54:	e0bff917 	ldw	r2,-28(fp)
 2010c58:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 2010c5c:	e0bff717 	ldw	r2,-36(fp)
}
 2010c60:	e037883a 	mov	sp,fp
 2010c64:	dfc00117 	ldw	ra,4(sp)
 2010c68:	df000017 	ldw	fp,0(sp)
 2010c6c:	dec00204 	addi	sp,sp,8
 2010c70:	f800283a 	ret

02010c74 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2010c74:	defff804 	addi	sp,sp,-32
 2010c78:	dfc00715 	stw	ra,28(sp)
 2010c7c:	df000615 	stw	fp,24(sp)
 2010c80:	dc000515 	stw	r16,20(sp)
 2010c84:	df000604 	addi	fp,sp,24
 2010c88:	e13ffb15 	stw	r4,-20(fp)
 2010c8c:	e17ffc15 	stw	r5,-16(fp)
 2010c90:	e1bffd15 	stw	r6,-12(fp)
 2010c94:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 2010c98:	e1bffe17 	ldw	r6,-8(fp)
 2010c9c:	e17ffd17 	ldw	r5,-12(fp)
 2010ca0:	e13ffc17 	ldw	r4,-16(fp)
 2010ca4:	200eb140 	call	200eb14 <open>
 2010ca8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 2010cac:	e0bffa17 	ldw	r2,-24(fp)
 2010cb0:	10002216 	blt	r2,zero,2010d3c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 2010cb4:	04008074 	movhi	r16,513
 2010cb8:	84089104 	addi	r16,r16,8772
 2010cbc:	e0bffa17 	ldw	r2,-24(fp)
 2010cc0:	01400304 	movi	r5,12
 2010cc4:	1009883a 	mov	r4,r2
 2010cc8:	2000a4c0 	call	2000a4c <__mulsi3>
 2010ccc:	8085883a 	add	r2,r16,r2
 2010cd0:	10c00017 	ldw	r3,0(r2)
 2010cd4:	e0bffb17 	ldw	r2,-20(fp)
 2010cd8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2010cdc:	04008074 	movhi	r16,513
 2010ce0:	84089104 	addi	r16,r16,8772
 2010ce4:	e0bffa17 	ldw	r2,-24(fp)
 2010ce8:	01400304 	movi	r5,12
 2010cec:	1009883a 	mov	r4,r2
 2010cf0:	2000a4c0 	call	2000a4c <__mulsi3>
 2010cf4:	8085883a 	add	r2,r16,r2
 2010cf8:	10800104 	addi	r2,r2,4
 2010cfc:	10c00017 	ldw	r3,0(r2)
 2010d00:	e0bffb17 	ldw	r2,-20(fp)
 2010d04:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2010d08:	04008074 	movhi	r16,513
 2010d0c:	84089104 	addi	r16,r16,8772
 2010d10:	e0bffa17 	ldw	r2,-24(fp)
 2010d14:	01400304 	movi	r5,12
 2010d18:	1009883a 	mov	r4,r2
 2010d1c:	2000a4c0 	call	2000a4c <__mulsi3>
 2010d20:	8085883a 	add	r2,r16,r2
 2010d24:	10800204 	addi	r2,r2,8
 2010d28:	10c00017 	ldw	r3,0(r2)
 2010d2c:	e0bffb17 	ldw	r2,-20(fp)
 2010d30:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2010d34:	e13ffa17 	ldw	r4,-24(fp)
 2010d38:	200edb00 	call	200edb0 <alt_release_fd>
  }
} 
 2010d3c:	0001883a 	nop
 2010d40:	e6ffff04 	addi	sp,fp,-4
 2010d44:	dfc00217 	ldw	ra,8(sp)
 2010d48:	df000117 	ldw	fp,4(sp)
 2010d4c:	dc000017 	ldw	r16,0(sp)
 2010d50:	dec00304 	addi	sp,sp,12
 2010d54:	f800283a 	ret

02010d58 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2010d58:	defffb04 	addi	sp,sp,-20
 2010d5c:	dfc00415 	stw	ra,16(sp)
 2010d60:	df000315 	stw	fp,12(sp)
 2010d64:	df000304 	addi	fp,sp,12
 2010d68:	e13ffd15 	stw	r4,-12(fp)
 2010d6c:	e17ffe15 	stw	r5,-8(fp)
 2010d70:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2010d74:	01c07fc4 	movi	r7,511
 2010d78:	01800044 	movi	r6,1
 2010d7c:	e17ffd17 	ldw	r5,-12(fp)
 2010d80:	01008074 	movhi	r4,513
 2010d84:	21089404 	addi	r4,r4,8784
 2010d88:	2010c740 	call	2010c74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2010d8c:	01c07fc4 	movi	r7,511
 2010d90:	000d883a 	mov	r6,zero
 2010d94:	e17ffe17 	ldw	r5,-8(fp)
 2010d98:	01008074 	movhi	r4,513
 2010d9c:	21089104 	addi	r4,r4,8772
 2010da0:	2010c740 	call	2010c74 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2010da4:	01c07fc4 	movi	r7,511
 2010da8:	01800044 	movi	r6,1
 2010dac:	e17fff17 	ldw	r5,-4(fp)
 2010db0:	01008074 	movhi	r4,513
 2010db4:	21089704 	addi	r4,r4,8796
 2010db8:	2010c740 	call	2010c74 <alt_open_fd>
}  
 2010dbc:	0001883a 	nop
 2010dc0:	e037883a 	mov	sp,fp
 2010dc4:	dfc00117 	ldw	ra,4(sp)
 2010dc8:	df000017 	ldw	fp,0(sp)
 2010dcc:	dec00204 	addi	sp,sp,8
 2010dd0:	f800283a 	ret

02010dd4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2010dd4:	defffa04 	addi	sp,sp,-24
 2010dd8:	df000515 	stw	fp,20(sp)
 2010ddc:	df000504 	addi	fp,sp,20
 2010de0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010de4:	0005303a 	rdctl	r2,status
 2010de8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010dec:	e0fffc17 	ldw	r3,-16(fp)
 2010df0:	00bfff84 	movi	r2,-2
 2010df4:	1884703a 	and	r2,r3,r2
 2010df8:	1001703a 	wrctl	status,r2
  
  return context;
 2010dfc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2010e00:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2010e04:	e0bfff17 	ldw	r2,-4(fp)
 2010e08:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2010e0c:	e0bffd17 	ldw	r2,-12(fp)
 2010e10:	10800017 	ldw	r2,0(r2)
 2010e14:	e0fffd17 	ldw	r3,-12(fp)
 2010e18:	18c00117 	ldw	r3,4(r3)
 2010e1c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2010e20:	e0bffd17 	ldw	r2,-12(fp)
 2010e24:	10800117 	ldw	r2,4(r2)
 2010e28:	e0fffd17 	ldw	r3,-12(fp)
 2010e2c:	18c00017 	ldw	r3,0(r3)
 2010e30:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2010e34:	e0bffd17 	ldw	r2,-12(fp)
 2010e38:	e0fffd17 	ldw	r3,-12(fp)
 2010e3c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2010e40:	e0bffd17 	ldw	r2,-12(fp)
 2010e44:	e0fffd17 	ldw	r3,-12(fp)
 2010e48:	10c00015 	stw	r3,0(r2)
 2010e4c:	e0bffb17 	ldw	r2,-20(fp)
 2010e50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010e54:	e0bffe17 	ldw	r2,-8(fp)
 2010e58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2010e5c:	0001883a 	nop
 2010e60:	e037883a 	mov	sp,fp
 2010e64:	df000017 	ldw	fp,0(sp)
 2010e68:	dec00104 	addi	sp,sp,4
 2010e6c:	f800283a 	ret

02010e70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2010e70:	defffb04 	addi	sp,sp,-20
 2010e74:	dfc00415 	stw	ra,16(sp)
 2010e78:	df000315 	stw	fp,12(sp)
 2010e7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2010e80:	d0a02017 	ldw	r2,-32640(gp)
 2010e84:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2010e88:	d0a70517 	ldw	r2,-25580(gp)
 2010e8c:	10800044 	addi	r2,r2,1
 2010e90:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2010e94:	00002e06 	br	2010f50 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2010e98:	e0bffd17 	ldw	r2,-12(fp)
 2010e9c:	10800017 	ldw	r2,0(r2)
 2010ea0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2010ea4:	e0bffd17 	ldw	r2,-12(fp)
 2010ea8:	10800403 	ldbu	r2,16(r2)
 2010eac:	10803fcc 	andi	r2,r2,255
 2010eb0:	10000426 	beq	r2,zero,2010ec4 <alt_tick+0x54>
 2010eb4:	d0a70517 	ldw	r2,-25580(gp)
 2010eb8:	1000021e 	bne	r2,zero,2010ec4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2010ebc:	e0bffd17 	ldw	r2,-12(fp)
 2010ec0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2010ec4:	e0bffd17 	ldw	r2,-12(fp)
 2010ec8:	10800217 	ldw	r2,8(r2)
 2010ecc:	d0e70517 	ldw	r3,-25580(gp)
 2010ed0:	18801d36 	bltu	r3,r2,2010f48 <alt_tick+0xd8>
 2010ed4:	e0bffd17 	ldw	r2,-12(fp)
 2010ed8:	10800403 	ldbu	r2,16(r2)
 2010edc:	10803fcc 	andi	r2,r2,255
 2010ee0:	1000191e 	bne	r2,zero,2010f48 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2010ee4:	e0bffd17 	ldw	r2,-12(fp)
 2010ee8:	10800317 	ldw	r2,12(r2)
 2010eec:	e0fffd17 	ldw	r3,-12(fp)
 2010ef0:	18c00517 	ldw	r3,20(r3)
 2010ef4:	1809883a 	mov	r4,r3
 2010ef8:	103ee83a 	callr	r2
 2010efc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2010f00:	e0bfff17 	ldw	r2,-4(fp)
 2010f04:	1000031e 	bne	r2,zero,2010f14 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2010f08:	e13ffd17 	ldw	r4,-12(fp)
 2010f0c:	2010dd40 	call	2010dd4 <alt_alarm_stop>
 2010f10:	00000d06 	br	2010f48 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2010f14:	e0bffd17 	ldw	r2,-12(fp)
 2010f18:	10c00217 	ldw	r3,8(r2)
 2010f1c:	e0bfff17 	ldw	r2,-4(fp)
 2010f20:	1887883a 	add	r3,r3,r2
 2010f24:	e0bffd17 	ldw	r2,-12(fp)
 2010f28:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2010f2c:	e0bffd17 	ldw	r2,-12(fp)
 2010f30:	10c00217 	ldw	r3,8(r2)
 2010f34:	d0a70517 	ldw	r2,-25580(gp)
 2010f38:	1880032e 	bgeu	r3,r2,2010f48 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2010f3c:	e0bffd17 	ldw	r2,-12(fp)
 2010f40:	00c00044 	movi	r3,1
 2010f44:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2010f48:	e0bffe17 	ldw	r2,-8(fp)
 2010f4c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2010f50:	e0fffd17 	ldw	r3,-12(fp)
 2010f54:	d0a02004 	addi	r2,gp,-32640
 2010f58:	18bfcf1e 	bne	r3,r2,2010e98 <__alt_data_end+0xfe010e98>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2010f5c:	0001883a 	nop
}
 2010f60:	0001883a 	nop
 2010f64:	e037883a 	mov	sp,fp
 2010f68:	dfc00117 	ldw	ra,4(sp)
 2010f6c:	df000017 	ldw	fp,0(sp)
 2010f70:	dec00204 	addi	sp,sp,8
 2010f74:	f800283a 	ret

02010f78 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 2010f78:	deffff04 	addi	sp,sp,-4
 2010f7c:	df000015 	stw	fp,0(sp)
 2010f80:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2010f84:	000170fa 	wrctl	ienable,zero
}
 2010f88:	0001883a 	nop
 2010f8c:	e037883a 	mov	sp,fp
 2010f90:	df000017 	ldw	fp,0(sp)
 2010f94:	dec00104 	addi	sp,sp,4
 2010f98:	f800283a 	ret

02010f9c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 2010f9c:	defffe04 	addi	sp,sp,-8
 2010fa0:	df000115 	stw	fp,4(sp)
 2010fa4:	df000104 	addi	fp,sp,4
 2010fa8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 2010fac:	e0bfff17 	ldw	r2,-4(fp)
 2010fb0:	10bffe84 	addi	r2,r2,-6
 2010fb4:	10c00428 	cmpgeui	r3,r2,16
 2010fb8:	18001a1e 	bne	r3,zero,2011024 <alt_exception_cause_generated_bad_addr+0x88>
 2010fbc:	100690ba 	slli	r3,r2,2
 2010fc0:	00808074 	movhi	r2,513
 2010fc4:	1083f504 	addi	r2,r2,4052
 2010fc8:	1885883a 	add	r2,r3,r2
 2010fcc:	10800017 	ldw	r2,0(r2)
 2010fd0:	1000683a 	jmp	r2
 2010fd4:	02011014 	movui	r8,1088
 2010fd8:	02011014 	movui	r8,1088
 2010fdc:	02011024 	muli	r8,zero,1088
 2010fe0:	02011024 	muli	r8,zero,1088
 2010fe4:	02011024 	muli	r8,zero,1088
 2010fe8:	02011014 	movui	r8,1088
 2010fec:	0201101c 	xori	r8,zero,1088
 2010ff0:	02011024 	muli	r8,zero,1088
 2010ff4:	02011014 	movui	r8,1088
 2010ff8:	02011014 	movui	r8,1088
 2010ffc:	02011024 	muli	r8,zero,1088
 2011000:	02011014 	movui	r8,1088
 2011004:	0201101c 	xori	r8,zero,1088
 2011008:	02011024 	muli	r8,zero,1088
 201100c:	02011024 	muli	r8,zero,1088
 2011010:	02011014 	movui	r8,1088
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 2011014:	00800044 	movi	r2,1
 2011018:	00000306 	br	2011028 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 201101c:	0005883a 	mov	r2,zero
 2011020:	00000106 	br	2011028 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 2011024:	0005883a 	mov	r2,zero
  }
}
 2011028:	e037883a 	mov	sp,fp
 201102c:	df000017 	ldw	fp,0(sp)
 2011030:	dec00104 	addi	sp,sp,4
 2011034:	f800283a 	ret

02011038 <atexit>:
 2011038:	200b883a 	mov	r5,r4
 201103c:	000f883a 	mov	r7,zero
 2011040:	000d883a 	mov	r6,zero
 2011044:	0009883a 	mov	r4,zero
 2011048:	20111001 	jmpi	2011100 <__register_exitproc>

0201104c <exit>:
 201104c:	defffe04 	addi	sp,sp,-8
 2011050:	000b883a 	mov	r5,zero
 2011054:	dc000015 	stw	r16,0(sp)
 2011058:	dfc00115 	stw	ra,4(sp)
 201105c:	2021883a 	mov	r16,r4
 2011060:	20112180 	call	2011218 <__call_exitprocs>
 2011064:	00808074 	movhi	r2,513
 2011068:	108d1304 	addi	r2,r2,13388
 201106c:	11000017 	ldw	r4,0(r2)
 2011070:	20800f17 	ldw	r2,60(r4)
 2011074:	10000126 	beq	r2,zero,201107c <exit+0x30>
 2011078:	103ee83a 	callr	r2
 201107c:	8009883a 	mov	r4,r16
 2011080:	20114080 	call	2011408 <_exit>

02011084 <memcmp>:
 2011084:	01c000c4 	movi	r7,3
 2011088:	3980192e 	bgeu	r7,r6,20110f0 <memcmp+0x6c>
 201108c:	2144b03a 	or	r2,r4,r5
 2011090:	11c4703a 	and	r2,r2,r7
 2011094:	10000f26 	beq	r2,zero,20110d4 <memcmp+0x50>
 2011098:	20800003 	ldbu	r2,0(r4)
 201109c:	28c00003 	ldbu	r3,0(r5)
 20110a0:	10c0151e 	bne	r2,r3,20110f8 <memcmp+0x74>
 20110a4:	31bfff84 	addi	r6,r6,-2
 20110a8:	01ffffc4 	movi	r7,-1
 20110ac:	00000406 	br	20110c0 <memcmp+0x3c>
 20110b0:	20800003 	ldbu	r2,0(r4)
 20110b4:	28c00003 	ldbu	r3,0(r5)
 20110b8:	31bfffc4 	addi	r6,r6,-1
 20110bc:	10c00e1e 	bne	r2,r3,20110f8 <memcmp+0x74>
 20110c0:	21000044 	addi	r4,r4,1
 20110c4:	29400044 	addi	r5,r5,1
 20110c8:	31fff91e 	bne	r6,r7,20110b0 <__alt_data_end+0xfe0110b0>
 20110cc:	0005883a 	mov	r2,zero
 20110d0:	f800283a 	ret
 20110d4:	20c00017 	ldw	r3,0(r4)
 20110d8:	28800017 	ldw	r2,0(r5)
 20110dc:	18bfee1e 	bne	r3,r2,2011098 <__alt_data_end+0xfe011098>
 20110e0:	31bfff04 	addi	r6,r6,-4
 20110e4:	21000104 	addi	r4,r4,4
 20110e8:	29400104 	addi	r5,r5,4
 20110ec:	39bff936 	bltu	r7,r6,20110d4 <__alt_data_end+0xfe0110d4>
 20110f0:	303fe91e 	bne	r6,zero,2011098 <__alt_data_end+0xfe011098>
 20110f4:	003ff506 	br	20110cc <__alt_data_end+0xfe0110cc>
 20110f8:	10c5c83a 	sub	r2,r2,r3
 20110fc:	f800283a 	ret

02011100 <__register_exitproc>:
 2011100:	defffa04 	addi	sp,sp,-24
 2011104:	dc000315 	stw	r16,12(sp)
 2011108:	04008074 	movhi	r16,513
 201110c:	840d1304 	addi	r16,r16,13388
 2011110:	80c00017 	ldw	r3,0(r16)
 2011114:	dc400415 	stw	r17,16(sp)
 2011118:	dfc00515 	stw	ra,20(sp)
 201111c:	18805217 	ldw	r2,328(r3)
 2011120:	2023883a 	mov	r17,r4
 2011124:	10003726 	beq	r2,zero,2011204 <__register_exitproc+0x104>
 2011128:	10c00117 	ldw	r3,4(r2)
 201112c:	010007c4 	movi	r4,31
 2011130:	20c00e16 	blt	r4,r3,201116c <__register_exitproc+0x6c>
 2011134:	1a000044 	addi	r8,r3,1
 2011138:	8800221e 	bne	r17,zero,20111c4 <__register_exitproc+0xc4>
 201113c:	18c00084 	addi	r3,r3,2
 2011140:	18c7883a 	add	r3,r3,r3
 2011144:	18c7883a 	add	r3,r3,r3
 2011148:	12000115 	stw	r8,4(r2)
 201114c:	10c7883a 	add	r3,r2,r3
 2011150:	19400015 	stw	r5,0(r3)
 2011154:	0005883a 	mov	r2,zero
 2011158:	dfc00517 	ldw	ra,20(sp)
 201115c:	dc400417 	ldw	r17,16(sp)
 2011160:	dc000317 	ldw	r16,12(sp)
 2011164:	dec00604 	addi	sp,sp,24
 2011168:	f800283a 	ret
 201116c:	00808034 	movhi	r2,512
 2011170:	1088ac04 	addi	r2,r2,8880
 2011174:	10002626 	beq	r2,zero,2011210 <__register_exitproc+0x110>
 2011178:	01006404 	movi	r4,400
 201117c:	d9400015 	stw	r5,0(sp)
 2011180:	d9800115 	stw	r6,4(sp)
 2011184:	d9c00215 	stw	r7,8(sp)
 2011188:	20022b00 	call	20022b0 <malloc>
 201118c:	d9400017 	ldw	r5,0(sp)
 2011190:	d9800117 	ldw	r6,4(sp)
 2011194:	d9c00217 	ldw	r7,8(sp)
 2011198:	10001d26 	beq	r2,zero,2011210 <__register_exitproc+0x110>
 201119c:	81000017 	ldw	r4,0(r16)
 20111a0:	10000115 	stw	zero,4(r2)
 20111a4:	02000044 	movi	r8,1
 20111a8:	22405217 	ldw	r9,328(r4)
 20111ac:	0007883a 	mov	r3,zero
 20111b0:	12400015 	stw	r9,0(r2)
 20111b4:	20805215 	stw	r2,328(r4)
 20111b8:	10006215 	stw	zero,392(r2)
 20111bc:	10006315 	stw	zero,396(r2)
 20111c0:	883fde26 	beq	r17,zero,201113c <__alt_data_end+0xfe01113c>
 20111c4:	18c9883a 	add	r4,r3,r3
 20111c8:	2109883a 	add	r4,r4,r4
 20111cc:	1109883a 	add	r4,r2,r4
 20111d0:	21802215 	stw	r6,136(r4)
 20111d4:	01800044 	movi	r6,1
 20111d8:	12406217 	ldw	r9,392(r2)
 20111dc:	30cc983a 	sll	r6,r6,r3
 20111e0:	4992b03a 	or	r9,r9,r6
 20111e4:	12406215 	stw	r9,392(r2)
 20111e8:	21c04215 	stw	r7,264(r4)
 20111ec:	01000084 	movi	r4,2
 20111f0:	893fd21e 	bne	r17,r4,201113c <__alt_data_end+0xfe01113c>
 20111f4:	11006317 	ldw	r4,396(r2)
 20111f8:	218cb03a 	or	r6,r4,r6
 20111fc:	11806315 	stw	r6,396(r2)
 2011200:	003fce06 	br	201113c <__alt_data_end+0xfe01113c>
 2011204:	18805304 	addi	r2,r3,332
 2011208:	18805215 	stw	r2,328(r3)
 201120c:	003fc606 	br	2011128 <__alt_data_end+0xfe011128>
 2011210:	00bfffc4 	movi	r2,-1
 2011214:	003fd006 	br	2011158 <__alt_data_end+0xfe011158>

02011218 <__call_exitprocs>:
 2011218:	defff504 	addi	sp,sp,-44
 201121c:	df000915 	stw	fp,36(sp)
 2011220:	dd400615 	stw	r21,24(sp)
 2011224:	dc800315 	stw	r18,12(sp)
 2011228:	dfc00a15 	stw	ra,40(sp)
 201122c:	ddc00815 	stw	r23,32(sp)
 2011230:	dd800715 	stw	r22,28(sp)
 2011234:	dd000515 	stw	r20,20(sp)
 2011238:	dcc00415 	stw	r19,16(sp)
 201123c:	dc400215 	stw	r17,8(sp)
 2011240:	dc000115 	stw	r16,4(sp)
 2011244:	d9000015 	stw	r4,0(sp)
 2011248:	2839883a 	mov	fp,r5
 201124c:	04800044 	movi	r18,1
 2011250:	057fffc4 	movi	r21,-1
 2011254:	00808074 	movhi	r2,513
 2011258:	108d1304 	addi	r2,r2,13388
 201125c:	12000017 	ldw	r8,0(r2)
 2011260:	45005217 	ldw	r20,328(r8)
 2011264:	44c05204 	addi	r19,r8,328
 2011268:	a0001c26 	beq	r20,zero,20112dc <__call_exitprocs+0xc4>
 201126c:	a0800117 	ldw	r2,4(r20)
 2011270:	15ffffc4 	addi	r23,r2,-1
 2011274:	b8000d16 	blt	r23,zero,20112ac <__call_exitprocs+0x94>
 2011278:	14000044 	addi	r16,r2,1
 201127c:	8421883a 	add	r16,r16,r16
 2011280:	8421883a 	add	r16,r16,r16
 2011284:	84402004 	addi	r17,r16,128
 2011288:	a463883a 	add	r17,r20,r17
 201128c:	a421883a 	add	r16,r20,r16
 2011290:	e0001e26 	beq	fp,zero,201130c <__call_exitprocs+0xf4>
 2011294:	80804017 	ldw	r2,256(r16)
 2011298:	e0801c26 	beq	fp,r2,201130c <__call_exitprocs+0xf4>
 201129c:	bdffffc4 	addi	r23,r23,-1
 20112a0:	843fff04 	addi	r16,r16,-4
 20112a4:	8c7fff04 	addi	r17,r17,-4
 20112a8:	bd7ff91e 	bne	r23,r21,2011290 <__alt_data_end+0xfe011290>
 20112ac:	00808034 	movhi	r2,512
 20112b0:	1088b104 	addi	r2,r2,8900
 20112b4:	10000926 	beq	r2,zero,20112dc <__call_exitprocs+0xc4>
 20112b8:	a0800117 	ldw	r2,4(r20)
 20112bc:	1000301e 	bne	r2,zero,2011380 <__call_exitprocs+0x168>
 20112c0:	a0800017 	ldw	r2,0(r20)
 20112c4:	10003226 	beq	r2,zero,2011390 <__call_exitprocs+0x178>
 20112c8:	a009883a 	mov	r4,r20
 20112cc:	98800015 	stw	r2,0(r19)
 20112d0:	20022c40 	call	20022c4 <free>
 20112d4:	9d000017 	ldw	r20,0(r19)
 20112d8:	a03fe41e 	bne	r20,zero,201126c <__alt_data_end+0xfe01126c>
 20112dc:	dfc00a17 	ldw	ra,40(sp)
 20112e0:	df000917 	ldw	fp,36(sp)
 20112e4:	ddc00817 	ldw	r23,32(sp)
 20112e8:	dd800717 	ldw	r22,28(sp)
 20112ec:	dd400617 	ldw	r21,24(sp)
 20112f0:	dd000517 	ldw	r20,20(sp)
 20112f4:	dcc00417 	ldw	r19,16(sp)
 20112f8:	dc800317 	ldw	r18,12(sp)
 20112fc:	dc400217 	ldw	r17,8(sp)
 2011300:	dc000117 	ldw	r16,4(sp)
 2011304:	dec00b04 	addi	sp,sp,44
 2011308:	f800283a 	ret
 201130c:	a0800117 	ldw	r2,4(r20)
 2011310:	80c00017 	ldw	r3,0(r16)
 2011314:	10bfffc4 	addi	r2,r2,-1
 2011318:	15c01426 	beq	r2,r23,201136c <__call_exitprocs+0x154>
 201131c:	80000015 	stw	zero,0(r16)
 2011320:	183fde26 	beq	r3,zero,201129c <__alt_data_end+0xfe01129c>
 2011324:	95c8983a 	sll	r4,r18,r23
 2011328:	a0806217 	ldw	r2,392(r20)
 201132c:	a5800117 	ldw	r22,4(r20)
 2011330:	2084703a 	and	r2,r4,r2
 2011334:	10000b26 	beq	r2,zero,2011364 <__call_exitprocs+0x14c>
 2011338:	a0806317 	ldw	r2,396(r20)
 201133c:	2088703a 	and	r4,r4,r2
 2011340:	20000c1e 	bne	r4,zero,2011374 <__call_exitprocs+0x15c>
 2011344:	89400017 	ldw	r5,0(r17)
 2011348:	d9000017 	ldw	r4,0(sp)
 201134c:	183ee83a 	callr	r3
 2011350:	a0800117 	ldw	r2,4(r20)
 2011354:	15bfbf1e 	bne	r2,r22,2011254 <__alt_data_end+0xfe011254>
 2011358:	98800017 	ldw	r2,0(r19)
 201135c:	153fcf26 	beq	r2,r20,201129c <__alt_data_end+0xfe01129c>
 2011360:	003fbc06 	br	2011254 <__alt_data_end+0xfe011254>
 2011364:	183ee83a 	callr	r3
 2011368:	003ff906 	br	2011350 <__alt_data_end+0xfe011350>
 201136c:	a5c00115 	stw	r23,4(r20)
 2011370:	003feb06 	br	2011320 <__alt_data_end+0xfe011320>
 2011374:	89000017 	ldw	r4,0(r17)
 2011378:	183ee83a 	callr	r3
 201137c:	003ff406 	br	2011350 <__alt_data_end+0xfe011350>
 2011380:	a0800017 	ldw	r2,0(r20)
 2011384:	a027883a 	mov	r19,r20
 2011388:	1029883a 	mov	r20,r2
 201138c:	003fb606 	br	2011268 <__alt_data_end+0xfe011268>
 2011390:	0005883a 	mov	r2,zero
 2011394:	003ffb06 	br	2011384 <__alt_data_end+0xfe011384>

02011398 <__floatundidf>:
 2011398:	defffc04 	addi	sp,sp,-16
 201139c:	dc800215 	stw	r18,8(sp)
 20113a0:	2025883a 	mov	r18,r4
 20113a4:	2809883a 	mov	r4,r5
 20113a8:	dfc00315 	stw	ra,12(sp)
 20113ac:	dc400115 	stw	r17,4(sp)
 20113b0:	dc000015 	stw	r16,0(sp)
 20113b4:	200e2fc0 	call	200e2fc <__floatunsidf>
 20113b8:	000d883a 	mov	r6,zero
 20113bc:	01d07c34 	movhi	r7,16880
 20113c0:	180b883a 	mov	r5,r3
 20113c4:	1009883a 	mov	r4,r2
 20113c8:	200d0380 	call	200d038 <__muldf3>
 20113cc:	9009883a 	mov	r4,r18
 20113d0:	1023883a 	mov	r17,r2
 20113d4:	1821883a 	mov	r16,r3
 20113d8:	200e2fc0 	call	200e2fc <__floatunsidf>
 20113dc:	880d883a 	mov	r6,r17
 20113e0:	800f883a 	mov	r7,r16
 20113e4:	1009883a 	mov	r4,r2
 20113e8:	180b883a 	mov	r5,r3
 20113ec:	200bb640 	call	200bb64 <__adddf3>
 20113f0:	dfc00317 	ldw	ra,12(sp)
 20113f4:	dc800217 	ldw	r18,8(sp)
 20113f8:	dc400117 	ldw	r17,4(sp)
 20113fc:	dc000017 	ldw	r16,0(sp)
 2011400:	dec00404 	addi	sp,sp,16
 2011404:	f800283a 	ret

02011408 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2011408:	defffd04 	addi	sp,sp,-12
 201140c:	df000215 	stw	fp,8(sp)
 2011410:	df000204 	addi	fp,sp,8
 2011414:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2011418:	0001883a 	nop
 201141c:	e0bfff17 	ldw	r2,-4(fp)
 2011420:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 2011424:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2011428:	10000226 	beq	r2,zero,2011434 <_exit+0x2c>
    ALT_SIM_FAIL();
 201142c:	002af070 	cmpltui	zero,zero,43969
 2011430:	00000106 	br	2011438 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 2011434:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2011438:	003fff06 	br	2011438 <__alt_data_end+0xfe011438>
